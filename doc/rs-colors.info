This is rs-colors.info, produced by makeinfo version 5.2 from
rs-colors.texi.

This is edition 1 (draft), last updated 2014-03-20, of 'RS-COLORS - A
Color Data Type for Common Lisp', for RS-COLORS version 20131204.2148.

     Copyright (C) 2014 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.
INFO-DIR-SECTION Libraries
START-INFO-DIR-ENTRY
* rs-colors: (rs-colors).       A color data type for Common Lisp.
END-INFO-DIR-ENTRY


File: rs-colors.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

RS-COLORS
*********

This is edition 1 (draft), last updated 2014-03-20, of 'RS-COLORS - A
Color Data Type for Common Lisp', for RS-COLORS version 20131204.2148.

     Copyright (C) 2014 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.

* Menu:

* Introduction::
* User's Guide::
* Programmer's Guide::
* Reference Manual::
* Symbol Index::
* Concept Index::


File: rs-colors.info,  Node: Introduction,  Next: User's Guide,  Prev: Top,  Up: Top

1 Introduction
**************

A color is either associated with a color model or a color space.  Two
color models are in widespread use with computers:

   * The additive RGB color model with the primary colors red, green,
     and blue.

   * The subtractive CMY color model with the primary colors cyan,
     magenta, and yellow.

The RGB color model is the usual color model for computer displays.  If
the color intensity of all primary colors is zero, that means "off", the
display appears "black".  Otherwise, if the color intensity of all
primary colors is one, that means "on", the display appears "white".

The CMY color model is the usual color model for paper printers.  If the
color intensity of all primary colors is zero, that means "off", the
paper appears "white".  Otherwise, if the color intensity of all primary
colors is one, that means "on", the paper appears "black".

Theoretically, a RGB tuple (R, G, B) and a CMY tuple (C, M, Y) are
related to each other via the simple equations

     C = 1 - R
     M = 1 - G
     Y = 1 - B

The CMYK color model is an extension of the CMY color model to save ink.
Theoretically, a CMY tuple (C, M, Y) and a CMYK quadruple (c, m, y, k)
can be related to each other via the equations

     k = min(C, M, Y)
     c = (C - k) / (1 - k)
     m = (M - k) / (1 - k)
     y = (Y - k) / (1 - k)

and

     C = min(1, c (1 - k) + k)
     M = min(1, m (1 - k) + k)
     Y = min(1, y (1 - k) + k)


File: rs-colors.info,  Node: User's Guide,  Next: Programmer's Guide,  Prev: Introduction,  Up: Top

2 User's Guide
**************

* Menu:

* The Color Data Type::
* Creating Color Objects::
* Color Coordinates::
* White Point::
* Color Conversion::


File: rs-colors.info,  Node: The Color Data Type,  Next: Creating Color Objects,  Prev: User's Guide,  Up: User's Guide

2.1 The Color Data Type
=======================

First of all, there is not _one_ color data type.  Instead, every color
is an instance of a particular color class.  All color classes are
sub-classes of the abstract *note 'color-object':
class:rs-colors:color-object. class.  The built-in color classes are
listed in the following tables.

Color Classes for Color Models
==============================

*note 'generic-rgb-color': class:rs-colors:generic-rgb-color.
     Mathematical description of the RGB color model.

*note 'generic-hsv-color': class:rs-colors:generic-hsv-color.
     Mathematical description of the HSV color space.  The HSV color
     space is a different representation of the RGB color model.

*note 'generic-hsl-color': class:rs-colors:generic-hsl-color.
     Mathematical description of the HSL color space.  The HSL color
     space is a different representation of the RGB color model.

*note 'generic-cmy-color': class:rs-colors:generic-cmy-color.
     Mathematical description of the CMY color model.

*note 'generic-cmyk-color': class:rs-colors:generic-cmyk-color.
     Mathematical description of the CMYK color model.

Color Classes for Absolute Color Spaces
=======================================

*note 'cie-rgb-color': class:rs-colors:cie-rgb-color.
     The CIE RGB color space.

*note 'cie-xyz-color': class:rs-colors:cie-xyz-color.
     The CIE XYZ color space.

*note 'cie-xyy-color': class:rs-colors:cie-xyy-color.
     The CIE xyY color space.

*note 'cie-luv-color': class:rs-colors:cie-luv-color.
     The CIE L*u*v* color space.

*note 'cie-lab-color': class:rs-colors:cie-lab-color.
     The CIE L*a*b* color space.

Color Classes for Device Dependent Color Spaces
===============================================

*note 'srgb-color': class:rs-colors:srgb-color.
     The sRGB color space.

*note 'adobe-rgb-color': class:rs-colors:adobe-rgb-color.
     The Adobe RGB color space.


File: rs-colors.info,  Node: Creating Color Objects,  Next: Color Coordinates,  Prev: The Color Data Type,  Up: User's Guide

2.2 Creating Color Objects
==========================

Colors are instantiated by calling a constructor function.  Constructor
arguments are usually the color coordinates in the respective color
space.  To create, for example, a color in the sRGB color space, say

     (make-srgb-color 252/255 175/255 62/255)
      => #<SRGB-COLOR (84/85 35/51 62/255)>

Many color coordinates have to be expressed as intensity values, that is
values in the range from zero to one inclusive.  That's the reason why
the sRGB color coordinates in the above example are specified as
rational numbers.

Some constructors accept a ':byte-size' keyword argument.  This is
useful if the scale factor is equal for all color coordinates.  With
that we can rewrite the above example as

     (make-srgb-color 252 175 62 :byte-size 8)
      => #<SRGB-COLOR (84/85 35/51 62/255)>

As you can see, the resulting color coordinates are equal.  Another
common case is to encode the color coordinates in a single integral
number.  Again, the ':byte-size' keyword argument specifies how many
bits are used to encode a single color coordinate.  Thus,

     (make-srgb-color-from-number #XFCAF3E :byte-size 8)
      => #<SRGB-COLOR (84/85 35/51 62/255)>

results in the same color as before.

The built-in constructors are listed in the following table.

*note 'make-generic-rgb-color': function:rs-colors:make-generic-rgb-color.
*note 'make-generic-rgb-color-from-number': function:rs-colors:make-generic-rgb-color-from-number.
     Create a generic RGB color object.

*note 'make-generic-hsv-color': function:rs-colors:make-generic-hsv-color.
     Create a generic HSV color object.

*note 'make-generic-hsl-color': function:rs-colors:make-generic-hsl-color.
     Create a generic HSL color object.

*note 'make-generic-cmy-color': function:rs-colors:make-generic-cmy-color.
*note 'make-generic-cmy-color-from-number': function:rs-colors:make-generic-cmy-color-from-number.
     Create a generic CMY color object.

*note 'make-generic-cmyk-color': function:rs-colors:make-generic-cmyk-color.
*note 'make-generic-cmyk-color-from-number': function:rs-colors:make-generic-cmyk-color-from-number.
     Create a generic CMYK color object.

*note 'make-cie-rgb-color': function:rs-colors:make-cie-rgb-color.
     Create a CIE RGB color object.

*note 'make-cie-xyz-color': function:rs-colors:make-cie-xyz-color.
     Create a CIE XYZ color object.

*note 'make-cie-xyy-color': function:rs-colors:make-cie-xyy-color.
     Create a CIE xyY color object.

*note 'make-cie-luv-color': function:rs-colors:make-cie-luv-color.
     Create a CIE L*u*v* color object.

*note 'make-cie-lab-color': function:rs-colors:make-cie-lab-color.
     Create a CIE L*a*b* color object.

*note 'make-srgb-color': function:rs-colors:make-srgb-color.
*note 'make-srgb-color-from-number': function:rs-colors:make-srgb-color-from-number.
     Create a sRGB color object.

*note 'make-adobe-rgb-color': function:rs-colors:make-adobe-rgb-color.
*note 'make-adobe-rgb-color-from-number': function:rs-colors:make-adobe-rgb-color-from-number.
     Create an Adobe RGB color object.


File: rs-colors.info,  Node: Color Coordinates,  Next: White Point,  Prev: Creating Color Objects,  Up: User's Guide

2.3 Color Coordinates
=====================

Use the *note 'color-coordinates':
generic-function:rs-colors:color-coordinates. function to get the color
coordinates of a color.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       ;; We know that COLOR is an RGB color.
       (multiple-value-bind (r g b)
           (color-coordinates color)
         (list r g b)))
      => (84/85 35/51 62/255)

A more useful way to get the color coordinates of a color is described
in *note Color Conversion::.


File: rs-colors.info,  Node: White Point,  Next: Color Conversion,  Prev: Color Coordinates,  Up: User's Guide

2.4 White Point
===============

A device dependent color space usually has a "white point".  If so, the
*note 'white-point': generic-function:rs-colors:white-point. function
returns a color object of this white point.


File: rs-colors.info,  Node: Color Conversion,  Prev: White Point,  Up: User's Guide

2.5 Color Conversion
====================

 [image src="color-conversion.png" ]

Figure 2.1

*note Figure 2.1: figure:color-conversion. depicts the implemented color
conversions.  The nice thing about RS-COLORS is that all these color
conversions can be performed with the 'change-class' function.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       (values (change-class color 'generic-cmyk-color) color))
      => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
      => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

If you wish to keep the original color object unchanged, use the
'coerce-color' function.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       (values (coerce-color color 'generic-cmyk-color) color))
      => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
      => #<SRGB-COLOR (84/85 35/51 62/255)>

The 'coerce-color' function only creates a copy of the color if the
color object is not already of the correct type.

If you only need the color coordinates, you can call one of the
following functions to get them.

*note 'generic-rgb-color-coordinates': generic-function:rs-colors:generic-rgb-color-coordinates.
*note 'generic-hsv-color-coordinates': generic-function:rs-colors:generic-hsv-color-coordinates.
*note 'generic-hsl-color-coordinates': generic-function:rs-colors:generic-hsl-color-coordinates.
*note 'generic-cmy-color-coordinates': generic-function:rs-colors:generic-cmy-color-coordinates.
*note 'generic-cmyk-color-coordinates': generic-function:rs-colors:generic-cmyk-color-coordinates.

*note 'cie-rgb-color-coordinates': generic-function:rs-colors:cie-rgb-color-coordinates.
*note 'cie-xyz-color-coordinates': generic-function:rs-colors:cie-xyz-color-coordinates.
*note 'cie-xyy-color-coordinates': generic-function:rs-colors:cie-xyy-color-coordinates.
*note 'cie-luv-color-coordinates': generic-function:rs-colors:cie-luv-color-coordinates.
*note 'cie-lab-color-coordinates': generic-function:rs-colors:cie-lab-color-coordinates.

*note 'srgb-color-coordinates': generic-function:rs-colors:srgb-color-coordinates.
*note 'adobe-rgb-color-coordinates': generic-function:rs-colors:adobe-rgb-color-coordinates.


File: rs-colors.info,  Node: Programmer's Guide,  Next: Reference Manual,  Prev: User's Guide,  Up: Top

3 Programmer's Guide
********************

So you want to implement your own color type.

Abstact Color Classes
=====================

*note 'color-object': class:rs-colors:color-object.
     Base class for a color.

*note 'rgb-color-object': class:rs-colors:rgb-color-object.
     Base class for a RGB color space.

     *Slots*

     'r'
          Normalized intensity of the red primary.

          Value has to be a real number in the closed interval [0, 1].
          Default value for initialization keyword argument RED is zero.

     'g'
          Normalized intensity of the red primary.

          Value has to be a real number in the closed interval [0, 1].
          Default value for initialization keyword argument GREEN is
          zero.

     'b'
          Normalized intensity of the red primary.

          Value has to be a real number in the closed interval [0, 1].
          Default value for initialization keyword argument BLUE is
          zero.

        * Slot 'r' is the normalized intensity of the red primary.

          Value has to be a real number in the closed interval [0, 1].
          Default value for initialization keyword argument RED is zero.

        * Slot 'g' is the normalized intensity of the green primary.

          Value has to be a real number in the closed interval [0, 1].
          Default value for the initialization keyword argument GREEN is
          zero.

        * Slot 'b' is the normalized intensity of the blue primary.

          Value has to be a real number in the closed interval [0, 1].
          Default value for the initialization keyword argument BLUE is
          zero.

*note 'hsv-color-object': class:rs-colors:hsv-color-object.
     Base class for a HSV color space.

*note 'hsl-color-object': class:rs-colors:hsl-color-object.
     Base class for a HSL color space.

*note 'cmy-color-object': class:rs-colors:cmy-color-object.
     Base class for a CMY color space.

*note 'cmyk-color-object': class:rs-colors:cmyk-color-object.
     Base class for a CMYK color space.

*note 'generic-color-object': class:rs-colors:generic-color-object.
     Base class for a color model.


File: rs-colors.info,  Node: Reference Manual,  Next: Symbol Index,  Prev: Programmer's Guide,  Up: Top

4 Reference Manual
******************

* Menu:

* Color Predicates::
* Abstract Color Classes::
* Generic Color Spaces (Color Models)::
* CIE Color Spaces::
* RGB Color Spaces::
* Color Properties::
* Color Conversions::
* Input and Output::
* Miscellaneous::


File: rs-colors.info,  Node: Color Predicates,  Next: Abstract Color Classes,  Prev: Reference Manual,  Up: Reference Manual

4.1 Color Predicates
====================

Use the 'colorp' function to check whether or not an object is a color.
This covers all color classes documented in this manual.

 -- Function: colorp object
     Return true if OBJECT is a color object.


File: rs-colors.info,  Node: Abstract Color Classes,  Next: Generic Color Spaces (Color Models),  Prev: Color Predicates,  Up: Reference Manual

4.2 Abstract Color Classes
==========================

The color classes documented in this section are merely used as
superclasses.

 -- Class: color-object
     Base class for a color.

     *Class Precedence List*
     *note 'color-object': class:rs-colors:color-object,
     'standard-object', 't'.

 -- Class: rgb-color-object
     Color class for a RGB color space.

     Color coordinates are the normalized intensities of the red, green,
     and blue primary.  Values are real numbers in the closed
     interval [0, 1].

     *Class Precedence List*
     *note 'rgb-color-object': class:rs-colors:rgb-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Class: hsv-color-object
     Color class for a HSV/HSB color space.

     Color coordinates are hue, saturation, and value (brightness).  Hue
     is a real number in the half-closed interval [0, 360).  Saturation
     and value are real numbers in the closed interval [0, 1].

     *Class Precedence List*
     *note 'hsv-color-object': class:rs-colors:hsv-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Class: hsl-color-object
     Color class for a HSL color space.

     Color coordinates are hue, saturation, and lightness.  Hue is a
     real number in the half-closed interval [0, 360).  Saturation and
     lightness are real numbers in the closed interval [0, 1].

     *Class Precedence List*
     *note 'hsl-color-object': class:rs-colors:hsl-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Class: cmy-color-object
     Color class for a CMY color space.

     Color coordinates are the normalized intensities of the cyan,
     magenta, and yellow primary.  Values are real numbers in the closed
     interval [0, 1].

     *Class Precedence List*
     *note 'cmy-color-object': class:rs-colors:cmy-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Class: cmyk-color-object
     Color class for a CMYK color space.

     Color coordinates are the normalized intensities of the cyan,
     magenta, yellow, and black (key) primary.  Values are real numbers
     in the closed interval [0, 1].

     *Class Precedence List*
     *note 'cmyk-color-object': class:rs-colors:cmyk-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Class: generic-color-object
     Color class for the mathematical model of a color space.

     *Class Precedence List*
     *note 'generic-color-object': class:rs-colors:generic-color-object,
     *note 'color-object': class:rs-colors:color-object, ...


File: rs-colors.info,  Node: Generic Color Spaces (Color Models),  Next: CIE Color Spaces,  Prev: Abstract Color Classes,  Up: Reference Manual

4.3 Generic Color Spaces (Color Models)
=======================================

A generic color space implements a color model.  There are two major
color models: the additive RGB color model and the subtractive CMY color
model.

* Menu:

* Generic RGB Color Space::
* Generic HSV Color Space::
* Generic HSL Color Space::
* Generic CMY Color Space::
* Generic CMYK Color Space::


File: rs-colors.info,  Node: Generic RGB Color Space,  Next: Generic HSV Color Space,  Prev: Generic Color Spaces (Color Models),  Up: Generic Color Spaces (Color Models)

4.3.1 Generic RGB Color Space
-----------------------------

The generic RGB color space is a mathematical description of the RGB
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed interval [0, 1].
There is no white point.

 -- Class: generic-rgb-color
     Color class for the generic RGB color space.

     *Class Precedence List*
     *note 'generic-rgb-color': class:rs-colors:generic-rgb-color,    *note 'rgb-color-object': class:rs-colors:rgb-color-object,    *note 'generic-color-object': class:rs-colors:generic-color-object,    *note 'color-object': class:rs-colors:color-object,    ...

 -- Function: make-generic-rgb-color red green blue &key byte-size
     Create a new color in the generic RGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be real numbers in the
     closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-generic-rgb-color 252/255 175/255 62/255)
           => #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

          (make-generic-rgb-color 252 175 62 :byte-size 8)
           => #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-generic-rgb-color-from-number value &key byte-size
     Create a new color in the generic RGB color space.

        * Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-generic-rgb-color-from-number #XFCAF3E)
           => #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: generic-rgb-color-coordinates color
     Return the generic RGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Generic HSV Color Space,  Next: Generic HSL Color Space,  Prev: Generic RGB Color Space,  Up: Generic Color Spaces (Color Models)

4.3.2 Generic HSV Color Space
-----------------------------

The HSV color space is a different representation of the RGB color
model.  The HSV color space is also called HSB color space.  The generic
HSV color space is not associated with a particular device.

Color coordinates are hue, saturation, and value (brightness).  Hue is a
real number in the half-closed interval [0, 360).  Saturation and value
are real numbers in the closed interval [0, 1].  There is no white
point.

 -- Class: generic-hsv-color
     Color class for the generic HSV color space.

     *Class Precedence List*
     *note 'generic-hsv-color': class:rs-colors:generic-hsv-color,    *note 'hsv-color-object': class:rs-colors:hsv-color-object,    *note 'generic-color-object': class:rs-colors:generic-color-object,    *note 'color-object': class:rs-colors:color-object,    ...

 -- Function: make-generic-hsv-color hue saturation value
     Create a new color in the generic HSV color space.

        * First argument HUE is the angle of the RGB color wheel in
          degree.

        * Second argument SATURATION is the saturation.

        * Third argument VALUE is the brightness.

     Argument HUE has to be a real number.  It's value is reduced to the
     half-closed interval [0, 360).  Arguments SATURATION and VALUE have
     to be real numbers in the closed interval [0, 1].

 -- Generic Function: generic-hsv-color-coordinates color
     Return the generic HSV color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the hue, saturation, and value (brightness).


File: rs-colors.info,  Node: Generic HSL Color Space,  Next: Generic CMY Color Space,  Prev: Generic HSV Color Space,  Up: Generic Color Spaces (Color Models)

4.3.3 Generic HSL Color Space
-----------------------------

The HSL color space is a different representation of the RGB color
model.  The generic HSL color space is not associated with a particular
device.

Color coordinates are hue, saturation, and lightness.  Hue is a real
number in the half-closed interval [0, 360).  Saturation and lightness
are real numbers in the closed interval [0, 1].  There is no white
point.

 -- Class: generic-hsl-color
     Color class for the generic HSL color space.

     *Class Precedence List*
     *note 'generic-hsl-color': class:rs-colors:generic-hsl-color,    *note 'hsl-color-object': class:rs-colors:hsl-color-object,    *note 'generic-color-object': class:rs-colors:generic-color-object,    *note 'color-object': class:rs-colors:color-object,    ...

 -- Function: make-generic-hsl-color hue saturation lightness
     Create a new color in the generic HSL color space.

        * First argument HUE is the angle of the RGB color wheel in
          degree.

        * Second argument SATURATION is the saturation.

        * Third argument LIGHTNESS is the lightness.

     Argument HUE has to be a real number.  It's value is reduced to the
     half-closed interval [0, 360).  Arguments SATURATION and LIGHTNESS
     have to be real numbers in the closed interval [0, 1].

 -- Generic Function: generic-hsl-color-coordinates color
     Return the generic HSL color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the hue, saturation, and lightness.


File: rs-colors.info,  Node: Generic CMY Color Space,  Next: Generic CMYK Color Space,  Prev: Generic HSL Color Space,  Up: Generic Color Spaces (Color Models)

4.3.4 Generic CMY Color Space
-----------------------------

The generic CMY color space is a mathematical description of the CMY
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
and yellow primary.  Values are real numbers in the closed
interval [0, 1].  There is no white point.

 -- Class: generic-cmy-color
     Color class for the generic CMY color space.

     *Class Precedence List*
     *note 'generic-cmy-color': class:rs-colors:generic-cmy-color,    *note 'cmy-color-object': class:rs-colors:cmy-color-object,    *note 'generic-color-object': class:rs-colors:generic-color-object,    *note 'color-object': class:rs-colors:color-object,    ...

 -- Function: make-generic-cmy-color cyan magenta yellow &key byte-size
     Create a new color in the generic CMY color space.

        * First argument CYAN is the normalized intensity of the cyan
          primary.

        * Second argument MAGENTA is the normalized intensity of the
          magenta primary.

        * Third argument YELLOW is the normalized intensity of the
          yellow primary.

     Arguments CYAN, MAGENTA, and YELLOW have to be real numbers in the
     closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments CYAN, MAGENTA, and YELLOW have
     to be integral numbers in the range from 0 to 2^n - 1 where n is
     the number of bits.  If so, arguments CYAN, MAGENTA, and YELLOW are
     scaled accordingly.

     Example:

          (make-generic-cmy-color 3/255 80/255 193/255)
           => #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

          (make-generic-cmy-color 3 80 193 :byte-size 8)
           => #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

 -- Function: make-generic-cmy-color-from-number value &key byte-size
     Create a new color in the generic CMY color space.

        * Argument VALUE is the numerical value of the encoded CMY color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the cyan primary.

     Example:

          (make-generic-cmy-color-from-number #X0350C1)
           => #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

 -- Generic Function: generic-cmy-color-coordinates color
     Return the generic CMY color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the cyan, magenta, and
     yellow primary.


File: rs-colors.info,  Node: Generic CMYK Color Space,  Prev: Generic CMY Color Space,  Up: Generic Color Spaces (Color Models)

4.3.5 Generic CMYK Color Space
------------------------------

The generic CMYK color space is a mathematical description of the CMYK
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
yellow, and black (key) primary.  Values are real numbers in the closed
interval [0, 1].  There is no white point.

 -- Class: generic-cmyk-color
     Color class for the generic CMYK color space.

     *Class Precedence List*
     *note 'generic-cmyk-color': class:rs-colors:generic-cmyk-color,    *note 'cmyk-color-object': class:rs-colors:cmyk-color-object,    *note 'generic-color-object': class:rs-colors:generic-color-object,    *note 'color-object': class:rs-colors:color-object,    ...

 -- Function: make-generic-cmyk-color cyan magenta yellow black &key byte-size
     Create a new color in the generic CMYK color space.

        * First argument CYAN is the normalized intensity of the cyan
          primary.

        * Second argument MAGENTA is the normalized intensity of the
          magenta primary.

        * Third argument YELLOW is the normalized intensity of the
          yellow primary.

        * Fourth argument BLACK is the normalized intensity of the black
          primary.

     Arguments CYAN, MAGENTA, YELLOW, and BLACK have to be real numbers
     in the closed interval [0, 1].  If BLACK is zero, CYAN, MAGENTA,
     and YELLOW are converted from CMY color coordinates to CMYK color
     coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments CYAN, MAGENTA, YELLOW, and
     BLACK have to be integral numbers in the range from 0 to 2^n - 1
     where n is the number of bits.  If so, arguments CYAN, MAGENTA,
     YELLOW, and BLACK are scaled accordingly.

     Example:

          (make-generic-cmyk-color 3/255 80/255 193/255 0)
           => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

          (make-generic-cmyk-color 3 80 193 :byte-size 8)
           => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

 -- Function: make-generic-cmyk-color-from-number value &key byte-size
     Create a new color in the generic CMYK color space.

        * Argument VALUE is the numerical value of the encoded CMYK
          color coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{4n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the cyan primary.

     Example:

          (make-generic-cmyk-color-from-number #X0350C100)
           => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

 -- Generic Function: generic-cmyk-color-coordinates color
     Return the generic CMYK color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the cyan, magenta, yellow,
     and black primary.


File: rs-colors.info,  Node: CIE Color Spaces,  Next: RGB Color Spaces,  Prev: Generic Color Spaces (Color Models),  Up: Reference Manual

4.4 CIE Color Spaces
====================

All CIE color spaces are absolute color spaces, that means they are
device independent.

* Menu:

* CIE RGB Color Space::
* CIE XYZ Color Space::
* CIE xyY Color Space::
* CIE L*u*v* Color Space::
* CIE L*a*b* Color Space::


File: rs-colors.info,  Node: CIE RGB Color Space,  Next: CIE XYZ Color Space,  Prev: CIE Color Spaces,  Up: CIE Color Spaces

4.4.1 CIE RGB Color Space
-------------------------

The CIE RGB color space is the origin of all CIE color spaces.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed interval [0, 1].
The white point of the CIE RGB color space is the CIE standard
illuminant E(1).

 -- Class: cie-rgb-color
     Color class for the CIE RGB color space.

     *Class Precedence List*
     *note 'cie-rgb-color': class:rs-colors:cie-rgb-color, *note
     'rgb-color-object': class:rs-colors:rgb-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Function: make-cie-rgb-color red green blue
     Create a new color in the CIE RGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be real numbers in the
     closed interval [0, 1].

 -- Generic Function: cie-rgb-color-coordinates color
     Return the CIE RGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.

   ---------- Footnotes ----------

   (1) You can easily check this if you convert CIE RGB white into the
CIE xyY color space:

     (change-class (make-cie-rgb-color 1 1 1) 'cie-xyy-color)
      => #<CIE-XYY-COLOR (1/3 1/3 1)>


File: rs-colors.info,  Node: CIE XYZ Color Space,  Next: CIE xyY Color Space,  Prev: CIE RGB Color Space,  Up: CIE Color Spaces

4.4.2 CIE XYZ Color Space
-------------------------

The CIE XYZ color space is a linear transformation of the CIE RGB color
space.  The CIE XYZ color space covers all colors an average person can
experience.  Many other color spaces are defined against the CIE XYZ
color space.

Color coordinates are the X, Y, and Z tristimulus values.  The CIE XYZ
color space has no explicit white point.

 -- Class: cie-xyz-color
     Color class for the CIE XYZ color space.

     *Class Precedence List*
     *note 'cie-xyz-color': class:rs-colors:cie-xyz-color, *note
     'color-object': class:rs-colors:color-object, ...

 -- Function: make-cie-xyz-color x y z
     Create a new color in the CIE XYZ color space.

        * First argument X is the X tristimulus value.

        * Second argument Y is the Y tristimulus value.

        * Third argument Z is the Z tristimulus value.

     Arguments X, Y, and Z have to be non-negative real numbers.

 -- Generic Function: cie-xyz-color-coordinates color
     Return the CIE XYZ color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the X, Y, and Z tristimulus values.

Objects of the *note 'cie-xyz-color': class:rs-colors:cie-xyz-color.
class can be instantiated with absolute and normalized color
coordinates.  However, if you want to convert colors from CIE XYZ color
space to CIE RGB color space (or any other RGB color space), the CIE XYZ
color coordinates have to be normalized color coordinates.  See the
*note 'normalize-color': generic-function:rs-colors:normalize-color. and
*note 'absolute-color': generic-function:rs-colors:absolute-color, for
how to convert from absolute color coordinates to normalized color
coordinates and vice versa.


File: rs-colors.info,  Node: CIE xyY Color Space,  Next: CIE L*u*v* Color Space,  Prev: CIE XYZ Color Space,  Up: CIE Color Spaces

4.4.3 CIE xyY Color Space
-------------------------

The CIE xyY color space uses the x and y chromaticity coordinates of the
CIE XYZ color space.  That is,

     x = X / (X + Y + Z)
     y = Y / (X + Y + Z)
     z = Z / (X + Y + Z)

Simple arithmetic results in the following relations:

     Y/y = X + Y + Z
       1 = x + y + z

Therefore, the inverse transformation is

     X = x Y/y
     Y = y Y/y = Y
     Z = z Y/y = (1 - x - y) Y/y

 -- Class: cie-xyy-color
     Color class for the CIE xyY color space.

     *Class Precedence List*
     *note 'cie-xyy-color': class:rs-colors:cie-xyy-color, *note
     'color-object': class:rs-colors:color-object, ...

 -- Function: make-cie-xyy-color x* y* y
     Create a new color in the CIE xyY color space.

        * Arguments X* and Y* are the x and y chromaticity coordinates
          of the CIE XYZ color space.

        * Third argument Y is the luminance, that is the Y tristimulus
          value of the CIE XYZ color space.

 -- Generic Function: cie-xyy-color-coordinates color
     Return the CIE xyY color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the x and y chromaticity coordinates and the luminance.


File: rs-colors.info,  Node: CIE L*u*v* Color Space,  Next: CIE L*a*b* Color Space,  Prev: CIE xyY Color Space,  Up: CIE Color Spaces

4.4.4 CIE L*u*v* Color Space
----------------------------

The CIE L*u*v* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*u*v* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness L* is in the range from 0 to 100.  However, values greater
than 100 are accepted, too.  The two chromaticity coordinates U* and V^*
are usually in the range from -100 to +100.  CIE L*u*v* color
coordinates are always relative to a white point.  This is either the
white point of the color space you are converting from or CIE standard
illuminant D50.

 -- Class: cie-luv-color
     Color class for the CIE L*u*v* color space.

     *Class Precedence List*
     *note 'cie-luv-color': class:rs-colors:cie-luv-color, *note
     'color-object': class:rs-colors:color-object, ...

 -- Function: make-cie-luv-color L* u* v* &optional white-point
     Create a new color in the CIE L*u*v* color space.

        * First argument L* is the lightness.

        * Second argument U* is the first chromaticity coordinate.

        * Third argument V* is the second chromaticity coordinate.

 -- Generic Function: cie-luv-color-coordinates color
     Return the CIE L*u*v* color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the lightness and the two chromaticity coordinates.


File: rs-colors.info,  Node: CIE L*a*b* Color Space,  Prev: CIE L*u*v* Color Space,  Up: CIE Color Spaces

4.4.5 CIE L*a*b* Color Space
----------------------------

The CIE L*a*b* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*a*b* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness L* is in the range from 0 to 100.  However, values greater
than 100 are accepted, too.  The two chromaticity coordinates A* and B*
are usually in the range from -250 to +250 and from -100 to +100
respectively.  CIE L*a*b* color coordinates are always relative to a
white point.  This is either the white point of the color space you are
converting from or CIE standard illuminant D50.

 -- Class: cie-lab-color
     Color class for the CIE L*a*b* color space.

     *Class Precedence List*
     *note 'cie-lab-color': class:rs-colors:cie-lab-color, *note
     'color-object': class:rs-colors:color-object, ...

 -- Function: make-cie-lab-color L* a* b* &optional white-point
     Create a new color in the CIE L*a*b* color space.

        * First argument L* is the lightness.

        * Second argument A* is the first chromaticity coordinate.

        * Third argument B* is the second chromaticity coordinate.

 -- Generic Function: cie-lab-color-coordinates color
     Return the CIE L*a*b* color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the lightness and the two chromaticity coordinates.


File: rs-colors.info,  Node: RGB Color Spaces,  Next: Color Properties,  Prev: CIE Color Spaces,  Up: Reference Manual

4.5 RGB Color Spaces
====================

* Menu:

* sRGB Color Space::
* Adobe RGB Color Space::


File: rs-colors.info,  Node: sRGB Color Space,  Next: Adobe RGB Color Space,  Prev: RGB Color Spaces,  Up: RGB Color Spaces

4.5.1 sRGB Color Space
----------------------

 -- Class: srgb-color
     Color class for the sRGB color space.

     *Class Precedence List*
     *note 'srgb-color': class:rs-colors:srgb-color, *note
     'rgb-color-object': class:rs-colors:rgb-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Function: make-srgb-color red green blue &key byte-size
     Create a new color in the sRGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be normalized intensity
     values in the closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-srgb-color 252/255 175/255 62/255)
           => #<SRGB-COLOR (84/85 35/51 62/255)>

          (make-srgb-color 252 175 62 :byte-size 8)
           => #<SRGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-srgb-color-from-number value &key byte-size
     Create a new color in the sRGB color space.

        * Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-srgb-color-from-number #XFCAF3E)
           => #<SRGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: srgb-color-coordinates color
     Return the sRGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Adobe RGB Color Space,  Prev: sRGB Color Space,  Up: RGB Color Spaces

4.5.2 Adobe RGB Color Space
---------------------------

 -- Class: adobe-rgb-color
     Color class for the Adobe RGB color space.

     *Class Precedence List*
     *note 'adobe-rgb-color': class:rs-colors:adobe-rgb-color, *note
     'rgb-color-object': class:rs-colors:rgb-color-object, *note
     'color-object': class:rs-colors:color-object, ...

 -- Function: make-adobe-rgb-color red green blue &key byte-size
     Create a new color in the Adobe RGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be normalized intensity
     values in the closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-adobe-rgb-color 252/255 175/255 62/255)
           => #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

          (make-adobe-rgb-color 252 175 62 :byte-size 8)
           => #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-adobe-rgb-color-from-number value &key byte-size
     Create a new color in the Adobe RGB color space.

        * Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-adobe-rgb-color-from-number #XFCAF3E)
           => #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: adobe-rgb-color-coordinates color
     Return the Adobe RGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Color Properties,  Next: Color Conversions,  Prev: RGB Color Spaces,  Up: Reference Manual

4.6 Color Properties
====================

 -- Generic Function: color-coordinates color
     Return the color space coordinates of the color.

        * Argument COLOR is a color object.

 -- Generic Function: white-point color
     Return the white point of the color.

        * Argument COLOR is a color object.

     Value is the color object of the color's white point, or nil if the
     white point is not defined or if multiple white points exist.


File: rs-colors.info,  Node: Color Conversions,  Next: Input and Output,  Prev: Color Properties,  Up: Reference Manual

4.7 Color Conversions
=====================

 -- Generic Function: change-class color color-type
     Change the class of the color object.

        * First argument COLOR is a color object.

        * Second argument COLOR-TYPE is a color data type.

     The 'change-class' function destructively modifies COLOR by
     converting it's color coordinates into the color space denoted by
     COLOR-TYPE.

     Example:

          (let ((red (make-srgb-color 1 0 0)))
            (change-class red 'cie-xyy-color)
            red)
           => #<CIE-XYY-COLOR (0.64d0 0.33d0 ...)>

 -- Function: coerce-color color color-type
     Coerce the color object into the specified color type.

        * First argument COLOR is a color object.

        * Second argument COLOR-TYPE is a color data type.

     If argument COLOR is already a color of the requested color data
     type, return COLOR as is (no conversion).  Otherwise, return a new
     color with the color coordinates of COLOR converted into the color
     space denoted by COLOR-TYPE.

 -- Generic Function: copy-color color
     Return a shallow copy of the color.

        * Argument COLOR is a color object.

     Value is a color object with the same color coordinates as COLOR.


File: rs-colors.info,  Node: Input and Output,  Next: Miscellaneous,  Prev: Color Conversions,  Up: Reference Manual

4.8 Input and Output
====================

* Menu:

* Reading Colors::
* Printing Colors::


File: rs-colors.info,  Node: Reading Colors,  Next: Printing Colors,  Prev: Input and Output,  Up: Input and Output

4.8.1 Reading Colors
--------------------

 -- Function: read-color-html &optional stream
     Read a numerical HTML color definition, that is a hexadecimal
     number prefixed by a hash mark.

        * Optional argument STREAM is an input stream.  Default is to
          read from '*standard-input*'.

     Reading stops at the first non-hexadecimal digit character.  The
     number of hexadecimal digits has to be a multiple of three.

     Value is a color object in the sRGB color space.

     Example:

          (with-input-from-string (stream "#4E9A06 junk")
            (read-color-html stream))
           => #<SRGB-COLOR (26/85 154/255 2/85)>


File: rs-colors.info,  Node: Printing Colors,  Prev: Reading Colors,  Up: Input and Output

4.8.2 Printing Colors
---------------------

 -- Function: print-color-html color &optional stream
     Print a numerical HTML color definition, that is a hexadecimal
     number prefixed by a hash mark.

        * First argument COLOR is a color object.

        * Optional second argument STREAM is an output stream.  Default
          is to print to '*standard-output*'.

     Value is the color object.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (with-output-to-string (stream)
              (print-color-html color stream)))
           => "#4E9A06"

 -- Constant: color-formatter-html
     A format function for printing a numerical HTML color definition.

     Value is a function which has a behavior equivalent to a function
     returned by the 'formatter' macro.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (format nil color-formatter-html color))
           => "#4E9A06"


File: rs-colors.info,  Node: Miscellaneous,  Prev: Input and Output,  Up: Reference Manual

4.9 Miscellaneous
=================

 -- Generic Function: normalize-color color &key black white
     Convert from absolute color coordinates to normalized color
     coordinates.

 -- Generic Function: absolute-color color &key black white
     Convert from normalized color coordinates to absolute color
     coordinates.


File: rs-colors.info,  Node: Symbol Index,  Next: Concept Index,  Prev: Reference Manual,  Up: Top

Symbol Index
************

 [index ]
* Menu:

* absolute-color:                        Miscellaneous.        (line 10)
* adobe-rgb-color:                       Adobe RGB Color Space.
                                                               (line  6)
* adobe-rgb-color-coordinates:           Adobe RGB Color Space.
                                                               (line 63)
* change-class:                          Color Conversions.    (line  6)
* cie-lab-color:                         CIE L*a*b* Color Space.
                                                               (line 20)
* cie-lab-color-coordinates:             CIE L*a*b* Color Space.
                                                               (line 36)
* cie-luv-color:                         CIE L*u*v* Color Space.
                                                               (line 20)
* cie-luv-color-coordinates:             CIE L*u*v* Color Space.
                                                               (line 36)
* cie-rgb-color:                         CIE RGB Color Space.  (line 15)
* cie-rgb-color-coordinates:             CIE RGB Color Space.  (line 39)
* cie-xyy-color:                         CIE xyY Color Space.  (line 24)
* cie-xyy-color-coordinates:             CIE xyY Color Space.  (line 40)
* cie-xyz-color:                         CIE XYZ Color Space.  (line 14)
* cie-xyz-color-coordinates:             CIE XYZ Color Space.  (line 32)
* cmy-color-object:                      Abstract Color Classes.
                                                               (line 49)
* cmyk-color-object:                     Abstract Color Classes.
                                                               (line 60)
* coerce-color:                          Color Conversions.    (line 24)
* color-coordinates:                     Color Properties.     (line  6)
* color-formatter-html:                  Printing Colors.      (line 24)
* color-object:                          Abstract Color Classes.
                                                               (line  9)
* colorp:                                Color Predicates.     (line  9)
* copy-color:                            Color Conversions.    (line 36)
* generic-cmy-color:                     Generic CMY Color Space.
                                                               (line 13)
* generic-cmy-color-coordinates:         Generic CMY Color Space.
                                                               (line 68)
* generic-cmyk-color:                    Generic CMYK Color Space.
                                                               (line 14)
* generic-cmyk-color-coordinates:        Generic CMYK Color Space.
                                                               (line 73)
* generic-color-object:                  Abstract Color Classes.
                                                               (line 71)
* generic-hsl-color:                     Generic HSL Color Space.
                                                               (line 17)
* generic-hsl-color-coordinates:         Generic HSL Color Space.
                                                               (line 39)
* generic-hsv-color:                     Generic HSV Color Space.
                                                               (line 16)
* generic-hsv-color-coordinates:         Generic HSV Color Space.
                                                               (line 38)
* generic-rgb-color:                     Generic RGB Color Space.
                                                               (line 14)
* generic-rgb-color-coordinates:         Generic RGB Color Space.
                                                               (line 69)
* hsl-color-object:                      Abstract Color Classes.
                                                               (line 38)
* hsv-color-object:                      Abstract Color Classes.
                                                               (line 27)
* make-adobe-rgb-color:                  Adobe RGB Color Space.
                                                               (line 14)
* make-adobe-rgb-color-from-number:      Adobe RGB Color Space.
                                                               (line 45)
* make-cie-lab-color:                    CIE L*a*b* Color Space.
                                                               (line 27)
* make-cie-luv-color:                    CIE L*u*v* Color Space.
                                                               (line 27)
* make-cie-rgb-color:                    CIE RGB Color Space.  (line 23)
* make-cie-xyy-color:                    CIE xyY Color Space.  (line 31)
* make-cie-xyz-color:                    CIE XYZ Color Space.  (line 21)
* make-generic-cmy-color:                Generic CMY Color Space.
                                                               (line 19)
* make-generic-cmy-color-from-number:    Generic CMY Color Space.
                                                               (line 50)
* make-generic-cmyk-color:               Generic CMYK Color Space.
                                                               (line 20)
* make-generic-cmyk-color-from-number:   Generic CMYK Color Space.
                                                               (line 55)
* make-generic-hsl-color:                Generic HSL Color Space.
                                                               (line 23)
* make-generic-hsv-color:                Generic HSV Color Space.
                                                               (line 22)
* make-generic-rgb-color:                Generic RGB Color Space.
                                                               (line 20)
* make-generic-rgb-color-from-number:    Generic RGB Color Space.
                                                               (line 51)
* make-srgb-color:                       sRGB Color Space.     (line 14)
* make-srgb-color-from-number:           sRGB Color Space.     (line 44)
* normalize-color:                       Miscellaneous.        (line  6)
* print-color-html:                      Printing Colors.      (line  6)
* read-color-html:                       Reading Colors.       (line  6)
* rgb-color-object:                      Abstract Color Classes.
                                                               (line 16)
* srgb-color:                            sRGB Color Space.     (line  6)
* srgb-color-coordinates:                sRGB Color Space.     (line 62)
* white-point:                           Color Properties.     (line 11)


File: rs-colors.info,  Node: Concept Index,  Prev: Symbol Index,  Up: Top

Concept Index
*************



Tag Table:
Node: Top646
Node: Introduction1306
Node: User's Guide2841
Node: The Color Data Type3095
Node: Creating Color Objects5145
Node: Color Coordinates8387
Node: White Point9021
Node: Color Conversion9355
Ref: figure:color-conversion9486
Node: Programmer's Guide11619
Node: Reference Manual13878
Node: Color Predicates14246
Ref: function:rs-colors:colorp14547
Node: Abstract Color Classes14622
Ref: class:rs-colors:color-object14903
Ref: class:rs-colors:rgb-color-object15073
Ref: class:rs-colors:hsv-color-object15456
Ref: class:rs-colors:hsl-color-object15894
Ref: class:rs-colors:cmy-color-object16323
Ref: class:rs-colors:cmyk-color-object16711
Ref: class:rs-colors:generic-color-object17116
Node: Generic Color Spaces (Color Models)17375
Node: Generic RGB Color Space17904
Ref: class:rs-colors:generic-rgb-color18438
Ref: function:rs-colors:make-generic-rgb-color18811
Ref: function:rs-colors:make-generic-rgb-color-from-number19852
Ref: generic-function:rs-colors:generic-rgb-color-coordinates20532
Node: Generic HSV Color Space20788
Ref: class:rs-colors:generic-hsv-color21432
Ref: function:rs-colors:make-generic-hsv-color21805
Ref: generic-function:rs-colors:generic-hsv-color-coordinates22317
Node: Generic HSL Color Space22549
Ref: class:rs-colors:generic-hsl-color23135
Ref: function:rs-colors:make-generic-hsl-color23508
Ref: generic-function:rs-colors:generic-hsl-color-coordinates24031
Node: Generic CMY Color Space24254
Ref: class:rs-colors:generic-cmy-color24783
Ref: function:rs-colors:make-generic-cmy-color25156
Ref: function:rs-colors:make-generic-cmy-color-from-number26223
Ref: generic-function:rs-colors:generic-cmy-color-coordinates26904
Node: Generic CMYK Color Space27165
Ref: class:rs-colors:generic-cmyk-color27679
Ref: function:rs-colors:make-generic-cmyk-color28058
Ref: function:rs-colors:make-generic-cmyk-color-from-number29378
Ref: generic-function:rs-colors:generic-cmyk-color-coordinates30067
Node: CIE Color Spaces30337
Node: CIE RGB Color Space30746
Ref: class:rs-colors:cie-rgb-color31214
Ref: function:rs-colors:make-cie-rgb-color31501
Ref: generic-function:rs-colors:cie-rgb-color-coordinates31970
Ref: CIE RGB Color Space-Footnote-132254
Node: CIE XYZ Color Space32448
Ref: class:rs-colors:cie-xyz-color32972
Ref: function:rs-colors:make-cie-xyz-color33194
Ref: generic-function:rs-colors:cie-xyz-color-coordinates33521
Node: CIE xyY Color Space34319
Ref: class:rs-colors:cie-xyy-color34895
Ref: function:rs-colors:make-cie-xyy-color35117
Ref: generic-function:rs-colors:cie-xyy-color-coordinates35437
Node: CIE L*u*v* Color Space35672
Ref: class:rs-colors:cie-luv-color36470
Ref: function:rs-colors:make-cie-luv-color36695
Ref: generic-function:rs-colors:cie-luv-color-coordinates36998
Node: CIE L*a*b* Color Space37232
Ref: class:rs-colors:cie-lab-color38036
Ref: function:rs-colors:make-cie-lab-color38261
Ref: generic-function:rs-colors:cie-lab-color-coordinates38564
Node: RGB Color Spaces38798
Node: sRGB Color Space39020
Ref: class:rs-colors:srgb-color39194
Ref: function:rs-colors:make-srgb-color39469
Ref: function:rs-colors:make-srgb-color-from-number40483
Ref: generic-function:rs-colors:srgb-color-coordinates41135
Node: Adobe RGB Color Space41377
Ref: class:rs-colors:adobe-rgb-color41536
Ref: function:rs-colors:make-adobe-rgb-color41831
Ref: function:rs-colors:make-adobe-rgb-color-from-number42875
Ref: generic-function:rs-colors:adobe-rgb-color-coordinates43547
Node: Color Properties43799
Ref: generic-function:rs-colors:color-coordinates43965
Ref: generic-function:rs-colors:white-point44111
Node: Color Conversions44380
Ref: generic-function:common-lisp:change-class44548
Ref: function:rs-colors:coerce-color45086
Ref: generic-function:rs-colors:copy-color45551
Node: Input and Output45749
Node: Reading Colors45961
Ref: function:rs-colors:read-color-html46123
Node: Printing Colors46738
Ref: function:rs-colors:print-color-html46877
Ref: constant:rs-colors:color-formatter-html47436
Node: Miscellaneous47812
Ref: generic-function:rs-colors:normalize-color47943
Ref: generic-function:rs-colors:absolute-color48088
Node: Symbol Index48232
Node: Concept Index54983

End Tag Table
