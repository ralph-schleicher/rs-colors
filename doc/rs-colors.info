This is rs-colors.info, produced by makeinfo version 6.7 from
rs-colors.texi.

This is edition 1 (draft), last updated 2019-03-14, of 'RS-COLORS - A
Color Data Type for Common Lisp', for RS-COLORS version 20200124.1824.

     Copyright (C) 2014 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.
INFO-DIR-SECTION Libraries
START-INFO-DIR-ENTRY
* rs-colors: (rs-colors).       A color data type for Common Lisp.
END-INFO-DIR-ENTRY


File: rs-colors.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

RS-COLORS
*********

This is edition 1 (draft), last updated 2019-03-14, of 'RS-COLORS - A
Color Data Type for Common Lisp', for RS-COLORS version 20200124.1824.

     Copyright (C) 2014 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.

* Menu:

* Introduction::
* Installation::
* User's Guide::
* Reference Manual::
* Symbol Index::
* Concept Index::

References
**********

[sRGB]
     <http://www.w3.org/Graphics/Color/sRGB.html>
     <http://www.color.org/chardata/rgb/srgb.xalter>

[Adobe RGB]
     Adobe RGB (1998) Color Image Encoding, Version 2005-05
     <http://www.color.org/chardata/rgb/adobergb.xalter>

[Xcms]
     Valerie Quercia, Tim O'Reilly: X Window System User's Guide, for
     X11 Release 5

[HTML]
     <http://www.w3.org/TR/1999/REC-html401-19991224>

[CSS3]
     <https://www.w3.org/TR/css-color-3>


File: rs-colors.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

A color is either associated with a color model or a color space.  Two
color models are in widespread use with computers:

   * The additive RGB color model with the primary colors red, green,
     and blue.

   * The subtractive CMY color model with the primary colors cyan,
     magenta, and yellow.

The RGB color model is the usual color model for computer displays.  If
the color intensity of all primary colors is zero, that means "off", the
display appears "black".  Otherwise, if the color intensity of all
primary colors is one, that means "on", the display appears "white".

The CMY color model is the usual color model for paper printers.  If the
color intensity of all primary colors is zero, that means "off", the
paper appears "white".  Otherwise, if the color intensity of all primary
colors is one, that means "on", the paper appears "black".

Theoretically, a RGB tuple (R, G, B) and a CMY tuple (C, M, Y) are
related to each other via the simple equations

     C = 1 - R
     M = 1 - G
     Y = 1 - B

The CMYK color model is an extension of the CMY color model to save ink.
Theoretically, a CMY tuple (C, M, Y) and a CMYK quadruple (c, m, y, k)
can be related to each other via the equations

     k = min(C, M, Y)
     c = (C - k) / (1 - k)
     m = (M - k) / (1 - k)
     y = (Y - k) / (1 - k)

and

     C = min(1, c (1 - k) + k)
     M = min(1, m (1 - k) + k)
     Y = min(1, y (1 - k) + k)


File: rs-colors.info,  Node: Installation,  Next: User's Guide,  Prev: Introduction,  Up: Top

2 Installation
**************

These installation instructions assume that you have a working Quicklisp
(https://www.quicklisp.org) installation.

To install RS-COLORS, download the source code from GitHub
(https://github.com/ralph-schleicher/rs-colors.git).  I recommend
cloning the RS-COLORS Git repository into the 'local-projects' folder of
your Quicklisp installation.  You can do so by evaluating the following
form.

     (let ((repo "https://github.com/ralph-schleicher/rs-colors.git")
           (out (merge-pathnames (make-pathname :directory '(:relative
                                                             "local-projects"
                                                             "rs-colors"))
                                 ql:*quicklisp-home*)))
       (uiop:run-program (list "git" "clone" "-q" repo (namestring out))))

After that, you can load RS-COLORS as usual.

     (ql:quickload :rs-colors)
     (use-package :rs-colors)

That's it.


File: rs-colors.info,  Node: User's Guide,  Next: Reference Manual,  Prev: Installation,  Up: Top

3 User's Guide
**************

* Menu:

* The Color Data Type::
* Creating Color Objects::
* Color Coordinates::
* White Point::
* Color Conversion::
* Color Dictionaries::


File: rs-colors.info,  Node: The Color Data Type,  Next: Creating Color Objects,  Prev: User's Guide,  Up: User's Guide

3.1 The Color Data Type
=======================

First of all, there is not _one_ color data type.  Instead, every color
is an instance of a particular color class.  All color classes are
sub-classes of the abstract 'color-object' class.  The built-in color
classes are listed in the following tables.

Color Classes for Color Models
==============================

'generic-rgb-color'
     Mathematical description of the RGB color model.

'generic-hsv-color'
     Mathematical description of the HSV color space.  The HSV color
     space is a different representation of the RGB color model.

'generic-hsl-color'
     Mathematical description of the HSL color space.  The HSL color
     space is a different representation of the RGB color model.

'generic-cmy-color'
     Mathematical description of the CMY color model.

'generic-cmyk-color'
     Mathematical description of the CMYK color model.

Color Classes for Absolute Color Spaces
=======================================

'ciergb-color'
     The CIE RGB color space.

'ciexyz-color'
     The CIE XYZ color space.

'ciexyy-color'
     The CIE xyY color space.

'cieluv-color'
     The CIE L*u*v* color space.

'cielab-color'
     The CIE L*a*b* color space.

'cielch-color'
     The CIE L*C*h color space.

Color Classes for Device Dependent Color Spaces
===============================================

'srgb-color'
     The sRGB color space.

'adobe-rgb-color'
     The Adobe RGB color space.


File: rs-colors.info,  Node: Creating Color Objects,  Next: Color Coordinates,  Prev: The Color Data Type,  Up: User's Guide

3.2 Creating Color Objects
==========================

Colors are instantiated by calling a constructor function.  Constructor
arguments are usually the color coordinates in the respective color
space.  To create, for example, a color in the sRGB color space, say

     (make-srgb-color 252/255 175/255 62/255)
      => #<SRGB-COLOR (84/85 35/51 62/255)>

Many color coordinates have to be expressed as intensity values, that is
values in the range from zero to one inclusive.  That's the reason why
the sRGB color coordinates in the above example are specified as
rational numbers.

Some constructors accept a ':byte-size' keyword argument.  This is
useful if the scale factor is equal for all color coordinates.  With
that we can rewrite the above example as

     (make-srgb-color 252 175 62 :byte-size 8)
      => #<SRGB-COLOR (84/85 35/51 62/255)>

As you can see, the resulting color coordinates are equal.  Another
common case is to encode the color coordinates in a single integral
number.  Again, the ':byte-size' keyword argument specifies how many
bits are used to encode a single color coordinate.  Thus,

     (make-srgb-color-from-number #XFCAF3E :byte-size 8)
      => #<SRGB-COLOR (84/85 35/51 62/255)>

results in the same color as before.

The built-in constructors are listed in the following table.

'make-generic-rgb-color'
'make-generic-rgb-color-from-number'
     Create a generic RGB color object.

'make-generic-hsv-color'
     Create a generic HSV color object.

'make-generic-hsl-color'
     Create a generic HSL color object.

'make-generic-cmy-color'
'make-generic-cmy-color-from-number'
     Create a generic CMY color object.

'make-generic-cmyk-color'
'make-generic-cmyk-color-from-number'
     Create a generic CMYK color object.

'make-ciergb-color'
     Create a CIE RGB color object.

'make-ciexyz-color'
     Create a CIE XYZ color object.

'make-ciexyy-color'
     Create a CIE xyY color object.

'make-cieluv-color'
     Create a CIE L*u*v* color object.

'make-cielab-color'
     Create a CIE L*a*b* color object.

'make-cielch-color'
     Create a CIE L*C*h color object.

'make-srgb-color'
'make-srgb-color-from-number'
     Create a sRGB color object.

'make-adobe-rgb-color'
'make-adobe-rgb-color-from-number'
     Create an Adobe RGB color object.


File: rs-colors.info,  Node: Color Coordinates,  Next: White Point,  Prev: Creating Color Objects,  Up: User's Guide

3.3 Color Coordinates
=====================

Use the 'color-coordinates' function to get the color coordinates of a
color.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       ;; We know that COLOR is an RGB color.
       (multiple-value-bind (r g b)
           (color-coordinates color)
         (list r g b)))
      => (84/85 35/51 62/255)

A more practical way to get the color coordinates of a color is
described in *note Color Conversion::.


File: rs-colors.info,  Node: White Point,  Next: Color Conversion,  Prev: Color Coordinates,  Up: User's Guide

3.4 White Point
===============

A device dependent color space usually has a "white point".  If so, the
'white-point' function returns a color object of this white point.


File: rs-colors.info,  Node: Color Conversion,  Next: Color Dictionaries,  Prev: White Point,  Up: User's Guide

3.5 Color Conversion
====================

 [image src="rs-colors-conversion.png" ]

Figure 3.1

*note Figure 3.1: figure:rs-colors-conversion. depicts the implemented
color conversions.  The nice thing about RS-COLORS is that all these
color conversions can be performed with the 'change-class' function.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       (values (change-class color 'generic-cmyk-color) color))
      => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
      => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

If you wish to keep the original color object unchanged, use the
'coerce-color' function.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       (values (coerce-color color 'generic-cmyk-color) color))
      => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
      => #<SRGB-COLOR (84/85 35/51 62/255)>

The 'coerce-color' function only creates a copy of the color if the
color object is not already of the correct type.

If you only need the color coordinates, you can call one of the
following functions to get them.

'generic-rgb-color-coordinates'
'generic-hsv-color-coordinates'
'generic-hsl-color-coordinates'
'generic-cmy-color-coordinates'
'generic-cmyk-color-coordinates'

'ciergb-color-coordinates'
'ciexyz-color-coordinates'
'ciexyy-color-coordinates'
'cieluv-color-coordinates'
'cielab-color-coordinates'
'cielch-color-coordinates'

'srgb-color-coordinates'
'adobe-rgb-color-coordinates'


File: rs-colors.info,  Node: Color Dictionaries,  Prev: Color Conversion,  Up: User's Guide

3.6 Color Dictionaries
======================

The RS-COLORS software distribution provides several packages with
predefined named colors.  The recommended way to use these packages is
to load it, for example, with QuickLisp.  Then you should refer to the
named colors via the package prefix to avoid name clashes.

     ;; Load a color dictionary.
     (ql:quickload :rs-colors-html)

     ;; Use a named color.
     (format nil color-formatter-css3-rgb html-color:green)
      => "rgb(0, 128, 0)"

Below is a list of all package prefixes together with their meaning.

'rs-colors-x11', 'x11-color'
     X11 color names, '(ql:quickload :rs-colors-x11)'.
     See <https://en.wikipedia.org/wiki/X11_color_names>.

'rs-colors-html', 'html-color'
     HTML basic colors, '(ql:quickload :rs-colors-html)'.
     See <https://www.w3.org/TR/css3-color/#html4>.

'rs-colors-svg', 'svg-color'
     SVG color names, '(ql:quickload :rs-colors-svg)'.
     See <https://www.w3.org/TR/css3-color/#svg-color>.

'rs-colors-ral', 'ral-color'
     RAL Classic color names, '(ql:quickload :rs-colors-ral)'.
     See <https://www.ral-farben.de>.

'rs-colors-ral-design', 'ral-design-color'
     RAL Design color names, '(ql:quickload :rs-colors-ral-design)'.
     See <https://www.ral-farben.de>.

'rs-colors-tango', 'tango-color'
     Tango desktop project colors, '(ql:quickload :rs-colors-tango)'.
     See <http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines>.

'rs-colors-material-io', 'material-io-color'
     Material design color palette,
     '(ql:quickload :rs-colors-material-io)'.
     See <https://material.io/guidelines/style/color.html>.


File: rs-colors.info,  Node: Reference Manual,  Next: Symbol Index,  Prev: User's Guide,  Up: Top

4 Reference Manual
******************

* Menu:

* Color Predicates::
* Abstract Color Classes::
* Generic Color Spaces (Color Models)::
* CIE Color Spaces::
* RGB Color Spaces::
* Color Properties::
* Color Conversions::
* Color Difference::
* Input and Output::
* Miscellaneous::


File: rs-colors.info,  Node: Color Predicates,  Next: Abstract Color Classes,  Prev: Reference Manual,  Up: Reference Manual

4.1 Color Predicates
====================

Use the 'colorp' function to check whether or not an object is a color.
This covers all color classes documented in this manual.

 -- Function: colorp object
     Return true if OBJECT is a color object.


File: rs-colors.info,  Node: Abstract Color Classes,  Next: Generic Color Spaces (Color Models),  Prev: Color Predicates,  Up: Reference Manual

4.2 Abstract Color Classes
==========================

The color classes documented in this section are merely used as
superclasses.

 -- Class: color-object
     Base class for a color.

     *Class Precedence List*
     'color-object', 'standard-object', 't'.

 -- Class: rgb-color-object
     Color class for a RGB color space.

     Color coordinates are the normalized intensities of the red, green,
     and blue primary.  Values are real numbers in the closed
     interval [0, 1].

     *Class Precedence List*
     'rgb-color-object', 'color-object', ...

 -- Class: hsv-color-object
     Color class for a HSV/HSB color space.

     Color coordinates are hue, saturation, and value (brightness).  Hue
     is a real number in the half-closed interval [0, 360).  Saturation
     and value are real numbers in the closed interval [0, 1].

     *Class Precedence List*
     'hsv-color-object', 'color-object', ...

 -- Class: hsl-color-object
     Color class for a HSL color space.

     Color coordinates are hue, saturation, and lightness.  Hue is a
     real number in the half-closed interval [0, 360).  Saturation and
     lightness are real numbers in the closed interval [0, 1].

     *Class Precedence List*
     'hsl-color-object', 'color-object', ...

 -- Class: cmy-color-object
     Color class for a CMY color space.

     Color coordinates are the normalized intensities of the cyan,
     magenta, and yellow primary.  Values are real numbers in the closed
     interval [0, 1].

     *Class Precedence List*
     'cmy-color-object', 'color-object', ...

 -- Class: cmyk-color-object
     Color class for a CMYK color space.

     Color coordinates are the normalized intensities of the cyan,
     magenta, yellow, and black (key) primary.  Values are real numbers
     in the closed interval [0, 1].

     *Class Precedence List*
     'cmyk-color-object', 'color-object', ...

 -- Class: generic-color-object
     Color class for the mathematical model of a color space.

     *Class Precedence List*
     'generic-color-object', 'color-object', ...


File: rs-colors.info,  Node: Generic Color Spaces (Color Models),  Next: CIE Color Spaces,  Prev: Abstract Color Classes,  Up: Reference Manual

4.3 Generic Color Spaces (Color Models)
=======================================

A generic color space implements a color model.  There are two major
color models: the additive RGB color model and the subtractive CMY color
model.

* Menu:

* Generic RGB Color Space::
* Generic HSV Color Space::
* Generic HSL Color Space::
* Generic CMY Color Space::
* Generic CMYK Color Space::


File: rs-colors.info,  Node: Generic RGB Color Space,  Next: Generic HSV Color Space,  Prev: Generic Color Spaces (Color Models),  Up: Generic Color Spaces (Color Models)

4.3.1 Generic RGB Color Space
-----------------------------

The generic RGB color space is a mathematical description of the RGB
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed interval [0, 1].
There is no white point.

 -- Class: generic-rgb-color
     Color class for the generic RGB color space.

     *Class Precedence List*
     'generic-rgb-color', 'rgb-color-object', 'generic-color-object',
     'color-object', ...

 -- Function: make-generic-rgb-color red green blue &key byte-size
     Create a new color in the generic RGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be real numbers in the
     closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-generic-rgb-color 252/255 175/255 62/255)
           => #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

          (make-generic-rgb-color 252 175 62 :byte-size 8)
           => #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-generic-rgb-color-from-number value &key byte-size
     Create a new color in the generic RGB color space.

        * Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-generic-rgb-color-from-number #XFCAF3E)
           => #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: generic-rgb-color-coordinates color
     Return the generic RGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Generic HSV Color Space,  Next: Generic HSL Color Space,  Prev: Generic RGB Color Space,  Up: Generic Color Spaces (Color Models)

4.3.2 Generic HSV Color Space
-----------------------------

The HSV color space is a different representation of the RGB color
model.  The HSV color space is also called HSB color space.  The generic
HSV color space is not associated with a particular device.

Color coordinates are hue, saturation, and value (brightness).  Hue is a
real number in the half-closed interval [0, 360).  Saturation and value
are real numbers in the closed interval [0, 1].  There is no white
point.

 -- Class: generic-hsv-color
     Color class for the generic HSV color space.

     *Class Precedence List*
     'generic-hsv-color', 'hsv-color-object', 'generic-color-object',
     'color-object', ...

 -- Function: make-generic-hsv-color hue saturation value
     Create a new color in the generic HSV color space.

        * First argument HUE is the angle of the RGB color wheel in
          degree.

        * Second argument SATURATION is the saturation.

        * Third argument VALUE is the brightness.

     Argument HUE has to be a real number.  It's value is reduced to the
     half-closed interval [0, 360).  Arguments SATURATION and VALUE have
     to be real numbers in the closed interval [0, 1].

 -- Generic Function: generic-hsv-color-coordinates color
     Return the generic HSV color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the hue, saturation, and value (brightness).


File: rs-colors.info,  Node: Generic HSL Color Space,  Next: Generic CMY Color Space,  Prev: Generic HSV Color Space,  Up: Generic Color Spaces (Color Models)

4.3.3 Generic HSL Color Space
-----------------------------

The HSL color space is a different representation of the RGB color
model.  The generic HSL color space is not associated with a particular
device.

Color coordinates are hue, saturation, and lightness.  Hue is a real
number in the half-closed interval [0, 360).  Saturation and lightness
are real numbers in the closed interval [0, 1].  There is no white
point.

 -- Class: generic-hsl-color
     Color class for the generic HSL color space.

     *Class Precedence List*
     'generic-hsl-color', 'hsl-color-object', 'generic-color-object',
     'color-object', ...

 -- Function: make-generic-hsl-color hue saturation lightness
     Create a new color in the generic HSL color space.

        * First argument HUE is the angle of the RGB color wheel in
          degree.

        * Second argument SATURATION is the saturation.

        * Third argument LIGHTNESS is the lightness.

     Argument HUE has to be a real number.  It's value is reduced to the
     half-closed interval [0, 360).  Arguments SATURATION and LIGHTNESS
     have to be real numbers in the closed interval [0, 1].

 -- Generic Function: generic-hsl-color-coordinates color
     Return the generic HSL color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the hue, saturation, and lightness.


File: rs-colors.info,  Node: Generic CMY Color Space,  Next: Generic CMYK Color Space,  Prev: Generic HSL Color Space,  Up: Generic Color Spaces (Color Models)

4.3.4 Generic CMY Color Space
-----------------------------

The generic CMY color space is a mathematical description of the CMY
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
and yellow primary.  Values are real numbers in the closed
interval [0, 1].  There is no white point.

 -- Class: generic-cmy-color
     Color class for the generic CMY color space.

     *Class Precedence List*
     'generic-cmy-color', 'cmy-color-object', 'generic-color-object',
     'color-object', ...

 -- Function: make-generic-cmy-color cyan magenta yellow &key byte-size
     Create a new color in the generic CMY color space.

        * First argument CYAN is the normalized intensity of the cyan
          primary.

        * Second argument MAGENTA is the normalized intensity of the
          magenta primary.

        * Third argument YELLOW is the normalized intensity of the
          yellow primary.

     Arguments CYAN, MAGENTA, and YELLOW have to be real numbers in the
     closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments CYAN, MAGENTA, and YELLOW have
     to be integral numbers in the range from 0 to 2^n - 1 where n is
     the number of bits.  If so, arguments CYAN, MAGENTA, and YELLOW are
     scaled accordingly.

     Example:

          (make-generic-cmy-color 3/255 80/255 193/255)
           => #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

          (make-generic-cmy-color 3 80 193 :byte-size 8)
           => #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

 -- Function: make-generic-cmy-color-from-number value &key byte-size
     Create a new color in the generic CMY color space.

        * Argument VALUE is the numerical value of the encoded CMY color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the cyan primary.

     Example:

          (make-generic-cmy-color-from-number #X0350C1)
           => #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

 -- Generic Function: generic-cmy-color-coordinates color
     Return the generic CMY color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the cyan, magenta, and
     yellow primary.


File: rs-colors.info,  Node: Generic CMYK Color Space,  Prev: Generic CMY Color Space,  Up: Generic Color Spaces (Color Models)

4.3.5 Generic CMYK Color Space
------------------------------

The generic CMYK color space is a mathematical description of the CMYK
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
yellow, and black (key) primary.  Values are real numbers in the closed
interval [0, 1].  There is no white point.

 -- Class: generic-cmyk-color
     Color class for the generic CMYK color space.

     *Class Precedence List*
     'generic-cmyk-color', 'cmyk-color-object', 'generic-color-object',
     'color-object', ...

 -- Function: make-generic-cmyk-color cyan magenta yellow black &key
          byte-size
     Create a new color in the generic CMYK color space.

        * First argument CYAN is the normalized intensity of the cyan
          primary.

        * Second argument MAGENTA is the normalized intensity of the
          magenta primary.

        * Third argument YELLOW is the normalized intensity of the
          yellow primary.

        * Fourth argument BLACK is the normalized intensity of the black
          primary.

     Arguments CYAN, MAGENTA, YELLOW, and BLACK have to be real numbers
     in the closed interval [0, 1].  If BLACK is zero, CYAN, MAGENTA,
     and YELLOW are converted from CMY color coordinates to CMYK color
     coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments CYAN, MAGENTA, YELLOW, and
     BLACK have to be integral numbers in the range from 0 to 2^n - 1
     where n is the number of bits.  If so, arguments CYAN, MAGENTA,
     YELLOW, and BLACK are scaled accordingly.

     Example:

          (make-generic-cmyk-color 3/255 80/255 193/255 0)
           => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

          (make-generic-cmyk-color 3 80 193 :byte-size 8)
           => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

 -- Function: make-generic-cmyk-color-from-number value &key byte-size
     Create a new color in the generic CMYK color space.

        * Argument VALUE is the numerical value of the encoded CMYK
          color coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{4n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the cyan primary.

     Example:

          (make-generic-cmyk-color-from-number #X0350C100)
           => #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

 -- Generic Function: generic-cmyk-color-coordinates color
     Return the generic CMYK color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the cyan, magenta, yellow,
     and black primary.


File: rs-colors.info,  Node: CIE Color Spaces,  Next: RGB Color Spaces,  Prev: Generic Color Spaces (Color Models),  Up: Reference Manual

4.4 CIE Color Spaces
====================

All CIE color spaces are absolute color spaces, that means they are
device independent.

* Menu:

* CIE RGB Color Space::
* CIE XYZ Color Space::
* CIE xyY Color Space::
* CIE L*u*v* Color Space::
* CIE L*a*b* Color Space::
* CIE L*C*h Color Space::
* CIE Standard Illuminants::


File: rs-colors.info,  Node: CIE RGB Color Space,  Next: CIE XYZ Color Space,  Prev: CIE Color Spaces,  Up: CIE Color Spaces

4.4.1 CIE RGB Color Space
-------------------------

The CIE RGB color space is the origin of all CIE color spaces.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed interval [0, 1].
The white point of the CIE RGB color space is the CIE standard
illuminant E(1).

 -- Class: ciergb-color
     Color class for the CIE RGB color space.

     *Class Precedence List*
     'ciergb-color', 'rgb-color-object', 'color-object', ...

 -- Function: make-ciergb-color red green blue
     Create a new color in the CIE RGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be real numbers in the
     closed interval [0, 1].

 -- Generic Function: ciergb-color-coordinates color
     Return the CIE RGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.

   ---------- Footnotes ----------

   (1) You can easily check this if you convert CIE RGB white into the
CIE xyY color space:

     (change-class (make-ciergb-color 1 1 1) 'ciexyy-color)
      => #<CIE-XYY-COLOR (1/3 1/3 1)>


File: rs-colors.info,  Node: CIE XYZ Color Space,  Next: CIE xyY Color Space,  Prev: CIE RGB Color Space,  Up: CIE Color Spaces

4.4.2 CIE XYZ Color Space
-------------------------

The CIE XYZ color space is a linear transformation of the CIE RGB color
space.  The CIE XYZ color space covers all colors an average person can
experience.  Many other color spaces are defined against the CIE XYZ
color space.

Color coordinates are the X, Y, and Z tristimulus values.  The CIE XYZ
color space has no explicit white point.

 -- Class: ciexyz-color
     Color class for the CIE XYZ color space.

     *Class Precedence List*
     'ciexyz-color', 'color-object', ...

 -- Function: make-ciexyz-color x y z
     Create a new color in the CIE XYZ color space.

        * First argument X is the X tristimulus value.

        * Second argument Y is the Y tristimulus value.

        * Third argument Z is the Z tristimulus value.

     Arguments X, Y, and Z have to be non-negative real numbers.

 -- Generic Function: ciexyz-color-coordinates color
     Return the CIE XYZ color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the X, Y, and Z tristimulus values.

Objects of the 'ciexyz-color' class can be instantiated with absolute
and normalized color coordinates.  However, if you want to convert
colors from CIE XYZ color space to CIE RGB color space (or any other RGB
color space), the CIE XYZ color coordinates have to be normalized color
coordinates.  See the 'normalize-color' and 'absolute-color', for how to
convert from absolute color coordinates to normalized color coordinates
and vice versa.


File: rs-colors.info,  Node: CIE xyY Color Space,  Next: CIE L*u*v* Color Space,  Prev: CIE XYZ Color Space,  Up: CIE Color Spaces

4.4.3 CIE xyY Color Space
-------------------------

The CIE xyY color space uses the x and y chromaticity coordinates of the
CIE XYZ color space.  That is,

     x = X / (X + Y + Z)
     y = Y / (X + Y + Z)
     z = Z / (X + Y + Z)

Simple arithmetic results in the following relations:

     Y/y = X + Y + Z
       1 = x + y + z

Therefore, the inverse transformation is

     X = x Y/y
     Y = y Y/y = Y
     Z = z Y/y = (1 - x - y) Y/y

 -- Class: ciexyy-color
     Color class for the CIE xyY color space.

     *Class Precedence List*
     'ciexyy-color', 'color-object', ...

 -- Function: make-ciexyy-color x* y* y
     Create a new color in the CIE xyY color space.

        * Arguments X* and Y* are the x and y chromaticity coordinates
          of the CIE XYZ color space.

        * Third argument Y is the luminance, that is the Y tristimulus
          value of the CIE XYZ color space.

 -- Generic Function: ciexyy-color-coordinates color
     Return the CIE xyY color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the x and y chromaticity coordinates and the luminance.


File: rs-colors.info,  Node: CIE L*u*v* Color Space,  Next: CIE L*a*b* Color Space,  Prev: CIE xyY Color Space,  Up: CIE Color Spaces

4.4.4 CIE L*u*v* Color Space
----------------------------

The CIE L*u*v* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*u*v* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness L* is in the range from 0 to 100.  However, values greater
than 100 are accepted, too.  The two chromaticity coordinates U* and V*
are usually in the range from -100 to +100.

CIE L*u*v* color coordinates are always relative to a white point.  This
is either the white point of the color space you are converting from or
CIE standard illuminant D50.

 -- Variable: *cieluv-default-white-point*
     The default white point for colors in the CIE L*u*v* color space.
     Default value is the CIE 1931 D50 standard illuminant.

 -- Class: cieluv-color
     Color class for the CIE L*u*v* color space.

     *Class Precedence List*
     'cieluv-color', 'color-object', ...

 -- Function: make-cieluv-color L* u* v* &optional white-point
     Create a new color in the CIE L*u*v* color space.

        * First argument L* is the lightness.

        * Second argument U* is the first chromaticity coordinate.

        * Third argument V* is the second chromaticity coordinate.

        * Optional fourth argument WHITE-POINT is the white point.
          Default is the value of '*cieluv-default-white-point*'.

 -- Generic Function: cieluv-color-coordinates color
     Return the CIE L*u*v* color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the lightness and the two chromaticity coordinates.


File: rs-colors.info,  Node: CIE L*a*b* Color Space,  Next: CIE L*C*h Color Space,  Prev: CIE L*u*v* Color Space,  Up: CIE Color Spaces

4.4.5 CIE L*a*b* Color Space
----------------------------

The CIE L*a*b* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*a*b* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness L* is in the range from 0 to 100.  However, values greater
than 100 are accepted, too.  The two chromaticity coordinates A* and B*
are usually in the range from -250 to +250 and from -100 to +100
respectively.

CIE L*a*b* color coordinates are always relative to a white point.  This
is either the white point of the color space you are converting from or
CIE standard illuminant D50.

 -- Variable: *cielab-default-white-point*
     The default white point for colors in the CIE L*a*b* color space.
     Default value is the CIE 1931 D50 standard illuminant.

 -- Class: cielab-color
     Color class for the CIE L*a*b* color space.

     *Class Precedence List*
     'cielab-color', 'color-object', ...

 -- Function: make-cielab-color L* a* b* &optional white-point
     Create a new color in the CIE L*a*b* color space.

        * First argument L* is the lightness.

        * Second argument A* is the first chromaticity coordinate.

        * Third argument B* is the second chromaticity coordinate.

        * Optional fourth argument WHITE-POINT is the white point.
          Default is the value of '*cielab-default-white-point*'.

 -- Generic Function: cielab-color-coordinates color
     Return the CIE L*a*b* color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the lightness and the two chromaticity coordinates.


File: rs-colors.info,  Node: CIE L*C*h Color Space,  Next: CIE Standard Illuminants,  Prev: CIE L*a*b* Color Space,  Up: CIE Color Spaces

4.4.6 CIE L*C*h Color Space
---------------------------

The CIE L*C*h color space is the transformation of the CIE L*a*b* color
space from a Cartesian coordinate system into a cylindrical coordinate
system.

Color coordinates are lightness, chroma, and hue.  Lightness L* is equal
to the lightness of the CIE L*a*b* color space.  Chroma C* and hue H are
the polar coordinates, i.e.  radius and angle, of a color in the
(A*, B*) plane.

Hue is measured in degree angle; h = 0^\circ is the positive A*-axis
(red), h = 90^\circ is the positive B*-axis (yellow), h = 180^\circ is
the negative A*-axis (green), and h = 270^\circ is the negative B*-axis
(blue).

CIE L*C*h color coordinates are always relative to a white point.  This
is either the white point of the color space you are converting from or
CIE standard illuminant D50.

 -- Variable: *cielch-default-white-point*
     The default white point for colors in the CIE L*C*h* color space.
     Default value is the CIE 1931 D50 standard illuminant.

 -- Class: cielch-color
     Color class for the CIE L*C*h color space.

     *Class Precedence List*
     'cielch-color', 'color-object', ...

 -- Function: make-cielch-color L* C* h &optional white-point
     Create a new color in the CIE L*C*h color space.

        * First argument L* is the lightness.

        * Second argument C* is the chroma.

        * Third argument H is the hue.

        * Optional fourth argument WHITE-POINT is the white point.
          Default is the value of '*cielch-default-white-point*'.

     Arguments L* and C* have to be non-negative real numbers.  Argument
     H has to be a real number.  It's value is reduced to the
     half-closed interval [0, 360).

 -- Generic Function: cielch-color-coordinates color
     Return the CIE L*C*h color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the lightness, chroma, and hue.


File: rs-colors.info,  Node: CIE Standard Illuminants,  Prev: CIE L*C*h Color Space,  Up: CIE Color Spaces

4.4.7 CIE Standard Illuminants
------------------------------

 -- Constant: CIE-1931-A
 -- Constant: CIE-1931-B
 -- Constant: CIE-1931-C
 -- Constant: CIE-1931-D50
 -- Constant: CIE-1931-D55
 -- Constant: CIE-1931-D65
 -- Constant: CIE-1931-D75
 -- Constant: CIE-1931-E
 -- Constant: CIE-1931-F1
 -- Constant: CIE-1931-F2
 -- Constant: CIE-1931-F3
 -- Constant: CIE-1931-F4
 -- Constant: CIE-1931-F5
 -- Constant: CIE-1931-F6
 -- Constant: CIE-1931-F7
 -- Constant: CIE-1931-F8
 -- Constant: CIE-1931-F9
 -- Constant: CIE-1931-F10
 -- Constant: CIE-1931-F11
 -- Constant: CIE-1931-F12
     White points of the CIE standard illuminants for a 2° field of view
     (2° standard observer).

 -- Constant: CIE-1964-A
 -- Constant: CIE-1964-B
 -- Constant: CIE-1964-C
 -- Constant: CIE-1964-D50
 -- Constant: CIE-1964-D55
 -- Constant: CIE-1964-D65
 -- Constant: CIE-1964-D75
 -- Constant: CIE-1964-E
 -- Constant: CIE-1964-F1
 -- Constant: CIE-1964-F2
 -- Constant: CIE-1964-F3
 -- Constant: CIE-1964-F4
 -- Constant: CIE-1964-F5
 -- Constant: CIE-1964-F6
 -- Constant: CIE-1964-F7
 -- Constant: CIE-1964-F8
 -- Constant: CIE-1964-F9
 -- Constant: CIE-1964-F10
 -- Constant: CIE-1964-F11
 -- Constant: CIE-1964-F12
     White points of the CIE standard illuminants for a 10° field of
     view (10° standard observer).


File: rs-colors.info,  Node: RGB Color Spaces,  Next: Color Properties,  Prev: CIE Color Spaces,  Up: Reference Manual

4.5 RGB Color Spaces
====================

* Menu:

* sRGB Color Space::
* Adobe RGB Color Space::


File: rs-colors.info,  Node: sRGB Color Space,  Next: Adobe RGB Color Space,  Prev: RGB Color Spaces,  Up: RGB Color Spaces

4.5.1 sRGB Color Space
----------------------

 -- Class: srgb-color
     Color class for the sRGB color space.

     *Class Precedence List*
     'srgb-color', 'rgb-color-object', 'color-object', ...

 -- Function: make-srgb-color red green blue &key byte-size
     Create a new color in the sRGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be normalized intensity
     values in the closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-srgb-color 252/255 175/255 62/255)
           => #<SRGB-COLOR (84/85 35/51 62/255)>

          (make-srgb-color 252 175 62 :byte-size 8)
           => #<SRGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-srgb-color-from-number value &key byte-size
     Create a new color in the sRGB color space.

        * Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-srgb-color-from-number #XFCAF3E)
           => #<SRGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: srgb-color-coordinates color
     Return the sRGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Adobe RGB Color Space,  Prev: sRGB Color Space,  Up: RGB Color Spaces

4.5.2 Adobe RGB Color Space
---------------------------

 -- Class: adobe-rgb-color
     Color class for the Adobe RGB color space.

     *Class Precedence List*
     'adobe-rgb-color', 'rgb-color-object', 'color-object', ...

 -- Function: make-adobe-rgb-color red green blue &key byte-size
     Create a new color in the Adobe RGB color space.

        * First argument RED is the normalized intensity of the red
          primary.

        * Second argument GREEN is the normalized intensity of the green
          primary.

        * Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be normalized intensity
     values in the closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-adobe-rgb-color 252/255 175/255 62/255)
           => #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

          (make-adobe-rgb-color 252 175 62 :byte-size 8)
           => #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-adobe-rgb-color-from-number value &key byte-size
     Create a new color in the Adobe RGB color space.

        * Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-adobe-rgb-color-from-number #XFCAF3E)
           => #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: adobe-rgb-color-coordinates color
     Return the Adobe RGB color space coordinates of the color.

        * Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Color Properties,  Next: Color Conversions,  Prev: RGB Color Spaces,  Up: Reference Manual

4.6 Color Properties
====================

 -- Generic Function: color-coordinates color
     Return the color space coordinates of the color.

        * Argument COLOR is a color object.

 -- Generic Function: white-point color
     Return the white point of the color.

        * Argument COLOR is a color object.

     Value is the color object of the color's white point, or nil if the
     white point is not defined or if multiple white points exist.


File: rs-colors.info,  Node: Color Conversions,  Next: Color Difference,  Prev: Color Properties,  Up: Reference Manual

4.7 Color Conversions
=====================

 -- Generic Function: change-class color color-type
     Change the class of the color object.

        * First argument COLOR is a color object.

        * Second argument COLOR-TYPE is a color data type.

     The 'change-class' function destructively modifies COLOR by
     converting it's color coordinates into the color space denoted by
     COLOR-TYPE.

     Example:

          (let ((red (make-srgb-color 1 0 0)))
            (change-class red 'ciexyy-color)
            red)
           => #<CIE-XYY-COLOR (0.64d0 0.33d0 ...)>

 -- Function: coerce-color color color-type
     Coerce the color object into the specified color type.

        * First argument COLOR is a color object.

        * Second argument COLOR-TYPE is a color data type.

     If argument COLOR is already a color of the requested color data
     type, return COLOR as is (no conversion).  Otherwise, return a new
     color with the color coordinates of COLOR converted into the color
     space denoted by COLOR-TYPE.

 -- Generic Function: copy-color color
     Return a shallow copy of the color.

        * Argument COLOR is a color object.

     Value is a color object with the same color coordinates as COLOR.


File: rs-colors.info,  Node: Color Difference,  Next: Input and Output,  Prev: Color Conversions,  Up: Reference Manual

4.8 Color Difference
====================

 -- Function: cie76 first-color second-color
     Calculate the CIE76 color difference between two colors.

     Value is the Euclidean distance between the two colors in the CIE
     L*a*b* color space.  The CIE76 color difference is symmetric, i.e.
     CIE76(a,b) is equal to CIE76(b,a).

 -- Function: cie94 reference other &optional textile lightness chroma
          hue
     Calculate the CIE94 color difference between two colors.

        * First argument REFERENCE is the reference color.

        * Second argument OTHER is the other color.

        * If optional third argument TEXTILE is non-null, use parameters
          for calculating the color difference for textiles.  Default is
          to calculate the color difference for graphic arts.

        * Optional fourth to sixth argument LIGHTNESS, CHROMA, and HUE
          are the weighting factors for differences in lightness,
          chroma, and hue respectively.  Higher value means less weight.
          Default is one for all weighting factors (if TEXTILE is true,
          the default for LIGHTNESS is two).

     The CIE94 color difference is asymmetric, i.e.  CIE94(a,b) is not
     equal to CIE94(b,a).


File: rs-colors.info,  Node: Input and Output,  Next: Miscellaneous,  Prev: Color Difference,  Up: Reference Manual

4.9 Input and Output
====================

* Menu:

* Xcms Formats::
* HTML Format::
* CSS3 Formats::


File: rs-colors.info,  Node: Xcms Formats,  Next: HTML Format,  Prev: Input and Output,  Up: Input and Output

4.9.1 Xcms Formats
------------------

The syntax of a Xcms (X Color Management System) color is

     PREFIX:FIRST/SECOND/THIRD

The PREFIX part specifies the color space or format and FIRST, SECOND,
and THIRD are the color coordinates.

Color        Prefix   R5
Space
---------------------------
CIE RGB      'CIERGB'
CIE XYZ      'CIEXYZ' *
CIE xyY      'CIExyY' *
CIE L*u*v*   'CIELuv' *
CIE L*a*b*   'CIELab' *
CIE L*C*h    'CIELCh'
Tektronix    'TekHVC' *
HVC
generic      'RGBi'   *
RGB
generic      'RGB'    *
RGB

The PREFIX part is case insensitive.

 -- Function: print-color-xcms-ciergb color &optional stream
 -- Function: print-color-xcms-ciexyz color &optional stream
 -- Function: print-color-xcms-ciexyy color &optional stream
 -- Function: print-color-xcms-cieluv color &optional stream
 -- Function: print-color-xcms-cielab color &optional stream
 -- Function: print-color-xcms-cielch color &optional stream
 -- Function: print-color-xcms-rgbi color &optional stream
 -- Function: print-color-xcms-rgb color &optional stream
     Print a color in Xcms notation.

        * First argument COLOR is a color object.

        * Optional second argument STREAM is an output stream.  Default
          is to print to '*standard-output*'.

     Value is the color object.

     The RGBi and RGB formats are device dependent.  Thus, you can only
     print colors in these formats if the color conversion path to the
     generic RGB color space is unambiguous.

     The RGB format prints the color coordinates as hexadecimal numbers.
     If all RGB color intensities are multiples of 1/255, it uses two
     digits.  Otherwise, it uses four digits with a precision of
     1/65535.

     Example:

          (let ((color (make-srgb-color 78 154 6 :byte-size 8)))
            (with-output-to-string (stream)
              (print-color-xcms-ciexyz color stream)))
           => "CIEXYZ:0.14729778/0.24743336/0.04172078"

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (with-output-to-string (stream)
              (print-color-xcms-rgb color stream)))
           => "RGB:4e/9a/06"

 -- Constant: color-formatter-xcms-ciergb
 -- Constant: color-formatter-xcms-ciexyz
 -- Constant: color-formatter-xcms-ciexyy
 -- Constant: color-formatter-xcms-cieluv
 -- Constant: color-formatter-xcms-cielab
 -- Constant: color-formatter-xcms-cielch
 -- Constant: color-formatter-xcms-rgbi
 -- Constant: color-formatter-xcms-rgb
     A format function for printing a color in Xcms notation.

     Value is a function which has a behavior equivalent to a function
     returned by the 'formatter' macro.

     Example:

          (let ((color (make-srgb-color 78 154 6 :byte-size 8)))
            (format nil color-formatter-xcms-ciexyz color))
           => "CIEXYZ:0.14729778/0.24743336/0.04172078"

 -- Function: read-color-xcms-ciergb &optional stream
 -- Function: read-color-xcms-ciexyz &optional stream
 -- Function: read-color-xcms-ciexyy &optional stream
 -- Function: read-color-xcms-cieluv &optional stream
 -- Function: read-color-xcms-cielab &optional stream
 -- Function: read-color-xcms-cielch &optional stream
 -- Function: read-color-xcms-rgbi &optional stream
 -- Function: read-color-xcms-rgb &optional stream
     Read a color in Xcms format.

        * Optional argument STREAM is an input stream.  Default is to
          read from '*standard-input*'.

     Value is a color object in the respective color space.  The RGB
     format prints the color coordinates as hexadecimal numbers.  If all
     RGB color intensities are multiples of 1/255, it uses two digits.
     Otherwise, it uses four digits with a precision of 1/65535.

     Example:

          (with-input-from-string (stream "RGB:4e/9a/06 junk")
            (change-class (read-color-xcms-rgb stream) 'srgb-color))
           => #<SRGB-COLOR (26/85 154/255 2/85)>


File: rs-colors.info,  Node: HTML Format,  Next: CSS3 Formats,  Prev: Xcms Formats,  Up: Input and Output

4.9.2 HTML Format
-----------------

A HTML color value is either a hexadecimal number prefixed by a hash
mark or a keyword.  This section only covers numerical color values.

 -- Function: print-color-html color &optional stream
     Print a numerical HTML color value, that is a hexadecimal number
     prefixed by a hash mark.

        * First argument COLOR is a color object.

        * Optional second argument STREAM is an output stream.  Default
          is to print to '*standard-output*'.

     Value is the color object.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (with-output-to-string (stream)
              (print-color-html color stream)))
           => "#4E9A06"

 -- Constant: color-formatter-html
     A format function for printing a numerical HTML color value.

     Value is a function which has a behavior equivalent to a function
     returned by the 'formatter' macro.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (format nil color-formatter-html color))
           => "#4E9A06"

 -- Function: read-color-html &optional stream
     Read a numerical HTML color value, that is a hexadecimal number
     prefixed by a hash mark.

     Reading stops at the first non-hexadecimal digit character.  The
     number of hexadecimal digits has to be a multiple of three.

        * Optional argument STREAM is an input stream.  Default is to
          read from '*standard-input*'.

     Value is a color object in the sRGB color space.

     Example:

          (with-input-from-string (stream "#4E9A06 junk")
            (read-color-html stream))
           => #<SRGB-COLOR (26/85 154/255 2/85)>


File: rs-colors.info,  Node: CSS3 Formats,  Prev: HTML Format,  Up: Input and Output

4.9.3 CSS3 Formats
------------------

A CSS3 (cascading style sheets, level 3) color is either a HTML color
value or a color value in functional notation.  The later has the form

     rgb(RED, GREEN, BLUE)

where RED, GREEN, and BLUE are either integers in the range from 0
to 255 or percentage values in the range from 0% to 100%.  CSS3 also
supports a functional notation for RGB colors represented in the HSL
color space.  The format is

     hsl(HUE, SATURATION, LIGHTNESS)

where HUE is the angle in degree and SATURATION and LIGHTNESS are
percentage values in the range from 0% to 100%.

 -- Function: print-color-css3-rgb color &optional stream
 -- Function: print-color-css3-hsl color &optional stream
     Print a color in CSS3 functional notation.

        * First argument COLOR is a color object.

        * Optional second argument STREAM is an output stream.  Default
          is to print to '*standard-output*'.

     Value is the color object.

     If all sRGB color intensities are multiples of 1/255, the RED,
     GREEN, and BLUE color intensities are printed as integers.
     Otherwise, they are printed as percentage values.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (with-output-to-string (stream)
              (print-color-css3-rgb color stream)))
           => "rgb(78, 154, 6)"

          (let ((color (make-srgb-color 0.3D0 0.6D0 0.1D0)))
            (with-output-to-string (stream)
              (print-color-css3-rgb color stream)))
           => "rgb(30.0%, 60.0%, 10.0%)"

 -- Constant: color-formatter-css3-rgb
 -- Constant: color-formatter-css3-hsl
     A format function for printing a color in CSS3 functional notation.

     Value is a function which has a behavior equivalent to a function
     returned by the 'formatter' macro.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (format nil color-formatter-css3-rgb color))
           => "rgb(78, 154, 6)"

 -- Function: read-color-css3-rgb &optional stream
 -- Function: read-color-css3-hsl &optional stream
     Read a color in CSS3 functional notation.

        * Optional argument STREAM is an input stream.  Default is to
          read from '*standard-input*'.

     Reading stops after the closing parenthesis.

     Value is a color object in the sRGB color space.

     Example:

          (with-input-from-string (stream "rgb(78, 154, 6) junk")
            (read-color-css3-rgb stream))
           => #<SRGB-COLOR (26/85 154/255 2/85)>

          (with-input-from-string (stream "rgb(30%, 60%, 10%) junk")
            (read-color-css3-rgb stream))
           => #<SRGB-COLOR (0.3d0 0.6d0 0.1d0)>

 -- Function: read-color-css3 &optional stream
     Read a CSS3 color value, i.e.  either a numerical HTML color
     definition or a RGB value or HSL value in functional notation.

        * Optional argument STREAM is an input stream.  Default is to
          read from '*standard-input*'.

     Value is a color object in the sRGB color space.


File: rs-colors.info,  Node: Miscellaneous,  Prev: Input and Output,  Up: Reference Manual

4.10 Miscellaneous
==================

 -- Generic Function: normalize-color color &key black white
     Convert from absolute color coordinates to normalized color
     coordinates.

 -- Generic Function: absolute-color color &key black white
     Convert from normalized color coordinates to absolute color
     coordinates.


File: rs-colors.info,  Node: Symbol Index,  Next: Concept Index,  Prev: Reference Manual,  Up: Top

Symbol Index
************

 [index ]
* Menu:

* *cielab-default-white-point*:          CIE L*a*b* Color Space.
                                                               (line 22)
* *cielch-default-white-point*:          CIE L*C*h Color Space.
                                                               (line 24)
* *cieluv-default-white-point*:          CIE L*u*v* Color Space.
                                                               (line 21)
* absolute-color:                        Miscellaneous.        (line 10)
* adobe-rgb-color:                       Adobe RGB Color Space.
                                                               (line  6)
* adobe-rgb-color-coordinates:           Adobe RGB Color Space.
                                                               (line 61)
* change-class:                          Color Conversions.    (line  6)
* CIE-1931-A:                            CIE Standard Illuminants.
                                                               (line  6)
* CIE-1931-B:                            CIE Standard Illuminants.
                                                               (line  7)
* CIE-1931-C:                            CIE Standard Illuminants.
                                                               (line  8)
* CIE-1931-D50:                          CIE Standard Illuminants.
                                                               (line  9)
* CIE-1931-D55:                          CIE Standard Illuminants.
                                                               (line 10)
* CIE-1931-D65:                          CIE Standard Illuminants.
                                                               (line 11)
* CIE-1931-D75:                          CIE Standard Illuminants.
                                                               (line 12)
* CIE-1931-E:                            CIE Standard Illuminants.
                                                               (line 13)
* CIE-1931-F1:                           CIE Standard Illuminants.
                                                               (line 14)
* CIE-1931-F10:                          CIE Standard Illuminants.
                                                               (line 23)
* CIE-1931-F11:                          CIE Standard Illuminants.
                                                               (line 24)
* CIE-1931-F12:                          CIE Standard Illuminants.
                                                               (line 25)
* CIE-1931-F2:                           CIE Standard Illuminants.
                                                               (line 15)
* CIE-1931-F3:                           CIE Standard Illuminants.
                                                               (line 16)
* CIE-1931-F4:                           CIE Standard Illuminants.
                                                               (line 17)
* CIE-1931-F5:                           CIE Standard Illuminants.
                                                               (line 18)
* CIE-1931-F6:                           CIE Standard Illuminants.
                                                               (line 19)
* CIE-1931-F7:                           CIE Standard Illuminants.
                                                               (line 20)
* CIE-1931-F8:                           CIE Standard Illuminants.
                                                               (line 21)
* CIE-1931-F9:                           CIE Standard Illuminants.
                                                               (line 22)
* CIE-1964-A:                            CIE Standard Illuminants.
                                                               (line 29)
* CIE-1964-B:                            CIE Standard Illuminants.
                                                               (line 30)
* CIE-1964-C:                            CIE Standard Illuminants.
                                                               (line 31)
* CIE-1964-D50:                          CIE Standard Illuminants.
                                                               (line 32)
* CIE-1964-D55:                          CIE Standard Illuminants.
                                                               (line 33)
* CIE-1964-D65:                          CIE Standard Illuminants.
                                                               (line 34)
* CIE-1964-D75:                          CIE Standard Illuminants.
                                                               (line 35)
* CIE-1964-E:                            CIE Standard Illuminants.
                                                               (line 36)
* CIE-1964-F1:                           CIE Standard Illuminants.
                                                               (line 37)
* CIE-1964-F10:                          CIE Standard Illuminants.
                                                               (line 46)
* CIE-1964-F11:                          CIE Standard Illuminants.
                                                               (line 47)
* CIE-1964-F12:                          CIE Standard Illuminants.
                                                               (line 48)
* CIE-1964-F2:                           CIE Standard Illuminants.
                                                               (line 38)
* CIE-1964-F3:                           CIE Standard Illuminants.
                                                               (line 39)
* CIE-1964-F4:                           CIE Standard Illuminants.
                                                               (line 40)
* CIE-1964-F5:                           CIE Standard Illuminants.
                                                               (line 41)
* CIE-1964-F6:                           CIE Standard Illuminants.
                                                               (line 42)
* CIE-1964-F7:                           CIE Standard Illuminants.
                                                               (line 43)
* CIE-1964-F8:                           CIE Standard Illuminants.
                                                               (line 44)
* CIE-1964-F9:                           CIE Standard Illuminants.
                                                               (line 45)
* cie76:                                 Color Difference.     (line  6)
* cie94:                                 Color Difference.     (line 13)
* cielab-color:                          CIE L*a*b* Color Space.
                                                               (line 26)
* cielab-color-coordinates:              CIE L*a*b* Color Space.
                                                               (line 44)
* cielch-color:                          CIE L*C*h Color Space.
                                                               (line 28)
* cielch-color-coordinates:              CIE L*C*h Color Space.
                                                               (line 51)
* cieluv-color:                          CIE L*u*v* Color Space.
                                                               (line 25)
* cieluv-color-coordinates:              CIE L*u*v* Color Space.
                                                               (line 43)
* ciergb-color:                          CIE RGB Color Space.  (line 15)
* ciergb-color-coordinates:              CIE RGB Color Space.  (line 37)
* ciexyy-color:                          CIE xyY Color Space.  (line 24)
* ciexyy-color-coordinates:              CIE xyY Color Space.  (line 39)
* ciexyz-color:                          CIE XYZ Color Space.  (line 14)
* ciexyz-color-coordinates:              CIE XYZ Color Space.  (line 31)
* cmy-color-object:                      Abstract Color Classes.
                                                               (line 46)
* cmyk-color-object:                     Abstract Color Classes.
                                                               (line 56)
* coerce-color:                          Color Conversions.    (line 24)
* color-coordinates:                     Color Properties.     (line  6)
* color-formatter-css3-hsl:              CSS3 Formats.         (line 50)
* color-formatter-css3-rgb:              CSS3 Formats.         (line 49)
* color-formatter-html:                  HTML Format.          (line 27)
* color-formatter-xcms-cielab:           Xcms Formats.         (line 73)
* color-formatter-xcms-cielch:           Xcms Formats.         (line 74)
* color-formatter-xcms-cieluv:           Xcms Formats.         (line 72)
* color-formatter-xcms-ciergb:           Xcms Formats.         (line 69)
* color-formatter-xcms-ciexyy:           Xcms Formats.         (line 71)
* color-formatter-xcms-ciexyz:           Xcms Formats.         (line 70)
* color-formatter-xcms-rgb:              Xcms Formats.         (line 76)
* color-formatter-xcms-rgbi:             Xcms Formats.         (line 75)
* color-object:                          Abstract Color Classes.
                                                               (line  9)
* colorp:                                Color Predicates.     (line  9)
* copy-color:                            Color Conversions.    (line 36)
* generic-cmy-color:                     Generic CMY Color Space.
                                                               (line 14)
* generic-cmy-color-coordinates:         Generic CMY Color Space.
                                                               (line 70)
* generic-cmyk-color:                    Generic CMYK Color Space.
                                                               (line 14)
* generic-cmyk-color-coordinates:        Generic CMYK Color Space.
                                                               (line 76)
* generic-color-object:                  Abstract Color Classes.
                                                               (line 66)
* generic-hsl-color:                     Generic HSL Color Space.
                                                               (line 17)
* generic-hsl-color-coordinates:         Generic HSL Color Space.
                                                               (line 40)
* generic-hsv-color:                     Generic HSV Color Space.
                                                               (line 16)
* generic-hsv-color-coordinates:         Generic HSV Color Space.
                                                               (line 39)
* generic-rgb-color:                     Generic RGB Color Space.
                                                               (line 14)
* generic-rgb-color-coordinates:         Generic RGB Color Space.
                                                               (line 70)
* hsl-color-object:                      Abstract Color Classes.
                                                               (line 36)
* hsv-color-object:                      Abstract Color Classes.
                                                               (line 26)
* make-adobe-rgb-color:                  Adobe RGB Color Space.
                                                               (line 12)
* make-adobe-rgb-color-from-number:      Adobe RGB Color Space.
                                                               (line 43)
* make-cielab-color:                     CIE L*a*b* Color Space.
                                                               (line 32)
* make-cielch-color:                     CIE L*C*h Color Space.
                                                               (line 34)
* make-cieluv-color:                     CIE L*u*v* Color Space.
                                                               (line 31)
* make-ciergb-color:                     CIE RGB Color Space.  (line 21)
* make-ciexyy-color:                     CIE xyY Color Space.  (line 30)
* make-ciexyz-color:                     CIE XYZ Color Space.  (line 20)
* make-generic-cmy-color:                Generic CMY Color Space.
                                                               (line 21)
* make-generic-cmy-color-from-number:    Generic CMY Color Space.
                                                               (line 52)
* make-generic-cmyk-color:               Generic CMYK Color Space.
                                                               (line 21)
* make-generic-cmyk-color-from-number:   Generic CMYK Color Space.
                                                               (line 58)
* make-generic-hsl-color:                Generic HSL Color Space.
                                                               (line 24)
* make-generic-hsv-color:                Generic HSV Color Space.
                                                               (line 23)
* make-generic-rgb-color:                Generic RGB Color Space.
                                                               (line 21)
* make-generic-rgb-color-from-number:    Generic RGB Color Space.
                                                               (line 52)
* make-srgb-color:                       sRGB Color Space.     (line 12)
* make-srgb-color-from-number:           sRGB Color Space.     (line 42)
* normalize-color:                       Miscellaneous.        (line  6)
* print-color-css3-hsl:                  CSS3 Formats.         (line 23)
* print-color-css3-rgb:                  CSS3 Formats.         (line 22)
* print-color-html:                      HTML Format.          (line  9)
* print-color-xcms-cielab:               Xcms Formats.         (line 35)
* print-color-xcms-cielch:               Xcms Formats.         (line 36)
* print-color-xcms-cieluv:               Xcms Formats.         (line 34)
* print-color-xcms-ciergb:               Xcms Formats.         (line 31)
* print-color-xcms-ciexyy:               Xcms Formats.         (line 33)
* print-color-xcms-ciexyz:               Xcms Formats.         (line 32)
* print-color-xcms-rgb:                  Xcms Formats.         (line 38)
* print-color-xcms-rgbi:                 Xcms Formats.         (line 37)
* read-color-css3:                       CSS3 Formats.         (line 83)
* read-color-css3-hsl:                   CSS3 Formats.         (line 63)
* read-color-css3-rgb:                   CSS3 Formats.         (line 62)
* read-color-html:                       HTML Format.          (line 39)
* read-color-xcms-cielab:                Xcms Formats.         (line 92)
* read-color-xcms-cielch:                Xcms Formats.         (line 93)
* read-color-xcms-cieluv:                Xcms Formats.         (line 91)
* read-color-xcms-ciergb:                Xcms Formats.         (line 88)
* read-color-xcms-ciexyy:                Xcms Formats.         (line 90)
* read-color-xcms-ciexyz:                Xcms Formats.         (line 89)
* read-color-xcms-rgb:                   Xcms Formats.         (line 95)
* read-color-xcms-rgbi:                  Xcms Formats.         (line 94)
* rgb-color-object:                      Abstract Color Classes.
                                                               (line 15)
* srgb-color:                            sRGB Color Space.     (line  6)
* srgb-color-coordinates:                sRGB Color Space.     (line 60)
* white-point:                           Color Properties.     (line 11)


File: rs-colors.info,  Node: Concept Index,  Prev: Symbol Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* absolute color space:                  The Color Data Type.  (line 34)
* Adobe RGB color space:                 Adobe RGB Color Space.
                                                               (line  6)
* CIE L*a*b* color space:                CIE L*a*b* Color Space.
                                                               (line  6)
* CIE L*C*h color space:                 CIE L*C*h Color Space.
                                                               (line  6)
* CIE L*u*v* color space:                CIE L*u*v* Color Space.
                                                               (line  6)
* CIE RGB color space:                   CIE RGB Color Space.  (line  6)
* CIE xyY color space:                   CIE xyY Color Space.  (line  6)
* CIE XYZ color space:                   CIE XYZ Color Space.  (line  6)
* CMY color model:                       Introduction.         (line 20)
* CMY color model <1>:                   Generic CMY Color Space.
                                                               (line  6)
* CMYK color model:                      Introduction.         (line 32)
* CMYK color model <1>:                  Generic CMYK Color Space.
                                                               (line  6)
* color conversion:                      Color Conversion.     (line  9)
* color coordinates:                     Color Coordinates.    (line  6)
* color coordinates <1>:                 Color Conversion.     (line 29)
* color data type:                       The Color Data Type.  (line  6)
* color format:                          Input and Output.     (line  6)
* color model:                           The Color Data Type.  (line 14)
* color model <1>:                       Generic Color Spaces (Color Models).
                                                               (line  6)
* color model, CMY:                      Introduction.         (line 20)
* color model, CMY <1>:                  Generic CMY Color Space.
                                                               (line  6)
* color model, CMYK:                     Introduction.         (line 32)
* color model, CMYK <1>:                 Generic CMYK Color Space.
                                                               (line  6)
* color model, RGB:                      Introduction.         (line 15)
* color model, RGB <1>:                  Generic RGB Color Space.
                                                               (line  6)
* color names:                           Color Dictionaries.   (line  6)
* color space, absolute:                 The Color Data Type.  (line 34)
* color space, Adobe RGB:                Adobe RGB Color Space.
                                                               (line  6)
* color space, CIE L*a*b*:               CIE L*a*b* Color Space.
                                                               (line  6)
* color space, CIE L*C*h:                CIE L*C*h Color Space.
                                                               (line  6)
* color space, CIE L*u*v*:               CIE L*u*v* Color Space.
                                                               (line  6)
* color space, CIE RGB:                  CIE RGB Color Space.  (line  6)
* color space, CIE xyY:                  CIE xyY Color Space.  (line  6)
* color space, CIE XYZ:                  CIE XYZ Color Space.  (line  6)
* color space, device dependent:         The Color Data Type.  (line 55)
* color space, HSB:                      Generic HSV Color Space.
                                                               (line  6)
* color space, HSL:                      Generic HSL Color Space.
                                                               (line  6)
* color space, HSV:                      Generic HSV Color Space.
                                                               (line  6)
* color space, sRGB:                     sRGB Color Space.     (line  6)
* converting colors:                     Color Conversion.     (line  9)
* coordinates, color:                    Color Coordinates.    (line  6)
* coordinates, color <1>:                Color Conversion.     (line 29)
* creating colors:                       Creating Color Objects.
                                                               (line  6)
* CSS3 format:                           CSS3 Formats.         (line  6)
* data type, color:                      The Color Data Type.  (line  6)
* device dependent color space:          The Color Data Type.  (line 55)
* formatted I/O:                         Input and Output.     (line  6)
* HSB color space:                       Generic HSV Color Space.
                                                               (line  6)
* HSL color space:                       Generic HSL Color Space.
                                                               (line  6)
* HSV color space:                       Generic HSV Color Space.
                                                               (line  6)
* HTML format:                           HTML Format.          (line  6)
* making colors:                         Creating Color Objects.
                                                               (line  6)
* named colors:                          Color Dictionaries.   (line  6)
* printing colors:                       Input and Output.     (line  6)
* reading colors:                        Input and Output.     (line  6)
* RGB color model:                       Introduction.         (line 15)
* RGB color model <1>:                   Generic RGB Color Space.
                                                               (line  6)
* sRGB color space:                      sRGB Color Space.     (line  6)
* white point:                           White Point.          (line  6)
* white point <1>:                       CIE Standard Illuminants.
                                                               (line 26)
* white point <2>:                       CIE Standard Illuminants.
                                                               (line 49)
* white point, CIE standard illuminant:  CIE Standard Illuminants.
                                                               (line  6)
* Xcms format:                           Xcms Formats.         (line  6)



Tag Table:
Node: Top646
Ref: ref;sRGB1323
Ref: ref;Adobe RGB1434
Ref: ref;Xcms1564
Ref: ref;HTML1661
Ref: ref;CSS31723
Node: Introduction1772
Node: Installation3307
Node: User's Guide4374
Node: The Color Data Type4649
Node: Creating Color Objects6229
Node: Color Coordinates8651
Node: White Point9235
Node: Color Conversion9522
Ref: figure:rs-colors-conversion9680
Node: Color Dictionaries11091
Node: Reference Manual12825
Node: Color Predicates13208
Ref: function;rs-colors;colorp13509
Node: Abstract Color Classes13584
Ref: class;rs-colors;color-object13865
Ref: class;rs-colors;rgb-color-object13994
Ref: class;rs-colors;hsv-color-object14296
Ref: class;rs-colors;hsl-color-object14653
Ref: class;rs-colors;cmy-color-object15001
Ref: class;rs-colors;cmyk-color-object15308
Ref: class;rs-colors;generic-color-object15631
Node: Generic Color Spaces (Color Models)15805
Node: Generic RGB Color Space16334
Ref: class;rs-colors;generic-rgb-color16868
Ref: function;rs-colors;make-generic-rgb-color17073
Ref: function;rs-colors;make-generic-rgb-color-from-number18114
Ref: generic-function;rs-colors;generic-rgb-color-coordinates18794
Node: Generic HSV Color Space19050
Ref: class;rs-colors;generic-hsv-color19694
Ref: function;rs-colors;make-generic-hsv-color19899
Ref: generic-function;rs-colors;generic-hsv-color-coordinates20411
Node: Generic HSL Color Space20643
Ref: class;rs-colors;generic-hsl-color21229
Ref: function;rs-colors;make-generic-hsl-color21434
Ref: generic-function;rs-colors;generic-hsl-color-coordinates21957
Node: Generic CMY Color Space22180
Ref: class;rs-colors;generic-cmy-color22709
Ref: function;rs-colors;make-generic-cmy-color22914
Ref: function;rs-colors;make-generic-cmy-color-from-number23981
Ref: generic-function;rs-colors;generic-cmy-color-coordinates24662
Node: Generic CMYK Color Space24923
Ref: class;rs-colors;generic-cmyk-color25437
Ref: function;rs-colors;make-generic-cmyk-color25646
Ref: function;rs-colors;make-generic-cmyk-color-from-number26976
Ref: generic-function;rs-colors;generic-cmyk-color-coordinates27665
Node: CIE Color Spaces27935
Node: CIE RGB Color Space28399
Ref: class;rs-colors;ciergb-color28867
Ref: function;rs-colors;make-ciergb-color29029
Ref: generic-function;rs-colors;ciergb-color-coordinates29497
Ref: CIE RGB Color Space-Footnote-129780
Node: CIE XYZ Color Space29972
Ref: class;rs-colors;ciexyz-color30496
Ref: function;rs-colors;make-ciexyz-color30638
Ref: generic-function;rs-colors;ciexyz-color-coordinates30964
Node: CIE xyY Color Space31622
Ref: class;rs-colors;ciexyy-color32198
Ref: function;rs-colors;make-ciexyy-color32340
Ref: generic-function;rs-colors;ciexyy-color-coordinates32659
Node: CIE L*u*v* Color Space32893
Ref: variable;rs-colors;*cieluv-default-white-point*33690
Ref: class;rs-colors;cieluv-color33865
Ref: function;rs-colors;make-cieluv-color34010
Ref: generic-function;rs-colors;cieluv-color-coordinates34446
Node: CIE L*a*b* Color Space34679
Ref: variable;rs-colors;*cielab-default-white-point*35513
Ref: class;rs-colors;cielab-color35688
Ref: function;rs-colors;make-cielab-color35833
Ref: generic-function;rs-colors;cielab-color-coordinates36269
Node: CIE L*C*h Color Space36502
Ref: variable;rs-colors;*cielch-default-white-point*37475
Ref: class;rs-colors;cielch-color37650
Ref: function;rs-colors;make-cielch-color37794
Ref: generic-function;rs-colors;cielch-color-coordinates38349
Node: CIE Standard Illuminants38561
Ref: constant;rs-colors;CIE-1931-A38734
Ref: constant;rs-colors;CIE-1931-B38734
Ref: constant;rs-colors;CIE-1931-C38734
Ref: constant;rs-colors;CIE-1931-D5038734
Ref: constant;rs-colors;CIE-1931-D5538734
Ref: constant;rs-colors;CIE-1931-D6538734
Ref: constant;rs-colors;CIE-1931-D7538734
Ref: constant;rs-colors;CIE-1931-E38734
Ref: constant;rs-colors;CIE-1931-F138734
Ref: constant;rs-colors;CIE-1931-F238734
Ref: constant;rs-colors;CIE-1931-F338734
Ref: constant;rs-colors;CIE-1931-F438734
Ref: constant;rs-colors;CIE-1931-F538734
Ref: constant;rs-colors;CIE-1931-F638734
Ref: constant;rs-colors;CIE-1931-F738734
Ref: constant;rs-colors;CIE-1931-F838734
Ref: constant;rs-colors;CIE-1931-F938734
Ref: constant;rs-colors;CIE-1931-F1038734
Ref: constant;rs-colors;CIE-1931-F1138734
Ref: constant;rs-colors;CIE-1931-F1238734
Ref: constant;rs-colors;CIE-1964-A39362
Ref: constant;rs-colors;CIE-1964-B39362
Ref: constant;rs-colors;CIE-1964-C39362
Ref: constant;rs-colors;CIE-1964-D5039362
Ref: constant;rs-colors;CIE-1964-D5539362
Ref: constant;rs-colors;CIE-1964-D6539362
Ref: constant;rs-colors;CIE-1964-D7539362
Ref: constant;rs-colors;CIE-1964-E39362
Ref: constant;rs-colors;CIE-1964-F139362
Ref: constant;rs-colors;CIE-1964-F239362
Ref: constant;rs-colors;CIE-1964-F339362
Ref: constant;rs-colors;CIE-1964-F439362
Ref: constant;rs-colors;CIE-1964-F539362
Ref: constant;rs-colors;CIE-1964-F639362
Ref: constant;rs-colors;CIE-1964-F739362
Ref: constant;rs-colors;CIE-1964-F839362
Ref: constant;rs-colors;CIE-1964-F939362
Ref: constant;rs-colors;CIE-1964-F1039362
Ref: constant;rs-colors;CIE-1964-F1139362
Ref: constant;rs-colors;CIE-1964-F1239362
Node: RGB Color Spaces39992
Node: sRGB Color Space40214
Ref: class;rs-colors;srgb-color40388
Ref: function;rs-colors;make-srgb-color40543
Ref: function;rs-colors;make-srgb-color-from-number41557
Ref: generic-function;rs-colors;srgb-color-coordinates42209
Node: Adobe RGB Color Space42451
Ref: class;rs-colors;adobe-rgb-color42610
Ref: function;rs-colors;make-adobe-rgb-color42780
Ref: function;rs-colors;make-adobe-rgb-color-from-number43824
Ref: generic-function;rs-colors;adobe-rgb-color-coordinates44496
Node: Color Properties44748
Ref: generic-function;rs-colors;color-coordinates44914
Ref: generic-function;rs-colors;white-point45060
Node: Color Conversions45329
Ref: generic-function;common-lisp;change-class45497
Ref: function;rs-colors;coerce-color46034
Ref: generic-function;rs-colors;copy-color46499
Node: Color Difference46697
Ref: function;rs-colors;cie7646863
Ref: function;rs-colors;cie9447155
Node: Input and Output48051
Node: Xcms Formats48273
Ref: function;rs-colors;print-color-xcms-ciergb48947
Ref: function;rs-colors;print-color-xcms-ciexyz48947
Ref: function;rs-colors;print-color-xcms-ciexyy48947
Ref: function;rs-colors;print-color-xcms-cieluv48947
Ref: function;rs-colors;print-color-xcms-cielab48947
Ref: function;rs-colors;print-color-xcms-cielch48947
Ref: function;rs-colors;print-color-xcms-rgbi48947
Ref: function;rs-colors;print-color-xcms-rgb48947
Ref: function;rs-colors;color-formatter-xcms-ciergb50509
Ref: function;rs-colors;color-formatter-xcms-ciexyz50509
Ref: function;rs-colors;color-formatter-xcms-ciexyy50509
Ref: function;rs-colors;color-formatter-xcms-cieluv50509
Ref: function;rs-colors;color-formatter-xcms-cielab50509
Ref: function;rs-colors;color-formatter-xcms-cielch50509
Ref: function;rs-colors;color-formatter-xcms-rgbi50509
Ref: function;rs-colors;color-formatter-xcms-rgb50509
Ref: function;rs-colors;read-color-xcms-ciergb51212
Ref: function;rs-colors;read-color-xcms-ciexyz51212
Ref: function;rs-colors;read-color-xcms-ciexyy51212
Ref: function;rs-colors;read-color-xcms-cieluv51212
Ref: function;rs-colors;read-color-xcms-cielab51212
Ref: function;rs-colors;read-color-xcms-cielch51212
Ref: function;rs-colors;read-color-xcms-rgbi51212
Ref: function;rs-colors;read-color-xcms-rgb51212
Node: HTML Format52261
Ref: function;rs-colors;print-color-html52546
Ref: constant;rs-colors;color-formatter-html53100
Ref: function;rs-colors;read-color-html53471
Node: CSS3 Formats54081
Ref: function;rs-colors;print-color-css3-rgb54765
Ref: function;rs-colors;print-color-css3-hsl54765
Ref: constant;rs-colors;color-formatter-css3-rgb55728
Ref: constant;rs-colors;color-formatter-css3-hsl55728
Ref: function;rs-colors;read-color-css3-rgb56161
Ref: function;rs-colors;read-color-css3-hsl56161
Ref: function;rs-colors;read-color-css356861
Node: Miscellaneous57209
Ref: generic-function;rs-colors;normalize-color57342
Ref: generic-function;rs-colors;absolute-color57487
Node: Symbol Index57631
Node: Concept Index73215

End Tag Table


Local Variables:
coding: utf-8
End:
