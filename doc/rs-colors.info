This is rs-colors.info, produced by makeinfo version 6.7 from
rs-colors.texi.

This is edition 2, last updated 2021-01-05, of ‘RS-COLORS – A Color Data
Type for Common Lisp’, for RS-COLORS version 1.1.

     Copyright © 2014 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.
INFO-DIR-SECTION Libraries
START-INFO-DIR-ENTRY
* rs-colors: (rs-colors).       A color data type for Common Lisp.
END-INFO-DIR-ENTRY


File: rs-colors.info,  Node: Top,  Next: Introduction,  Prev: (dir),  Up: (dir)

RS-COLORS
*********

This is edition 2, last updated 2021-01-05, of ‘RS-COLORS – A Color Data
Type for Common Lisp’, for RS-COLORS version 1.1.

     Copyright © 2014 Ralph Schleicher

     Permission is granted to make and distribute verbatim copies of
     this manual, provided the copyright notice and this permission
     notice are preserved on all copies.

Please report any errors in this manual to <rs@ralph-schleicher.de>.

* Menu:

* Introduction::
* Installation::
* User's Guide::
* Reference Manual::
* Symbol Index::
* Concept Index::

References
**********

[sRGB]
     <http://www.w3.org/Graphics/Color/sRGB.html>
     <http://www.color.org/chardata/rgb/srgb.xalter>

[Adobe RGB]
     Adobe RGB (1998) Color Image Encoding, Version 2005-05
     <http://www.color.org/chardata/rgb/adobergb.xalter>

[Xcms]
     Valerie Quercia, Tim O’Reilly: X Window System User’s Guide, for
     X11 Release 5

[HTML]
     <http://www.w3.org/TR/1999/REC-html401-19991224>

[CSS3]
     <https://www.w3.org/TR/css-color-3>


File: rs-colors.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

1 Introduction
**************

By using the RS-COLORS library you can create and manipulate colors, or
better color objects, in Common Lisp.  A color is either associated with
a color model or a color space.  The implemented color models and color
spaces are:

   • generic RGB
   • generic HSV/HSB
   • generic HSL
   • generic CMY
   • generic CMYK

and

   • CIE RGB
   • CIE XYZ
   • CIE xyY
   • CIE L*u*v*
   • CIE L*a*b*
   • CIE L*C*h
   • sRGB
   • Adobe RGB
   • wide-gamut RGB

In *note User's Guide:: we demonstrate the most important concepts
provided by the RS-COLORS library.  The details are documented in *note
Reference Manual::.


File: rs-colors.info,  Node: Installation,  Next: User's Guide,  Prev: Introduction,  Up: Top

2 Installation
**************

The RS-COLORS library is available in Quicklisp
(https://www.quicklisp.org).  Thus,

     (ql:quickload :rs-colors)
     (use-package :rs-colors)

should do it.


File: rs-colors.info,  Node: User's Guide,  Next: Reference Manual,  Prev: Installation,  Up: Top

3 User’s Guide
**************

* Menu:

* The Color Data Type::
* Creating Color Objects::
* Color Coordinates::
* White Point::
* Color Conversion::
* External Representations::
* Color Dictionaries::


File: rs-colors.info,  Node: The Color Data Type,  Next: Creating Color Objects,  Prev: User's Guide,  Up: User's Guide

3.1 The Color Data Type
=======================

First of all, there is not _one_ color data type.  Instead, every color
is an instance of a particular color class.  All color classes are
sub-classes of the abstract ‘color-object’ class.  The built-in color
classes are listed in the following tables.

Color Classes for Color Models
------------------------------

‘generic-rgb-color’
     Mathematical description of the RGB color model.

‘generic-hsv-color’
     Mathematical description of the HSV color space.  The HSV color
     space is a different representation of the RGB color model.

‘generic-hsl-color’
     Mathematical description of the HSL color space.  The HSL color
     space is a different representation of the RGB color model.

‘generic-cmy-color’
     Mathematical description of the CMY color model.

‘generic-cmyk-color’
     Mathematical description of the CMYK color model.

Color Classes for Absolute Color Spaces
---------------------------------------

‘ciergb-color’
     The CIE RGB color space.

‘ciexyz-color’
     The CIE XYZ color space.

‘ciexyy-color’
     The CIE xyY color space.

‘cieluv-color’
     The CIE L*u*v* color space.

‘cielab-color’
     The CIE L*a*b* color space.

‘cielch-color’
     The CIE L*C*h color space.

Color Classes for Device Dependent Color Spaces
-----------------------------------------------

‘srgb-color’
     The sRGB color space.

‘adobe-rgb-color’
     The Adobe RGB color space.

‘wide-gamut-rgb-color’
     The wide-gamut RGB color space.


File: rs-colors.info,  Node: Creating Color Objects,  Next: Color Coordinates,  Prev: The Color Data Type,  Up: User's Guide

3.2 Creating Color Objects
==========================

Colors are instantiated by calling a constructor function.  Constructor
arguments are usually the color coordinates in the respective color
space.  To create, for example, a color in the sRGB color space, say

     (make-srgb-color 252/255 175/255 62/255)
      ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

Many color coordinates have to be expressed as intensity values, that is
values in the range from zero to one inclusive.  That’s the reason why
the sRGB color coordinates in the above example are specified as
rational numbers.

Some constructors accept a ‘:byte-size’ keyword argument.  This is
useful if the scale factor is equal for all color coordinates.  With
that we can rewrite the above example as

     (make-srgb-color 252 175 62 :byte-size 8)
      ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

As you can see, the resulting color coordinates are equal.  Another
common case is to encode the color coordinates in a single integral
number.  Again, the ‘:byte-size’ keyword argument specifies how many
bits are used to encode a single color coordinate.  Thus,

     (make-srgb-color-from-number #XFCAF3E :byte-size 8)
      ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

results in the same color as before.

The built-in constructors are listed in the following table.

‘make-generic-rgb-color’
‘make-generic-rgb-color-from-number’
     Create a generic RGB color object.

‘make-generic-hsv-color’
     Create a generic HSV color object.

‘make-generic-hsl-color’
     Create a generic HSL color object.

‘make-generic-cmy-color’
‘make-generic-cmy-color-from-number’
     Create a generic CMY color object.

‘make-generic-cmyk-color’
‘make-generic-cmyk-color-from-number’
     Create a generic CMYK color object.

‘make-ciergb-color’
     Create a CIE RGB color object.

‘make-ciexyz-color’
     Create a CIE XYZ color object.

‘make-ciexyy-color’
     Create a CIE xyY color object.

‘make-cieluv-color’
     Create a CIE L*u*v* color object.

‘make-cielab-color’
     Create a CIE L*a*b* color object.

‘make-cielch-color’
     Create a CIE L*C*h color object.

‘make-srgb-color’
‘make-srgb-color-from-number’
     Create a sRGB color object.

‘make-adobe-rgb-color’
‘make-adobe-rgb-color-from-number’
     Create an Adobe RGB color object.

‘make-wide-gamut-rgb-color’
‘make-wide-gamut-rgb-color-from-number’
     Create an wide-gamut RGB color object.


File: rs-colors.info,  Node: Color Coordinates,  Next: White Point,  Prev: Creating Color Objects,  Up: User's Guide

3.3 Color Coordinates
=====================

Use the ‘color-coordinates’ function to get the color coordinates of a
color.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       ;; We know that COLOR is an RGB color.
       (multiple-value-bind (r g b)
           (color-coordinates color)
         (list r g b)))
      ⇒ (84/85 35/51 62/255)

A more practical way to get the color coordinates of a color is
described in *note Color Conversion::.


File: rs-colors.info,  Node: White Point,  Next: Color Conversion,  Prev: Color Coordinates,  Up: User's Guide

3.4 White Point
===============

A device dependent color space usually has a “white point”.  If so, the
‘white-point’ function returns a color object of this white point.


File: rs-colors.info,  Node: Color Conversion,  Next: External Representations,  Prev: White Point,  Up: User's Guide

3.5 Color Conversion
====================

 [image src="rs-colors-images/rs-colors-conversion.png" ]

Figure 3.1: Color Conversions

*note Figure 3.1: figure:rs-colors-conversion. depicts the implemented
color conversions.  The nice thing about RS-COLORS is that all these
color conversions can be performed with the ‘change-class’ function.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       (values (change-class color 'generic-cmyk-color) color))
      ⇒ #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
      ⇒ #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

If you wish to keep the original color object unchanged, use the
‘coerce-color’ function.

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       (values (coerce-color color 'generic-cmyk-color) color))
      ⇒ #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
      ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

The ‘coerce-color’ function only creates a copy of the color if the
color object is not already of the correct type.

If you only need the color coordinates, then you can call one of the
following functions to get them.

‘generic-rgb-color-coordinates’
     Return the generic RGB color space coordinates of a color.

‘generic-hsv-color-coordinates’
     Return the generic HSV color space coordinates of a color.

‘generic-hsl-color-coordinates’
     Return the generic HSL color space coordinates of a color.

‘generic-cmy-color-coordinates’
     Return the generic CMY color space coordinates of a color.

‘generic-cmyk-color-coordinates’
     Return the generic CMYK color space coordinates of a color.

‘ciergb-color-coordinates’
     Return the CIE RGB color space coordinates of a color.

‘ciexyz-color-coordinates’
     Return the CIE XYZ color space coordinates of a color.

‘ciexyy-color-coordinates’
     Return the CIE xyY color space coordinates of a color.

‘cieluv-color-coordinates’
     Return the CIE L*u*v* color space coordinates of a color.

‘cielab-color-coordinates’
     Return the CIE L*a*b* color space coordinates of a color.

‘cielch-color-coordinates’
     Return the CIE L*C*h color space coordinates of a color.

‘srgb-color-coordinates’
     Return the sRGB color space coordinates of a color.

‘adobe-rgb-color-coordinates’
     Return the Adobe RGB color space coordinates of a color.

‘wide-gamut-rgb-color-coordinates’
     Return the wide-gamut RGB color space coordinates of a color.

Let’s repeat our example:

     (let ((color (make-srgb-color 252 175 62 :byte-size 8)))
       (multiple-value-bind (c m y k)
           (generic-cmyk-color-coordinates color)
         (values (list c m y k) color)))
      ⇒ (0 11/36 95/126 1/85)
      ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

All these color conversions only work if the color conversion path is
unambiguous.  The crux is the conversion from the CIE XYZ color space to
the generic RGB color space and vice versa.  If you want to go that way,
then you have to specify the intermediate color space.

     (let ((color (make-generic-hsl-color 30 1 1/2)))
       (multiple-value-bind (L* C* h)
           (cielch-color-coordinates
            (if (typep color 'generic-color-object)
                (coerce-color color 'srgb-color)
              color))
         (values (list L* C* h) color)))
      ⇒ (66.95426618791458d0 85.58632577011882d0 59.7885844150978d0)
      ⇒ #<GENERIC-HSL-COLOR (30 1 1/2)>

Or destructively:

     (let ((color (make-generic-hsl-color 30 1 1/2)))
       (change-class (change-class color 'srgb-color) 'cielch-color))
      ⇒ #<CIELCH-COLOR (66.95426... 85.58632... 59.78858...)>


File: rs-colors.info,  Node: External Representations,  Next: Color Dictionaries,  Prev: Color Conversion,  Up: User's Guide

3.6 External Representations
============================

There are some functions for reading and printing colors in different
formats.  The RS-COLORS library supports Xcms notation, numerical HTML
notation, and CSS3 functional notation.

All functions adhere to the standards set forth by the ‘read’, ‘print’,
and ‘format’ functions.  Thus, they interoperate well with the stream
concepts of Common Lisp.

     (with-input-from-string (input "RGB:4e/9a/06")
       (with-output-to-string (output)
         (print-color-html (read-color-xcms-rgb input) output)))
      ⇒ "#4E9A06"

     (let ((color (make-srgb-color 78 154 6 :byte-size 8)))
       (format nil "background: ~?;" color-formatter-css3-rgb (list color)))
      ⇒ "background: rgb(78, 154, 6);"

*Note Input and Output::, for more details about the supported formats.


File: rs-colors.info,  Node: Color Dictionaries,  Prev: External Representations,  Up: User's Guide

3.7 Color Dictionaries
======================

The RS-COLORS library provides several packages with predefined named
colors.  The recommended way to use these packages is to load it, for
example, with QuickLisp.  Then you should refer to the named colors via
the package prefix to avoid name clashes.

     ;; Load a color dictionary.
     (ql:quickload :rs-colors-html)

     ;; Use a named color.
     (format nil color-formatter-css3-rgb html-color:green)
      ⇒ "rgb(0, 128, 0)"

Below is a list of all package prefixes together with their meaning.

‘rs-colors-x11’, ‘x11-color’
     X11 color names, ‘(ql:quickload :rs-colors-x11)’.
     See <https://en.wikipedia.org/wiki/X11_color_names>.

‘rs-colors-html’, ‘html-color’
     HTML basic colors, ‘(ql:quickload :rs-colors-html)’.
     See <https://www.w3.org/TR/css3-color/#html4>.

‘rs-colors-svg’, ‘svg-color’
     SVG color names, ‘(ql:quickload :rs-colors-svg)’.
     See <https://www.w3.org/TR/css3-color/#svg-color>.

‘rs-colors-ral’, ‘ral-color’
     RAL Classic color names, ‘(ql:quickload :rs-colors-ral)’.
     See <https://www.ral-farben.de>.

‘rs-colors-ral-design’, ‘ral-design-color’
     RAL Design color names, ‘(ql:quickload :rs-colors-ral-design)’.
     See <https://www.ral-farben.de>.

‘rs-colors-tango’, ‘tango-color’
     Tango desktop project colors, ‘(ql:quickload :rs-colors-tango)’.
     See <http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines>.

‘rs-colors-material-io’, ‘material-io-color’
     Material design color palette,
     ‘(ql:quickload :rs-colors-material-io)’.
     See <https://material.io/guidelines/style/color.html>.


File: rs-colors.info,  Node: Reference Manual,  Next: Symbol Index,  Prev: User's Guide,  Up: Top

4 Reference Manual
******************

* Menu:

* Color Predicates::
* Abstract Color Classes::
* Generic Color Spaces (Color Models)::
* CIE Color Spaces::
* RGB Color Spaces::
* Color Properties::
* Color Conversions::
* Color Differences::
* Input and Output::
* Miscellaneous::


File: rs-colors.info,  Node: Color Predicates,  Next: Abstract Color Classes,  Prev: Reference Manual,  Up: Reference Manual

4.1 Color Predicates
====================

Use the ‘colorp’ function to check whether or not an object is a color.
This covers all color classes documented in this manual.

 -- Function: colorp object
     Return true if OBJECT is a color object.


File: rs-colors.info,  Node: Abstract Color Classes,  Next: Generic Color Spaces (Color Models),  Prev: Color Predicates,  Up: Reference Manual

4.2 Abstract Color Classes
==========================

The color classes documented in this section are merely used as
superclasses.

 -- Class: color-object
     Base class for a color.

     *Class Precedence List*
     ‘color-object’, ‘standard-object’, ‘t’.

 -- Class: rgb-color-object
     Color class for a RGB color space.

     Color coordinates are the normalized intensities of the red, green,
     and blue primary.  Values are real numbers in the closed
     interval [0, 1].

     *Class Precedence List*
     ‘rgb-color-object’, ‘color-object’, ...

 -- Class: hsv-color-object
     Color class for a HSV/HSB color space.

     Color coordinates are hue, saturation, and value (brightness).  Hue
     is a real number in the half-closed interval [0, 360).  Saturation
     and value are real numbers in the closed interval [0, 1].

     *Class Precedence List*
     ‘hsv-color-object’, ‘color-object’, ...

 -- Class: hsl-color-object
     Color class for a HSL color space.

     Color coordinates are hue, saturation, and lightness.  Hue is a
     real number in the half-closed interval [0, 360).  Saturation and
     lightness are real numbers in the closed interval [0, 1].

     *Class Precedence List*
     ‘hsl-color-object’, ‘color-object’, ...

 -- Class: cmy-color-object
     Color class for a CMY color space.

     Color coordinates are the normalized intensities of the cyan,
     magenta, and yellow primary.  Values are real numbers in the closed
     interval [0, 1].

     *Class Precedence List*
     ‘cmy-color-object’, ‘color-object’, ...

 -- Class: cmyk-color-object
     Color class for a CMYK color space.

     Color coordinates are the normalized intensities of the cyan,
     magenta, yellow, and black (key) primary.  Values are real numbers
     in the closed interval [0, 1].

     *Class Precedence List*
     ‘cmyk-color-object’, ‘color-object’, ...

 -- Class: generic-color-object
     Color class for the mathematical model of a color space.

     *Class Precedence List*
     ‘generic-color-object’, ‘color-object’, ...


File: rs-colors.info,  Node: Generic Color Spaces (Color Models),  Next: CIE Color Spaces,  Prev: Abstract Color Classes,  Up: Reference Manual

4.3 Generic Color Spaces (Color Models)
=======================================

A generic color space implements a color model.  Two color models are in
widespread use with computers:

   • The additive RGB color model with the primary colors red, green,
     and blue.

   • The subtractive CMY color model with the primary colors cyan,
     magenta, and yellow.

The RGB color model is the usual color model for computer displays.  If
the color intensity of all primary colors is zero, that means “off”, the
display appears “black”.  Otherwise, if the color intensity of all
primary colors is one, that means “on”, the display appears “white”.

The CMY color model is the usual color model for paper printers.  If the
color intensity of all primary colors is zero, that means “off”, the
paper appears “white”.  Otherwise, if the color intensity of all primary
colors is one, that means “on”, the paper appears “black”.

Theoretically, a RGB tuple (R, G, B) and a CMY tuple (C, M, Y) are
related to each other via the simple equations

     C = 1 - R
     M = 1 - G
     Y = 1 - B

The CMYK color model is an extension of the CMY color model to save ink.
Theoretically, a CMY tuple (C, M, Y) and a CMYK quadruple (c, m, y, k)
can be related to each other via the equations

     k = min(C, M, Y)
     c = (C - k) / (1 - k)
     m = (M - k) / (1 - k)
     y = (Y - k) / (1 - k)

and

     C = min(1, c (1 - k) + k)
     M = min(1, m (1 - k) + k)
     Y = min(1, y (1 - k) + k)

* Menu:

* Generic RGB Color Space::
* Generic HSV Color Space::
* Generic HSL Color Space::
* Generic CMY Color Space::
* Generic CMYK Color Space::


File: rs-colors.info,  Node: Generic RGB Color Space,  Next: Generic HSV Color Space,  Prev: Generic Color Spaces (Color Models),  Up: Generic Color Spaces (Color Models)

4.3.1 Generic RGB Color Space
-----------------------------

The generic RGB color space is a mathematical description of the RGB
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed interval [0, 1].
There is no white point.

 [image src="rs-colors-images/srgb-color-cube-RGB-views.png" ]

Figure 4.1: RGB Color Space with sRGB Colors

 -- Class: generic-rgb-color
     Color class for the generic RGB color space.

     *Class Precedence List*
     ‘generic-rgb-color’, ‘rgb-color-object’, ‘generic-color-object’,
     ‘color-object’, ...

 -- Function: make-generic-rgb-color red green blue &key byte-size
     Create a new color in the generic RGB color space.

        • First argument RED is the normalized intensity of the red
          primary.

        • Second argument GREEN is the normalized intensity of the green
          primary.

        • Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be real numbers in the
     closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-generic-rgb-color 252/255 175/255 62/255)
           ⇒ #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

          (make-generic-rgb-color 252 175 62 :byte-size 8)
           ⇒ #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-generic-rgb-color-from-number value &key byte-size
     Create a new color in the generic RGB color space.

        • Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-generic-rgb-color-from-number #XFCAF3E)
           ⇒ #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: generic-rgb-color-coordinates color
     Return the generic RGB color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Generic HSV Color Space,  Next: Generic HSL Color Space,  Prev: Generic RGB Color Space,  Up: Generic Color Spaces (Color Models)

4.3.2 Generic HSV Color Space
-----------------------------

The HSV color space is a different representation of the RGB color
model.  The HSV color space is also called HSB color space.  The generic
HSV color space is not associated with a particular device.

Color coordinates are hue, saturation, and value (brightness).  Hue is
measured in degree angle and it is a real number in the half-closed
interval [0, 360).  Saturation and value are real numbers in the closed
interval [0, 1].  There is no white point.

The HSV color space is a cylindrical coordinate system but it is usually
visualized as a cone as depicted in *note Figure 4.2:
figure:srgb-color-cube-HSV-views.  H = 0° is red, H = 120° is green, and
H = 240° is blue.  S = 0 is the centerline of the cone with the gray
levels from black (V = 0) to white (V = 1).  S = 1 defines the surface
of the cone.

 [image src="rs-colors-images/srgb-color-cube-HSV-views.png" ]

Figure 4.2: HSV Color Space with sRGB Colors

 -- Class: generic-hsv-color
     Color class for the generic HSV color space.

     *Class Precedence List*
     ‘generic-hsv-color’, ‘hsv-color-object’, ‘generic-color-object’,
     ‘color-object’, ...

 -- Function: make-generic-hsv-color hue saturation value
     Create a new color in the generic HSV color space.

        • First argument HUE is the angle of the RGB color wheel in
          degree.

        • Second argument SATURATION is the saturation.

        • Third argument VALUE is the brightness.

     Argument HUE has to be a real number.  It’s value is reduced to the
     half-closed interval [0, 360).  Arguments SATURATION and VALUE have
     to be real numbers in the closed interval [0, 1].

 -- Generic Function: generic-hsv-color-coordinates color
     Return the generic HSV color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the hue, saturation, and value (brightness).


File: rs-colors.info,  Node: Generic HSL Color Space,  Next: Generic CMY Color Space,  Prev: Generic HSV Color Space,  Up: Generic Color Spaces (Color Models)

4.3.3 Generic HSL Color Space
-----------------------------

The HSL color space is a different representation of the RGB color
model.  The generic HSL color space is not associated with a particular
device.

Color coordinates are hue, saturation, and lightness.  Hue is measured
in degree angle and it is a real number in the half-closed
interval [0, 360).  Saturation and lightness are real numbers in the
closed interval [0, 1].  There is no white point.

The HSL color space is a cylindrical coordinate system but it is usually
visualized as a bicone as depicted in *note Figure 4.3:
figure:srgb-color-cube-HSL-views.  H = 0° is red, H = 120° is green, and
H = 240° is blue.  S = 0 is the centerline of the bicone with the gray
levels from black (L = 0) to white (L = 1).  S = 1 defines the surface
of the bicone.

 [image src="rs-colors-images/srgb-color-cube-HSL-views.png" ]

Figure 4.3: HSL Color Space with sRGB Colors

 -- Class: generic-hsl-color
     Color class for the generic HSL color space.

     *Class Precedence List*
     ‘generic-hsl-color’, ‘hsl-color-object’, ‘generic-color-object’,
     ‘color-object’, ...

 -- Function: make-generic-hsl-color hue saturation lightness
     Create a new color in the generic HSL color space.

        • First argument HUE is the angle of the RGB color wheel in
          degree.

        • Second argument SATURATION is the saturation.

        • Third argument LIGHTNESS is the lightness.

     Argument HUE has to be a real number.  It’s value is reduced to the
     half-closed interval [0, 360).  Arguments SATURATION and LIGHTNESS
     have to be real numbers in the closed interval [0, 1].

 -- Generic Function: generic-hsl-color-coordinates color
     Return the generic HSL color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the hue, saturation, and lightness.


File: rs-colors.info,  Node: Generic CMY Color Space,  Next: Generic CMYK Color Space,  Prev: Generic HSL Color Space,  Up: Generic Color Spaces (Color Models)

4.3.4 Generic CMY Color Space
-----------------------------

The generic CMY color space is a mathematical description of the CMY
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
and yellow primary.  Values are real numbers in the closed
interval [0, 1].  There is no white point.

 -- Class: generic-cmy-color
     Color class for the generic CMY color space.

     *Class Precedence List*
     ‘generic-cmy-color’, ‘cmy-color-object’, ‘generic-color-object’,
     ‘color-object’, ...

 -- Function: make-generic-cmy-color cyan magenta yellow &key byte-size
     Create a new color in the generic CMY color space.

        • First argument CYAN is the normalized intensity of the cyan
          primary.

        • Second argument MAGENTA is the normalized intensity of the
          magenta primary.

        • Third argument YELLOW is the normalized intensity of the
          yellow primary.

     Arguments CYAN, MAGENTA, and YELLOW have to be real numbers in the
     closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments CYAN, MAGENTA, and YELLOW have
     to be integral numbers in the range from 0 to 2^n - 1 where n is
     the number of bits.  If so, arguments CYAN, MAGENTA, and YELLOW are
     scaled accordingly.

     Example:

          (make-generic-cmy-color 3/255 80/255 193/255)
           ⇒ #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

          (make-generic-cmy-color 3 80 193 :byte-size 8)
           ⇒ #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

 -- Function: make-generic-cmy-color-from-number value &key byte-size
     Create a new color in the generic CMY color space.

        • Argument VALUE is the numerical value of the encoded CMY color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the cyan primary.

     Example:

          (make-generic-cmy-color-from-number #X0350C1)
           ⇒ #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

 -- Generic Function: generic-cmy-color-coordinates color
     Return the generic CMY color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the normalized intensities of the cyan, magenta, and
     yellow primary.


File: rs-colors.info,  Node: Generic CMYK Color Space,  Prev: Generic CMY Color Space,  Up: Generic Color Spaces (Color Models)

4.3.5 Generic CMYK Color Space
------------------------------

The generic CMYK color space is a mathematical description of the CMYK
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
yellow, and black (key) primary.  Values are real numbers in the closed
interval [0, 1].  There is no white point.

 -- Class: generic-cmyk-color
     Color class for the generic CMYK color space.

     *Class Precedence List*
     ‘generic-cmyk-color’, ‘cmyk-color-object’, ‘generic-color-object’,
     ‘color-object’, ...

 -- Function: make-generic-cmyk-color cyan magenta yellow black &key
          byte-size
     Create a new color in the generic CMYK color space.

        • First argument CYAN is the normalized intensity of the cyan
          primary.

        • Second argument MAGENTA is the normalized intensity of the
          magenta primary.

        • Third argument YELLOW is the normalized intensity of the
          yellow primary.

        • Fourth argument BLACK is the normalized intensity of the black
          primary.

     Arguments CYAN, MAGENTA, YELLOW, and BLACK have to be real numbers
     in the closed interval [0, 1].  If BLACK is zero, CYAN, MAGENTA,
     and YELLOW are converted from CMY color coordinates to CMYK color
     coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments CYAN, MAGENTA, YELLOW, and
     BLACK have to be integral numbers in the range from 0 to 2^n - 1
     where n is the number of bits.  If so, arguments CYAN, MAGENTA,
     YELLOW, and BLACK are scaled accordingly.

     Example:

          (make-generic-cmyk-color 3/255 80/255 193/255 0)
           ⇒ #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

          (make-generic-cmyk-color 3 80 193 :byte-size 8)
           ⇒ #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

 -- Function: make-generic-cmyk-color-from-number value &key byte-size
     Create a new color in the generic CMYK color space.

        • Argument VALUE is the numerical value of the encoded CMYK
          color coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{4n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the cyan primary.

     Example:

          (make-generic-cmyk-color-from-number #X0350C100)
           ⇒ #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

 -- Generic Function: generic-cmyk-color-coordinates color
     Return the generic CMYK color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the normalized intensities of the cyan, magenta, yellow,
     and black primary.


File: rs-colors.info,  Node: CIE Color Spaces,  Next: RGB Color Spaces,  Prev: Generic Color Spaces (Color Models),  Up: Reference Manual

4.4 CIE Color Spaces
====================

All CIE color spaces are absolute color spaces, that means they are
device independent.

* Menu:

* CIE RGB Color Space::
* CIE XYZ Color Space::
* CIE xyY Color Space::
* CIE L*u*v* Color Space::
* CIE L*a*b* Color Space::
* CIE L*C*h Color Space::
* CIE Standard Observers::
* CIE Standard Illuminants::


File: rs-colors.info,  Node: CIE RGB Color Space,  Next: CIE XYZ Color Space,  Prev: CIE Color Spaces,  Up: CIE Color Spaces

4.4.1 CIE RGB Color Space
-------------------------

The CIE RGB color space is the origin of all CIE color spaces.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed interval [0, 1].
The white point of the CIE RGB color space is the CIE standard
illuminant E(1).

 [image src="rs-colors-images/srgb-color-cube-CIERGB-views.png" ]

Figure 4.4: CIE RGB Color Space with sRGB Colors

 -- Class: ciergb-color
     Color class for the CIE RGB color space.

     *Class Precedence List*
     ‘ciergb-color’, ‘rgb-color-object’, ‘color-object’, ...

 -- Function: make-ciergb-color red green blue
     Create a new color in the CIE RGB color space.

        • First argument RED is the normalized intensity of the red
          primary.

        • Second argument GREEN is the normalized intensity of the green
          primary.

        • Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be real numbers in the
     closed interval [0, 1].

 -- Generic Function: ciergb-color-coordinates color
     Return the CIE RGB color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.

   ---------- Footnotes ----------

   (1) You can easily check this if you convert CIE RGB white into the
CIE xyY color space:

     (change-class (make-ciergb-color 1 1 1) 'ciexyy-color)
      ⇒ #<CIEXYY-COLOR (1/3 1/3 1)>


File: rs-colors.info,  Node: CIE XYZ Color Space,  Next: CIE xyY Color Space,  Prev: CIE RGB Color Space,  Up: CIE Color Spaces

4.4.2 CIE XYZ Color Space
-------------------------

The CIE XYZ color space is a linear transformation of the CIE RGB color
space.  The CIE XYZ color space covers all colors an average person can
experience.  Many other color spaces are defined against the CIE XYZ
color space.

Color coordinates are the X, Y, and Z tristimulus values.  The CIE XYZ
color space has no explicit white point.

 [image src="rs-colors-images/srgb-color-cube-CIEXYZ-views.png" ]

Figure 4.5: CIE XYZ Color Space with sRGB Colors

 -- Class: ciexyz-color
     Color class for the CIE XYZ color space.

     *Class Precedence List*
     ‘ciexyz-color’, ‘color-object’, ...

 -- Function: make-ciexyz-color x y z
     Create a new color in the CIE XYZ color space.

        • First argument X is the X tristimulus value.

        • Second argument Y is the Y tristimulus value.

        • Third argument Z is the Z tristimulus value.

     Arguments X, Y, and Z have to be non-negative real numbers.

 -- Generic Function: ciexyz-color-coordinates color
     Return the CIE XYZ color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the X, Y, and Z tristimulus values.

Objects of the ‘ciexyz-color’ class can be instantiated with absolute
and normalized color coordinates.  However, if you want to convert
colors from CIE XYZ color space to CIE RGB color space (or any other RGB
color space), the CIE XYZ color coordinates have to be normalized color
coordinates.  See the ‘normalize-color’ and ‘absolute-color’, for how to
convert from absolute color coordinates to normalized color coordinates
and vice versa.


File: rs-colors.info,  Node: CIE xyY Color Space,  Next: CIE L*u*v* Color Space,  Prev: CIE XYZ Color Space,  Up: CIE Color Spaces

4.4.3 CIE xyY Color Space
-------------------------

The CIE xyY color space uses the x and y chromaticity coordinates of the
CIE XYZ color space.  That is,

     x = X / (X + Y + Z)
     y = Y / (X + Y + Z)
     z = Z / (X + Y + Z)

Simple arithmetic results in the following relations:

     Y/y = X + Y + Z
       1 = x + y + z

Therefore, the inverse transformation is

     X = x Y/y
     Y = y Y/y = Y
     Z = z Y/y = (1 - x - y) Y/y

 [image src="rs-colors-images/srgb-color-cube-CIExyY-views.png" ]

Figure 4.6: CIE xyY Color Space with sRGB Colors

 -- Class: ciexyy-color
     Color class for the CIE xyY color space.

     *Class Precedence List*
     ‘ciexyy-color’, ‘color-object’, ...

 -- Function: make-ciexyy-color x* y* y
     Create a new color in the CIE xyY color space.

        • Arguments X* and Y* are the x and y chromaticity coordinates
          of the CIE XYZ color space.

        • Third argument Y is the luminance, that is the Y tristimulus
          value of the CIE XYZ color space.

 -- Generic Function: ciexyy-color-coordinates color
     Return the CIE xyY color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the x and y chromaticity coordinates and the luminance.


File: rs-colors.info,  Node: CIE L*u*v* Color Space,  Next: CIE L*a*b* Color Space,  Prev: CIE xyY Color Space,  Up: CIE Color Spaces

4.4.4 CIE L*u*v* Color Space
----------------------------

The CIE L*u*v* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*u*v* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness L* is in the range from 0 to 100.  However, values greater
than 100 are accepted, too.  The two chromaticity coordinates U* and V*
are usually in the range from -100 to +100.

CIE L*u*v* color coordinates are always relative to a white point.  This
is either the white point of the color space you are converting from or
CIE standard illuminant D50.

 [image src="rs-colors-images/srgb-color-cube-CIELuv-views.png" ]

Figure 4.7: CIE L*u*v* Color Space with sRGB Colors

 -- Variable: *cieluv-default-white-point*
     The default white point for colors in the CIE L*u*v* color space.
     Default value is the CIE 1931 D50 standard illuminant.

 -- Class: cieluv-color
     Color class for the CIE L*u*v* color space.

     *Class Precedence List*
     ‘cieluv-color’, ‘color-object’, ...

 -- Function: make-cieluv-color L* u* v* &optional white-point
     Create a new color in the CIE L*u*v* color space.

        • First argument L* is the lightness.

        • Second argument U* is the first chromaticity coordinate.

        • Third argument V* is the second chromaticity coordinate.

        • Optional fourth argument WHITE-POINT is the white point.
          Default is the value of ‘*cieluv-default-white-point*’.

 -- Generic Function: cieluv-color-coordinates color
     Return the CIE L*u*v* color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the lightness and the two chromaticity coordinates.


File: rs-colors.info,  Node: CIE L*a*b* Color Space,  Next: CIE L*C*h Color Space,  Prev: CIE L*u*v* Color Space,  Up: CIE Color Spaces

4.4.5 CIE L*a*b* Color Space
----------------------------

The CIE L*a*b* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*a*b* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness L* is in the range from 0 to 100.  However, values greater
than 100 are accepted, too.  The two chromaticity coordinates A* and B*
are usually in the range from -250 to +250 and from -100 to +100
respectively.

CIE L*a*b* color coordinates are always relative to a white point.  This
is either the white point of the color space you are converting from or
CIE standard illuminant D50.

 [image src="rs-colors-images/srgb-color-cube-CIELab-views.png" ]

Figure 4.8: CIE L*a*b* Color Space with sRGB Colors

 -- Variable: *cielab-default-white-point*
     The default white point for colors in the CIE L*a*b* color space.
     Default value is the CIE 1931 D50 standard illuminant.

 -- Class: cielab-color
     Color class for the CIE L*a*b* color space.

     *Class Precedence List*
     ‘cielab-color’, ‘color-object’, ...

 -- Function: make-cielab-color L* a* b* &optional white-point
     Create a new color in the CIE L*a*b* color space.

        • First argument L* is the lightness.

        • Second argument A* is the first chromaticity coordinate.

        • Third argument B* is the second chromaticity coordinate.

        • Optional fourth argument WHITE-POINT is the white point.
          Default is the value of ‘*cielab-default-white-point*’.

 -- Generic Function: cielab-color-coordinates color
     Return the CIE L*a*b* color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the lightness and the two chromaticity coordinates.


File: rs-colors.info,  Node: CIE L*C*h Color Space,  Next: CIE Standard Observers,  Prev: CIE L*a*b* Color Space,  Up: CIE Color Spaces

4.4.6 CIE L*C*h Color Space
---------------------------

The CIE L*C*h color space is the transformation of the CIE L*a*b* color
space from a Cartesian coordinate system into a cylindrical coordinate
system.

Color coordinates are lightness, chroma, and hue.  Lightness L* is equal
to the lightness of the CIE L*a*b* color space.  Chroma C* and hue H are
the polar coordinates, i.e.  radius and angle, of a color in the
(A*, B*) plane.

Hue is measured in degree angle; h = 0° is the positive A*-axis (red), h
= 90° is the positive B*-axis (yellow), h = 180° is the negative A*-axis
(green), and h = 270° is the negative B*-axis (blue).

CIE L*C*h color coordinates are always relative to a white point.  This
is either the white point of the color space you are converting from or
CIE standard illuminant D50.

 -- Variable: *cielch-default-white-point*
     The default white point for colors in the CIE L*C*h* color space.
     Default value is the CIE 1931 D50 standard illuminant.

 -- Class: cielch-color
     Color class for the CIE L*C*h color space.

     *Class Precedence List*
     ‘cielch-color’, ‘color-object’, ...

 -- Function: make-cielch-color L* C* h &optional white-point
     Create a new color in the CIE L*C*h color space.

        • First argument L* is the lightness.

        • Second argument C* is the chroma.

        • Third argument H is the hue.

        • Optional fourth argument WHITE-POINT is the white point.
          Default is the value of ‘*cielch-default-white-point*’.

     Arguments L* and C* have to be non-negative real numbers.  Argument
     H has to be a real number.  It’s value is reduced to the
     half-closed interval [0, 360).

 -- Generic Function: cielch-color-coordinates color
     Return the CIE L*C*h color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the lightness, chroma, and hue.


File: rs-colors.info,  Node: CIE Standard Observers,  Next: CIE Standard Illuminants,  Prev: CIE L*C*h Color Space,  Up: CIE Color Spaces

4.4.7 CIE Standard Observers
----------------------------

 -- Constant: cie-1931-standard-observer
     CIE standard observer for a 2° field of view.

     Value are the color matching functions x̄(λ), ȳ(λ), and z̄(λ).  The
     wavelength λ ranges from 380nm to 780nm in steps of 5nm.

     See the ‘*color-matching-functions*’ special variable for more
     details.

 -- Constant: cie-1964-standard-observer
     CIE standard observer for a 10° field of view.

     Value are the color matching functions x̄(λ), ȳ(λ), and z̄(λ).  The
     wavelength λ ranges from 380nm to 780nm in steps of 5nm.

     See the ‘*color-matching-functions*’ special variable for more
     details.

 -- Function: color-matching-functions wavelength
     Evaluate the color matching functions.

     The binding of the ‘*color-matching-functions*’ special variable
     defines the color matching functions x̄(λ), ȳ(λ), and z̄(λ).

        • Argument WAVELENGTH is the wavelength λ in nanometer.

     Return values are the values of the color matching functions x̄(λ),
     ȳ(λ), and z̄(λ) for the wavelength λ.

 -- Variable: *color-matching-functions*
     A list of three color matching functions.  Default is the CIE 1931
     standard observer.

     Value is an alist of cons cells of the form ‘(L . (X Y Z))’.  Key L
     is the wavelength λ in nanometer and values X, Y, and Z are the
     discrete values of the color matching functions x̄(λ), ȳ(λ), and
     z̄(λ) respectively.  The list elements have to be sorted in
     strictly increasing order of the wavelength.

     Value can also be a list of three functions, i.e.  ‘(X Y Z)’.
     where X, Y, and Z are the color matching functions x̄(λ), ȳ(λ), and
     z̄(λ) respectively.

     Use the ‘color-matching-functions’ function to evaluate the color
     matching functions.

 -- Function: cie-xy-chromaticity-of-light wavelength
     Calculate the chromaticity coordinates of a single color of light.
     These chromaticity coordinates define the border of the
     chromaticity space in a chromaticity diagram.

        • Argument WAVELENGTH is the wavelength λ of the light in
          nanometer.

     Return values are the CIE xyY color space chromaticity coordinates
     x and y as multiple values.

     The three color matching functions x̄(λ), ȳ(λ), and z̄(λ) are
     evaluated by calling the ‘color-matching-functions’ function.

 -- Function: cie-xy-chromaticity-of-black-body temperature &key from to
          by
     Calculate the chromaticity coordinates of a Planckian radiator.
     These chromaticity coordinates define the Planckian locus in a
     chromaticity diagram.

        • Argument TEMPERATURE is the temperature of the black body in
          kelvin.

        • Keyword arguments FROM, TO, and BY define the boundaries and
          step size for the wavelength λ of the light in nanometer.
          Default is 380nm, 780nm, and 5nm respectively.

     Return values are the CIE xyY color space chromaticity coordinates
     x and y as multiple values.

     The three color matching functions x̄(λ), ȳ(λ), and z̄(λ) are
     evaluated by calling the ‘color-matching-functions’ function.  The
     second radiation constant for calculating the spectral radiant
     exitance of the black body is defined by the binding of the
     ‘*second-radiation-constant*’ special variable.

 -- Variable: *second-radiation-constant*
     Second radiation constant.  Default is
     ‘codata-2018-second-radiation-constant’.

 -- Constant: cie-1931-second-radiation-constant
     Second radiation constant.

     Value used by the CIE when defining the CIE 1931 color space.

 -- Constant: codata-2018-second-radiation-constant
     Second radiation constant.

     2018 CODATA recommended value.


File: rs-colors.info,  Node: CIE Standard Illuminants,  Prev: CIE Standard Observers,  Up: CIE Color Spaces

4.4.8 CIE Standard Illuminants
------------------------------

 -- Constant: cie-1931-white-point-a
 -- Constant: cie-1931-white-point-b
 -- Constant: cie-1931-white-point-c
 -- Constant: cie-1931-white-point-d50
 -- Constant: cie-1931-white-point-d55
 -- Constant: cie-1931-white-point-d65
 -- Constant: cie-1931-white-point-d75
 -- Constant: cie-1931-white-point-e
 -- Constant: cie-1931-white-point-f1
 -- Constant: cie-1931-white-point-f2
 -- Constant: cie-1931-white-point-f3
 -- Constant: cie-1931-white-point-f4
 -- Constant: cie-1931-white-point-f5
 -- Constant: cie-1931-white-point-f6
 -- Constant: cie-1931-white-point-f7
 -- Constant: cie-1931-white-point-f8
 -- Constant: cie-1931-white-point-f9
 -- Constant: cie-1931-white-point-f10
 -- Constant: cie-1931-white-point-f11
 -- Constant: cie-1931-white-point-f12
     White points of the CIE standard illuminants for a 2° field of view
     (2° standard observer).

 -- Constant: cie-1964-white-point-a
 -- Constant: cie-1964-white-point-b
 -- Constant: cie-1964-white-point-c
 -- Constant: cie-1964-white-point-d50
 -- Constant: cie-1964-white-point-d55
 -- Constant: cie-1964-white-point-d65
 -- Constant: cie-1964-white-point-d75
 -- Constant: cie-1964-white-point-e
 -- Constant: cie-1964-white-point-f1
 -- Constant: cie-1964-white-point-f2
 -- Constant: cie-1964-white-point-f3
 -- Constant: cie-1964-white-point-f4
 -- Constant: cie-1964-white-point-f5
 -- Constant: cie-1964-white-point-f6
 -- Constant: cie-1964-white-point-f7
 -- Constant: cie-1964-white-point-f8
 -- Constant: cie-1964-white-point-f9
 -- Constant: cie-1964-white-point-f10
 -- Constant: cie-1964-white-point-f11
 -- Constant: cie-1964-white-point-f12
     White points of the CIE standard illuminants for a 10° field of
     view (10° standard observer).


File: rs-colors.info,  Node: RGB Color Spaces,  Next: Color Properties,  Prev: CIE Color Spaces,  Up: Reference Manual

4.5 RGB Color Spaces
====================

* Menu:

* sRGB Color Space::
* Adobe RGB Color Space::
* wide-gamut RGB Color Space::


File: rs-colors.info,  Node: sRGB Color Space,  Next: Adobe RGB Color Space,  Prev: RGB Color Spaces,  Up: RGB Color Spaces

4.5.1 sRGB Color Space
----------------------

 -- Class: srgb-color
     Color class for the sRGB color space.

     *Class Precedence List*
     ‘srgb-color’, ‘rgb-color-object’, ‘color-object’, ...

 -- Function: make-srgb-color red green blue &key byte-size
     Create a new color in the sRGB color space.

        • First argument RED is the normalized intensity of the red
          primary.

        • Second argument GREEN is the normalized intensity of the green
          primary.

        • Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be normalized intensity
     values in the closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-srgb-color 252/255 175/255 62/255)
           ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

          (make-srgb-color 252 175 62 :byte-size 8)
           ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-srgb-color-from-number value &key byte-size
     Create a new color in the sRGB color space.

        • Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-srgb-color-from-number #XFCAF3E)
           ⇒ #<SRGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: srgb-color-coordinates color
     Return the sRGB color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Adobe RGB Color Space,  Next: wide-gamut RGB Color Space,  Prev: sRGB Color Space,  Up: RGB Color Spaces

4.5.2 Adobe RGB Color Space
---------------------------

 -- Class: adobe-rgb-color
     Color class for the Adobe RGB color space.

     *Class Precedence List*
     ‘adobe-rgb-color’, ‘rgb-color-object’, ‘color-object’, ...

 -- Function: make-adobe-rgb-color red green blue &key byte-size
     Create a new color in the Adobe RGB color space.

        • First argument RED is the normalized intensity of the red
          primary.

        • Second argument GREEN is the normalized intensity of the green
          primary.

        • Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be normalized intensity
     values in the closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-adobe-rgb-color 252/255 175/255 62/255)
           ⇒ #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

          (make-adobe-rgb-color 252 175 62 :byte-size 8)
           ⇒ #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-adobe-rgb-color-from-number value &key byte-size
     Create a new color in the Adobe RGB color space.

        • Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-adobe-rgb-color-from-number #XFCAF3E)
           ⇒ #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: adobe-rgb-color-coordinates color
     Return the Adobe RGB color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: wide-gamut RGB Color Space,  Prev: Adobe RGB Color Space,  Up: RGB Color Spaces

4.5.3 Wide-gamut RGB Color Space
--------------------------------

 -- Class: wide-gamut-rgb-color
     Color class for the wide-gamut RGB color space.

     *Class Precedence List*
     ‘wide-gamut-rgb-color’, ‘rgb-color-object’, ‘color-object’, ...

 -- Function: make-wide-gamut-rgb-color red green blue &key byte-size
     Create a new color in the wide-gamut RGB color space.

        • First argument RED is the normalized intensity of the red
          primary.

        • Second argument GREEN is the normalized intensity of the green
          primary.

        • Third argument BLUE is the normalized intensity of the blue
          primary.

     Arguments RED, GREEN, and BLUE have to be normalized intensity
     values in the closed interval [0, 1].

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  If specified, arguments RED, GREEN, and BLUE have to be
     integral numbers in the range from 0 to 2^n - 1 where n is the
     number of bits.  If so, arguments RED, GREEN, and BLUE are scaled
     accordingly.

     Example:

          (make-wide-gamut-rgb-color 252/255 175/255 62/255)
           ⇒ #<WIDE-GAMUT-RGB-COLOR (84/85 35/51 62/255)>

          (make-wide-gamut-rgb-color 252 175 62 :byte-size 8)
           ⇒ #<WIDE-GAMUT-RGB-COLOR (84/85 35/51 62/255)>

 -- Function: make-wide-gamut-rgb-color-from-number value &key byte-size
     Create a new color in the wide-gamut RGB color space.

        • Argument VALUE is the numerical value of the encoded RGB color
          coordinates.

     Keyword argument BYTE-SIZE is the number of bits used to represent
     a primary.  Default is eight bit (one byte).  Argument VALUE has to
     be an integral number in the range from 0 to 2^{3n} - 1 where n is
     the number of bits per primary.  The most significant bits denote
     the intensity of the red primary.

     Example:

          (make-wide-gamut-rgb-color-from-number #XFCAF3E)
           ⇒ #<WIDE-GAMUT-RGB-COLOR (84/85 35/51 62/255)>

 -- Generic Function: wide-gamut-rgb-color-coordinates color
     Return the wide-gamut RGB color space coordinates of the color.

        • Argument COLOR is a color object.

     Values are the normalized intensities of the red, green, and blue
     primary.


File: rs-colors.info,  Node: Color Properties,  Next: Color Conversions,  Prev: RGB Color Spaces,  Up: Reference Manual

4.6 Color Properties
====================

 -- Generic Function: color-coordinates color
     Return the color space coordinates of the color as multiple values.

        • Argument COLOR is a color object.

 -- Generic Function: white-point color
     Return the white point of the color.

        • Argument COLOR is a color object.

     Value is the color object of the color’s white point, or nil if the
     white point is not defined or if multiple white points exist.


File: rs-colors.info,  Node: Color Conversions,  Next: Color Differences,  Prev: Color Properties,  Up: Reference Manual

4.7 Color Conversions
=====================

 -- Generic Function: change-class color color-type
     Change the class of the color object.

        • First argument COLOR is a color object.

        • Second argument COLOR-TYPE is a color data type.

     The ‘change-class’ function destructively modifies COLOR by
     converting it’s color coordinates into the color space denoted by
     COLOR-TYPE.

     Example:

          (let ((red (make-srgb-color 1 0 0)))
            (change-class red 'ciexyy-color)
            red)
           ⇒ #<CIEXYY-COLOR (0.64d0 0.33d0 ...)>

 -- Function: coerce-color color color-type
     Coerce the color object into the specified color type.

        • First argument COLOR is a color object.

        • Second argument COLOR-TYPE is a color data type.

     If argument COLOR is already a color of the requested color data
     type, return COLOR as is (no conversion).  Otherwise, return a new
     color with the color coordinates of COLOR converted into the color
     space denoted by COLOR-TYPE.

 -- Generic Function: copy-color color
     Return a shallow copy of the color.

        • Argument COLOR is a color object.

     Value is a color object with the same color coordinates as COLOR.


File: rs-colors.info,  Node: Color Differences,  Next: Input and Output,  Prev: Color Conversions,  Up: Reference Manual

4.8 Color Differences
=====================

 -- Function: cie76 first-color second-color
     Calculate the CIE76 color difference between two colors.

     Value is the Euclidean distance between the two colors in the CIE
     L*a*b* color space.  The CIE76 color difference is symmetric, i.e.
     CIE76(a,b) is equal to CIE76(b,a).

 -- Function: cie94 reference other &optional textile lightness chroma
          hue
     Calculate the CIE94 color difference between two colors.

        • First argument REFERENCE is the reference color.

        • Second argument OTHER is the other color.

        • If optional third argument TEXTILE is non-null, use parameters
          for calculating the color difference for textiles.  Default is
          to calculate the color difference for graphic arts.

        • Optional fourth to sixth argument LIGHTNESS, CHROMA, and HUE
          are the weighting factors for differences in lightness,
          chroma, and hue respectively.  Higher value means less weight.
          Default is one for all weighting factors (if TEXTILE is true,
          the default for LIGHTNESS is two).

     The CIE94 color difference is asymmetric, i.e.  CIE94(a,b) is not
     equal to CIE94(b,a).


File: rs-colors.info,  Node: Input and Output,  Next: Miscellaneous,  Prev: Color Differences,  Up: Reference Manual

4.9 Input and Output
====================

* Menu:

* Xcms Formats::
* HTML Format::
* CSS3 Formats::


File: rs-colors.info,  Node: Xcms Formats,  Next: HTML Format,  Prev: Input and Output,  Up: Input and Output

4.9.1 Xcms Formats
------------------

The syntax of a Xcms (X Color Management System) color is

     PREFIX:FIRST/SECOND/THIRD

The PREFIX part specifies the color space or format and FIRST, SECOND,
and THIRD are the color coordinates.  Below is a table with all color
spaces and corresponding Xcms prefix.

Color Space   Prefix   R5
----------------------------
CIE RGB       ‘CIERGB’
CIE XYZ       ‘CIEXYZ’ •
CIE xyY       ‘CIExyY’ •
CIE L*u*v*    ‘CIELuv’ •
CIE L*a*b*    ‘CIELab’ •
CIE L*C*h     ‘CIELCh’
generic RGB   ‘RGBi’   •
generic RGB   ‘RGB’    •

The Xcms prefix is case insensitive.

 -- Function: print-color-xcms-ciergb color &optional stream
 -- Function: print-color-xcms-ciexyz color &optional stream
 -- Function: print-color-xcms-ciexyy color &optional stream
 -- Function: print-color-xcms-cieluv color &optional stream
 -- Function: print-color-xcms-cielab color &optional stream
 -- Function: print-color-xcms-cielch color &optional stream
 -- Function: print-color-xcms-rgbi color &optional stream
 -- Function: print-color-xcms-rgb color &optional stream
     Print a color in Xcms notation.

        • First argument COLOR is a color object.

        • Optional second argument STREAM is an output stream.  Default
          is to print to ‘*standard-output*’.

     Value is the color object.

     The RGBi and RGB formats are device dependent.  Thus, you can only
     print colors in these formats if the color conversion path to the
     generic RGB color space is unambiguous.

     The RGB format prints the color coordinates as hexadecimal numbers.
     If all RGB color intensities are multiples of 1/255, it uses two
     digits.  Otherwise, it uses four digits with a precision of
     1/65535.

     Example:

          (let ((color (make-srgb-color 78 154 6 :byte-size 8)))
            (with-output-to-string (stream)
              (print-color-xcms-ciexyz color stream)))
           ⇒ "CIEXYZ:0.14729778/0.24743336/0.04172078"

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (with-output-to-string (stream)
              (print-color-xcms-rgb color stream)))
           ⇒ "RGB:4e/9a/06"

 -- Constant: color-formatter-xcms-ciergb
 -- Constant: color-formatter-xcms-ciexyz
 -- Constant: color-formatter-xcms-ciexyy
 -- Constant: color-formatter-xcms-cieluv
 -- Constant: color-formatter-xcms-cielab
 -- Constant: color-formatter-xcms-cielch
 -- Constant: color-formatter-xcms-rgbi
 -- Constant: color-formatter-xcms-rgb
     A format function for printing a color in Xcms notation.

     Value is a function which has a behavior equivalent to a function
     returned by the ‘formatter’ macro.

     Example:

          (let ((color (make-srgb-color 78 154 6 :byte-size 8)))
            (format nil color-formatter-xcms-ciexyz color))
           ⇒ "CIEXYZ:0.14729778/0.24743336/0.04172078"

 -- Function: read-color-xcms-ciergb &optional stream
 -- Function: read-color-xcms-ciexyz &optional stream
 -- Function: read-color-xcms-ciexyy &optional stream
 -- Function: read-color-xcms-cieluv &optional stream
 -- Function: read-color-xcms-cielab &optional stream
 -- Function: read-color-xcms-cielch &optional stream
 -- Function: read-color-xcms-rgbi &optional stream
 -- Function: read-color-xcms-rgb &optional stream
 -- Function: read-color-xcms &optional stream
     Read a color in Xcms notation.

        • Optional argument STREAM is an input stream.  Default is to
          read from ‘*standard-input*’.

     Value is a color object in the respective color space.

     The functions expect the respective Xcms prefix followed by a colon
     and the three color coordinates separated by a slash character.
     Leading or trailing whitespace is not ignored.  Reading stops
     immediately after the last color coordinate.  An error is signaled
     if a parse error occurs or if the file ends prematurely.

     The ‘read-color-xcms’ function is slightly different since it first
     reads the Xcms prefix and then dispatches on it.

     Example:

          (with-input-from-string (stream "RGB:4e/9a/06 junk")
            (change-class (read-color-xcms stream) 'srgb-color))
           ⇒ #<SRGB-COLOR (26/85 154/255 2/85)>


File: rs-colors.info,  Node: HTML Format,  Next: CSS3 Formats,  Prev: Xcms Formats,  Up: Input and Output

4.9.2 HTML Format
-----------------

A HTML color value is either a hexadecimal number prefixed by a hash
mark or a keyword.  This section only covers numerical color values.

 -- Function: print-color-html color &optional stream
     Print a numerical HTML color value, that is a hexadecimal number
     prefixed by a hash mark.

        • First argument COLOR is a color object.

        • Optional second argument STREAM is an output stream.  Default
          is to print to ‘*standard-output*’.

     Value is the color object.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (with-output-to-string (stream)
              (print-color-html color stream)))
           ⇒ "#4E9A06"

 -- Constant: color-formatter-html
     A format function for printing a numerical HTML color value.

     Value is a function which has a behavior equivalent to a function
     returned by the ‘formatter’ macro.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (format nil color-formatter-html color))
           ⇒ "#4E9A06"

 -- Function: read-color-html &optional stream
     Read a numerical HTML color value, that is a hexadecimal number
     prefixed by a hash mark.

        • Optional argument STREAM is an input stream.  Default is to
          read from ‘*standard-input*’.

     Value is a color object in the sRGB color space.

     The function expects a hash mark followed by a sequence of
     hexadecimal digits.  The number of hexadecimal digits has to be a
     multiple of three.  Leading or trailing whitespace is not ignored.
     Reading stops at the first non-hexadecimal digit character.  An
     error is signaled if a parse error occurs or if the file ends
     prematurely.

     Example:

          (with-input-from-string (stream "#4E9A06 junk")
            (read-color-html stream))
           ⇒ #<SRGB-COLOR (26/85 154/255 2/85)>


File: rs-colors.info,  Node: CSS3 Formats,  Prev: HTML Format,  Up: Input and Output

4.9.3 CSS3 Formats
------------------

A CSS3 (cascading style sheets, level 3) color is either a HTML color
value or a color value in functional notation.  The later has the form

     rgb(RED, GREEN, BLUE)

where RED, GREEN, and BLUE are either integers in the range from 0
to 255 or percentage values in the range from 0% to 100%.  CSS3 also
supports a functional notation for RGB colors represented in the HSL
color space.  The format is

     hsl(HUE, SATURATION, LIGHTNESS)

where HUE is the angle in degree and SATURATION and LIGHTNESS are
percentage values in the range from 0% to 100%.

 -- Function: print-color-css3-rgb color &optional stream
 -- Function: print-color-css3-hsl color &optional stream
     Print a color in CSS3 functional notation.

        • First argument COLOR is a color object.

        • Optional second argument STREAM is an output stream.  Default
          is to print to ‘*standard-output*’.

     Value is the color object.

     If all sRGB color intensities are multiples of 1/255, the RED,
     GREEN, and BLUE color intensities are printed as integers.
     Otherwise, they are printed as percentage values.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (with-output-to-string (stream)
              (print-color-css3-rgb color stream)))
           ⇒ "rgb(78, 154, 6)"

          (let ((color (make-srgb-color 0.3D0 0.6D0 0.1D0)))
            (with-output-to-string (stream)
              (print-color-css3-rgb color stream)))
           ⇒ "rgb(30.0%, 60.0%, 10.0%)"

 -- Constant: color-formatter-css3-rgb
 -- Constant: color-formatter-css3-hsl
     A format function for printing a color in CSS3 functional notation.

     Value is a function which has a behavior equivalent to a function
     returned by the ‘formatter’ macro.

     Example:

          (let ((color (make-srgb-color-from-number #X4E9A06)))
            (format nil color-formatter-css3-rgb color))
           ⇒ "rgb(78, 154, 6)"

 -- Function: read-color-css3-rgb &optional stream
 -- Function: read-color-css3-hsl &optional stream
     Read a color in CSS3 functional notation.

        • Optional argument STREAM is an input stream.  Default is to
          read from ‘*standard-input*’.

     Value is a color object in the sRGB color space.

     The functions expect a character sequence of the form
     ‘rgb(RED,GREEN,BLUE)’ or ‘hsl(HUE,SATURATION,LIGHTNESS)’
     respectively.  Leading or trailing whitespace is not ignored but
     whitespace characters are allowed around the numerical values.
     Reading stops after the closing parenthesis.  An error is signaled
     if a parse error occurs or if the file ends prematurely.

     Example:

          (with-input-from-string (stream "rgb(78, 154, 6) junk")
            (read-color-css3-rgb stream))
           ⇒ #<SRGB-COLOR (26/85 154/255 2/85)>

          (with-input-from-string (stream "rgb(30%, 60%, 10%) junk")
            (read-color-css3-rgb stream))
           ⇒ #<SRGB-COLOR (0.3d0 0.6d0 0.1d0)>

 -- Function: read-color-css3 &optional stream
     Read a CSS3 color value, i.e.  either a numerical HTML color value
     or a color in RGB or HSL functional notation.

        • Optional argument STREAM is an input stream.  Default is to
          read from ‘*standard-input*’.

     Value is a color object in the sRGB color space.

     See the ‘read-color-html’, ‘read-color-css3-rgb’, and
     ‘read-color-css3-hsl’ function for more details.


File: rs-colors.info,  Node: Miscellaneous,  Prev: Input and Output,  Up: Reference Manual

4.10 Miscellaneous
==================

 -- Generic Function: normalize-color color &key black white
     Convert from absolute color coordinates to normalized color
     coordinates.

 -- Generic Function: absolute-color color &key black white
     Convert from normalized color coordinates to absolute color
     coordinates.


File: rs-colors.info,  Node: Symbol Index,  Next: Concept Index,  Prev: Reference Manual,  Up: Top

Symbol Index
************

 [index ]
* Menu:

* *cielab-default-white-point*:          CIE L*a*b* Color Space.
                                                               (line 25)
* *cielch-default-white-point*:          CIE L*C*h Color Space.
                                                               (line 23)
* *cieluv-default-white-point*:          CIE L*u*v* Color Space.
                                                               (line 24)
* *color-matching-functions*:            CIE Standard Observers.
                                                               (line 35)
* *second-radiation-constant*:           CIE Standard Observers.
                                                               (line 89)
* absolute-color:                        Miscellaneous.        (line 10)
* adobe-rgb-color:                       Adobe RGB Color Space.
                                                               (line  6)
* adobe-rgb-color-coordinates:           Adobe RGB Color Space.
                                                               (line 61)
* change-class:                          Color Conversions.    (line  6)
* cie-1931-second-radiation-constant:    CIE Standard Observers.
                                                               (line 93)
* cie-1931-standard-observer:            CIE Standard Observers.
                                                               (line  6)
* cie-1931-white-point-a:                CIE Standard Illuminants.
                                                               (line  6)
* cie-1931-white-point-b:                CIE Standard Illuminants.
                                                               (line  7)
* cie-1931-white-point-c:                CIE Standard Illuminants.
                                                               (line  8)
* cie-1931-white-point-d50:              CIE Standard Illuminants.
                                                               (line  9)
* cie-1931-white-point-d55:              CIE Standard Illuminants.
                                                               (line 10)
* cie-1931-white-point-d65:              CIE Standard Illuminants.
                                                               (line 11)
* cie-1931-white-point-d75:              CIE Standard Illuminants.
                                                               (line 12)
* cie-1931-white-point-e:                CIE Standard Illuminants.
                                                               (line 13)
* cie-1931-white-point-f1:               CIE Standard Illuminants.
                                                               (line 14)
* cie-1931-white-point-f10:              CIE Standard Illuminants.
                                                               (line 23)
* cie-1931-white-point-f11:              CIE Standard Illuminants.
                                                               (line 24)
* cie-1931-white-point-f12:              CIE Standard Illuminants.
                                                               (line 25)
* cie-1931-white-point-f2:               CIE Standard Illuminants.
                                                               (line 15)
* cie-1931-white-point-f3:               CIE Standard Illuminants.
                                                               (line 16)
* cie-1931-white-point-f4:               CIE Standard Illuminants.
                                                               (line 17)
* cie-1931-white-point-f5:               CIE Standard Illuminants.
                                                               (line 18)
* cie-1931-white-point-f6:               CIE Standard Illuminants.
                                                               (line 19)
* cie-1931-white-point-f7:               CIE Standard Illuminants.
                                                               (line 20)
* cie-1931-white-point-f8:               CIE Standard Illuminants.
                                                               (line 21)
* cie-1931-white-point-f9:               CIE Standard Illuminants.
                                                               (line 22)
* cie-1964-standard-observer:            CIE Standard Observers.
                                                               (line 15)
* cie-1964-white-point-a:                CIE Standard Illuminants.
                                                               (line 29)
* cie-1964-white-point-b:                CIE Standard Illuminants.
                                                               (line 30)
* cie-1964-white-point-c:                CIE Standard Illuminants.
                                                               (line 31)
* cie-1964-white-point-d50:              CIE Standard Illuminants.
                                                               (line 32)
* cie-1964-white-point-d55:              CIE Standard Illuminants.
                                                               (line 33)
* cie-1964-white-point-d65:              CIE Standard Illuminants.
                                                               (line 34)
* cie-1964-white-point-d75:              CIE Standard Illuminants.
                                                               (line 35)
* cie-1964-white-point-e:                CIE Standard Illuminants.
                                                               (line 36)
* cie-1964-white-point-f1:               CIE Standard Illuminants.
                                                               (line 37)
* cie-1964-white-point-f10:              CIE Standard Illuminants.
                                                               (line 46)
* cie-1964-white-point-f11:              CIE Standard Illuminants.
                                                               (line 47)
* cie-1964-white-point-f12:              CIE Standard Illuminants.
                                                               (line 48)
* cie-1964-white-point-f2:               CIE Standard Illuminants.
                                                               (line 38)
* cie-1964-white-point-f3:               CIE Standard Illuminants.
                                                               (line 39)
* cie-1964-white-point-f4:               CIE Standard Illuminants.
                                                               (line 40)
* cie-1964-white-point-f5:               CIE Standard Illuminants.
                                                               (line 41)
* cie-1964-white-point-f6:               CIE Standard Illuminants.
                                                               (line 42)
* cie-1964-white-point-f7:               CIE Standard Illuminants.
                                                               (line 43)
* cie-1964-white-point-f8:               CIE Standard Illuminants.
                                                               (line 44)
* cie-1964-white-point-f9:               CIE Standard Illuminants.
                                                               (line 45)
* cie-xy-chromaticity-of-black-body:     CIE Standard Observers.
                                                               (line 66)
* cie-xy-chromaticity-of-light:          CIE Standard Observers.
                                                               (line 52)
* cie76:                                 Color Differences.    (line  6)
* cie94:                                 Color Differences.    (line 13)
* cielab-color:                          CIE L*a*b* Color Space.
                                                               (line 29)
* cielab-color-coordinates:              CIE L*a*b* Color Space.
                                                               (line 47)
* cielch-color:                          CIE L*C*h Color Space.
                                                               (line 27)
* cielch-color-coordinates:              CIE L*C*h Color Space.
                                                               (line 50)
* cieluv-color:                          CIE L*u*v* Color Space.
                                                               (line 28)
* cieluv-color-coordinates:              CIE L*u*v* Color Space.
                                                               (line 46)
* ciergb-color:                          CIE RGB Color Space.  (line 18)
* ciergb-color-coordinates:              CIE RGB Color Space.  (line 40)
* ciexyy-color:                          CIE xyY Color Space.  (line 27)
* ciexyy-color-coordinates:              CIE xyY Color Space.  (line 42)
* ciexyz-color:                          CIE XYZ Color Space.  (line 17)
* ciexyz-color-coordinates:              CIE XYZ Color Space.  (line 34)
* cmy-color-object:                      Abstract Color Classes.
                                                               (line 46)
* cmyk-color-object:                     Abstract Color Classes.
                                                               (line 56)
* codata-2018-second-radiation-constant: CIE Standard Observers.
                                                               (line 98)
* coerce-color:                          Color Conversions.    (line 24)
* color-coordinates:                     Color Properties.     (line  6)
* color-formatter-css3-hsl:              CSS3 Formats.         (line 50)
* color-formatter-css3-rgb:              CSS3 Formats.         (line 49)
* color-formatter-html:                  HTML Format.          (line 27)
* color-formatter-xcms-cielab:           Xcms Formats.         (line 69)
* color-formatter-xcms-cielch:           Xcms Formats.         (line 70)
* color-formatter-xcms-cieluv:           Xcms Formats.         (line 68)
* color-formatter-xcms-ciergb:           Xcms Formats.         (line 65)
* color-formatter-xcms-ciexyy:           Xcms Formats.         (line 67)
* color-formatter-xcms-ciexyz:           Xcms Formats.         (line 66)
* color-formatter-xcms-rgb:              Xcms Formats.         (line 72)
* color-formatter-xcms-rgbi:             Xcms Formats.         (line 71)
* color-matching-functions:              CIE Standard Observers.
                                                               (line 24)
* color-object:                          Abstract Color Classes.
                                                               (line  9)
* colorp:                                Color Predicates.     (line  9)
* copy-color:                            Color Conversions.    (line 36)
* generic-cmy-color:                     Generic CMY Color Space.
                                                               (line 14)
* generic-cmy-color-coordinates:         Generic CMY Color Space.
                                                               (line 70)
* generic-cmyk-color:                    Generic CMYK Color Space.
                                                               (line 14)
* generic-cmyk-color-coordinates:        Generic CMYK Color Space.
                                                               (line 76)
* generic-color-object:                  Abstract Color Classes.
                                                               (line 66)
* generic-hsl-color:                     Generic HSL Color Space.
                                                               (line 27)
* generic-hsl-color-coordinates:         Generic HSL Color Space.
                                                               (line 50)
* generic-hsv-color:                     Generic HSV Color Space.
                                                               (line 27)
* generic-hsv-color-coordinates:         Generic HSV Color Space.
                                                               (line 50)
* generic-rgb-color:                     Generic RGB Color Space.
                                                               (line 17)
* generic-rgb-color-coordinates:         Generic RGB Color Space.
                                                               (line 73)
* hsl-color-object:                      Abstract Color Classes.
                                                               (line 36)
* hsv-color-object:                      Abstract Color Classes.
                                                               (line 26)
* make-adobe-rgb-color:                  Adobe RGB Color Space.
                                                               (line 12)
* make-adobe-rgb-color-from-number:      Adobe RGB Color Space.
                                                               (line 43)
* make-cielab-color:                     CIE L*a*b* Color Space.
                                                               (line 35)
* make-cielch-color:                     CIE L*C*h Color Space.
                                                               (line 33)
* make-cieluv-color:                     CIE L*u*v* Color Space.
                                                               (line 34)
* make-ciergb-color:                     CIE RGB Color Space.  (line 24)
* make-ciexyy-color:                     CIE xyY Color Space.  (line 33)
* make-ciexyz-color:                     CIE XYZ Color Space.  (line 23)
* make-generic-cmy-color:                Generic CMY Color Space.
                                                               (line 21)
* make-generic-cmy-color-from-number:    Generic CMY Color Space.
                                                               (line 52)
* make-generic-cmyk-color:               Generic CMYK Color Space.
                                                               (line 21)
* make-generic-cmyk-color-from-number:   Generic CMYK Color Space.
                                                               (line 58)
* make-generic-hsl-color:                Generic HSL Color Space.
                                                               (line 34)
* make-generic-hsv-color:                Generic HSV Color Space.
                                                               (line 34)
* make-generic-rgb-color:                Generic RGB Color Space.
                                                               (line 24)
* make-generic-rgb-color-from-number:    Generic RGB Color Space.
                                                               (line 55)
* make-srgb-color:                       sRGB Color Space.     (line 12)
* make-srgb-color-from-number:           sRGB Color Space.     (line 42)
* make-wide-gamut-rgb-color:             wide-gamut RGB Color Space.
                                                               (line 12)
* make-wide-gamut-rgb-color-from-number: wide-gamut RGB Color Space.
                                                               (line 43)
* normalize-color:                       Miscellaneous.        (line  6)
* print-color-css3-hsl:                  CSS3 Formats.         (line 23)
* print-color-css3-rgb:                  CSS3 Formats.         (line 22)
* print-color-html:                      HTML Format.          (line  9)
* print-color-xcms-cielab:               Xcms Formats.         (line 31)
* print-color-xcms-cielch:               Xcms Formats.         (line 32)
* print-color-xcms-cieluv:               Xcms Formats.         (line 30)
* print-color-xcms-ciergb:               Xcms Formats.         (line 27)
* print-color-xcms-ciexyy:               Xcms Formats.         (line 29)
* print-color-xcms-ciexyz:               Xcms Formats.         (line 28)
* print-color-xcms-rgb:                  Xcms Formats.         (line 34)
* print-color-xcms-rgbi:                 Xcms Formats.         (line 33)
* read-color-css3:                       CSS3 Formats.         (line 88)
* read-color-css3-hsl:                   CSS3 Formats.         (line 63)
* read-color-css3-rgb:                   CSS3 Formats.         (line 62)
* read-color-html:                       HTML Format.          (line 39)
* read-color-xcms:                       Xcms Formats.         (line 92)
* read-color-xcms-cielab:                Xcms Formats.         (line 88)
* read-color-xcms-cielch:                Xcms Formats.         (line 89)
* read-color-xcms-cieluv:                Xcms Formats.         (line 87)
* read-color-xcms-ciergb:                Xcms Formats.         (line 84)
* read-color-xcms-ciexyy:                Xcms Formats.         (line 86)
* read-color-xcms-ciexyz:                Xcms Formats.         (line 85)
* read-color-xcms-rgb:                   Xcms Formats.         (line 91)
* read-color-xcms-rgbi:                  Xcms Formats.         (line 90)
* rgb-color-object:                      Abstract Color Classes.
                                                               (line 15)
* srgb-color:                            sRGB Color Space.     (line  6)
* srgb-color-coordinates:                sRGB Color Space.     (line 60)
* white-point:                           Color Properties.     (line 11)
* wide-gamut-rgb-color:                  wide-gamut RGB Color Space.
                                                               (line  6)
* wide-gamut-rgb-color-coordinates:      wide-gamut RGB Color Space.
                                                               (line 61)


File: rs-colors.info,  Node: Concept Index,  Prev: Symbol Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* absolute color space:                  The Color Data Type.  (line 34)
* Adobe RGB color space:                 Adobe RGB Color Space.
                                                               (line  6)
* CIE L*a*b* color space:                CIE L*a*b* Color Space.
                                                               (line  6)
* CIE L*C*h color space:                 CIE L*C*h Color Space.
                                                               (line  6)
* CIE L*u*v* color space:                CIE L*u*v* Color Space.
                                                               (line  6)
* CIE RGB color space:                   CIE RGB Color Space.  (line  6)
* CIE standard observer:                 CIE Standard Observers.
                                                               (line  6)
* CIE xyY color space:                   CIE xyY Color Space.  (line  6)
* CIE XYZ color space:                   CIE XYZ Color Space.  (line  6)
* CMY color model:                       Generic Color Spaces (Color Models).
                                                               (line 20)
* CMY color model <1>:                   Generic CMY Color Space.
                                                               (line  6)
* CMYK color model:                      Generic Color Spaces (Color Models).
                                                               (line 32)
* CMYK color model <1>:                  Generic CMYK Color Space.
                                                               (line  6)
* color conversion:                      Color Conversion.     (line  9)
* color coordinates:                     Color Coordinates.    (line  6)
* color coordinates <1>:                 Color Conversion.     (line 29)
* color data type:                       The Color Data Type.  (line  6)
* color format:                          Input and Output.     (line  6)
* color matching functions:              CIE Standard Observers.
                                                               (line  6)
* color model:                           The Color Data Type.  (line 14)
* color model <1>:                       Generic Color Spaces (Color Models).
                                                               (line  6)
* color model, CMY:                      Generic Color Spaces (Color Models).
                                                               (line 20)
* color model, CMY <1>:                  Generic CMY Color Space.
                                                               (line  6)
* color model, CMYK:                     Generic Color Spaces (Color Models).
                                                               (line 32)
* color model, CMYK <1>:                 Generic CMYK Color Space.
                                                               (line  6)
* color model, RGB:                      Generic Color Spaces (Color Models).
                                                               (line 15)
* color model, RGB <1>:                  Generic RGB Color Space.
                                                               (line  6)
* color names:                           Color Dictionaries.   (line  6)
* color space, absolute:                 The Color Data Type.  (line 34)
* color space, Adobe RGB:                Adobe RGB Color Space.
                                                               (line  6)
* color space, CIE L*a*b*:               CIE L*a*b* Color Space.
                                                               (line  6)
* color space, CIE L*C*h:                CIE L*C*h Color Space.
                                                               (line  6)
* color space, CIE L*u*v*:               CIE L*u*v* Color Space.
                                                               (line  6)
* color space, CIE RGB:                  CIE RGB Color Space.  (line  6)
* color space, CIE xyY:                  CIE xyY Color Space.  (line  6)
* color space, CIE XYZ:                  CIE XYZ Color Space.  (line  6)
* color space, device dependent:         The Color Data Type.  (line 55)
* color space, HSB:                      Generic HSV Color Space.
                                                               (line  6)
* color space, HSL:                      Generic HSL Color Space.
                                                               (line  6)
* color space, HSV:                      Generic HSV Color Space.
                                                               (line  6)
* color space, sRGB:                     sRGB Color Space.     (line  6)
* color space, wide-gamut RGB:           wide-gamut RGB Color Space.
                                                               (line  6)
* converting colors:                     Color Conversion.     (line  9)
* coordinates, color:                    Color Coordinates.    (line  6)
* coordinates, color <1>:                Color Conversion.     (line 29)
* creating colors:                       Creating Color Objects.
                                                               (line  6)
* CSS3 format:                           CSS3 Formats.         (line  6)
* data type, color:                      The Color Data Type.  (line  6)
* device dependent color space:          The Color Data Type.  (line 55)
* formatted I/O:                         Input and Output.     (line  6)
* HSB color space:                       Generic HSV Color Space.
                                                               (line  6)
* HSL color space:                       Generic HSL Color Space.
                                                               (line  6)
* HSV color space:                       Generic HSV Color Space.
                                                               (line  6)
* HTML format:                           HTML Format.          (line  6)
* making colors:                         Creating Color Objects.
                                                               (line  6)
* named colors:                          Color Dictionaries.   (line  6)
* printing colors:                       Input and Output.     (line  6)
* reading colors:                        Input and Output.     (line  6)
* RGB color model:                       Generic Color Spaces (Color Models).
                                                               (line 15)
* RGB color model <1>:                   Generic RGB Color Space.
                                                               (line  6)
* sRGB color space:                      sRGB Color Space.     (line  6)
* white point:                           White Point.          (line  6)
* white point <1>:                       CIE Standard Illuminants.
                                                               (line 26)
* white point <2>:                       CIE Standard Illuminants.
                                                               (line 49)
* white point, CIE standard illuminant:  CIE Standard Illuminants.
                                                               (line  6)
* wide-gamut RGB color space:            wide-gamut RGB Color Space.
                                                               (line  6)
* Xcms format:                           Xcms Formats.         (line  6)



Tag Table:
Node: Top633
Ref: ref;sRGB1297
Ref: ref;Adobe RGB1408
Ref: ref;Xcms1538
Ref: ref;HTML1639
Ref: ref;CSS31701
Node: Introduction1750
Node: Installation2515
Node: User's Guide2805
Node: The Color Data Type3111
Node: Creating Color Objects4812
Node: Color Coordinates7440
Node: White Point8029
Node: Color Conversion8324
Ref: figure:rs-colors-conversion8488
Node: External Representations12118
Node: Color Dictionaries13096
Node: Reference Manual14909
Node: Color Predicates15293
Ref: function;rs-colors;colorp15598
Node: Abstract Color Classes15673
Ref: class;rs-colors;color-object15954
Ref: class;rs-colors;rgb-color-object16095
Ref: class;rs-colors;hsv-color-object16405
Ref: class;rs-colors;hsl-color-object16770
Ref: class;rs-colors;cmy-color-object17126
Ref: class;rs-colors;cmyk-color-object17441
Ref: class;rs-colors;generic-color-object17772
Node: Generic Color Spaces (Color Models)17954
Node: Generic RGB Color Space19767
Ref: figure:srgb-color-cube-RGB-views20301
Ref: class;rs-colors;generic-rgb-color20413
Ref: function;rs-colors;make-generic-rgb-color20634
Ref: function;rs-colors;make-generic-rgb-color-from-number21683
Ref: generic-function;rs-colors;generic-rgb-color-coordinates22366
Node: Generic HSV Color Space22624
Ref: figure:srgb-color-cube-HSV-views23660
Ref: class;rs-colors;generic-hsv-color23772
Ref: function;rs-colors;make-generic-hsv-color23993
Ref: generic-function;rs-colors;generic-hsv-color-coordinates24513
Node: Generic HSL Color Space24747
Ref: figure:srgb-color-cube-HSL-views25731
Ref: class;rs-colors;generic-hsl-color25843
Ref: function;rs-colors;make-generic-hsl-color26064
Ref: generic-function;rs-colors;generic-hsl-color-coordinates26595
Node: Generic CMY Color Space26820
Ref: class;rs-colors;generic-cmy-color27349
Ref: function;rs-colors;make-generic-cmy-color27570
Ref: function;rs-colors;make-generic-cmy-color-from-number28645
Ref: generic-function;rs-colors;generic-cmy-color-coordinates29329
Node: Generic CMYK Color Space29592
Ref: class;rs-colors;generic-cmyk-color30106
Ref: function;rs-colors;make-generic-cmyk-color30331
Ref: function;rs-colors;make-generic-cmyk-color-from-number31671
Ref: generic-function;rs-colors;generic-cmyk-color-coordinates32363
Node: CIE Color Spaces32635
Node: CIE RGB Color Space33126
Ref: figure:srgb-color-cube-CIERGB-views33594
Ref: class;rs-colors;ciergb-color33713
Ref: function;rs-colors;make-ciergb-color33887
Ref: generic-function;rs-colors;ciergb-color-coordinates34361
Ref: CIE RGB Color Space-Footnote-134646
Node: CIE XYZ Color Space34838
Ref: figure:srgb-color-cube-CIEXYZ-views35362
Ref: class;rs-colors;ciexyz-color35481
Ref: function;rs-colors;make-ciexyz-color35631
Ref: generic-function;rs-colors;ciexyz-color-coordinates35963
Node: CIE xyY Color Space36635
Ref: figure:srgb-color-cube-CIExyY-views37211
Ref: class;rs-colors;ciexyy-color37330
Ref: function;rs-colors;make-ciexyy-color37480
Ref: generic-function;rs-colors;ciexyy-color-coordinates37803
Node: CIE L*u*v* Color Space38039
Ref: figure:srgb-color-cube-CIELuv-views38836
Ref: variable;rs-colors;*cieluv-default-white-point*38958
Ref: class;rs-colors;cieluv-color39133
Ref: function;rs-colors;make-cieluv-color39286
Ref: generic-function;rs-colors;cieluv-color-coordinates39734
Node: CIE L*a*b* Color Space39969
Ref: figure:srgb-color-cube-CIELab-views40803
Ref: variable;rs-colors;*cielab-default-white-point*40925
Ref: class;rs-colors;cielab-color41100
Ref: function;rs-colors;make-cielab-color41253
Ref: generic-function;rs-colors;cielab-color-coordinates41701
Node: CIE L*C*h Color Space41936
Ref: variable;rs-colors;*cielch-default-white-point*42891
Ref: class;rs-colors;cielch-color43066
Ref: function;rs-colors;make-cielch-color43218
Ref: generic-function;rs-colors;cielch-color-coordinates43787
Node: CIE Standard Observers44001
Ref: constant;rs-colors;cie-1931-standard-observer44201
Ref: constant;rs-colors;cie-1964-standard-observer44525
Ref: function;rs-colors;color-matching-functions44850
Ref: variable;rs-colors;*color-matching-functions*45284
Ref: function;rs-colors;cie-xy-chromaticity-of-light46038
Ref: function;rs-colors;cie-xy-chromaticity-of-black-body46619
Ref: variable;rs-colors;*second-radiation-constant*47608
Ref: constant;rs-colors;cie-1931-second-radiation-constant47745
Ref: constant;rs-colors;codata-2018-second-radiation-constant47895
Node: CIE Standard Illuminants48017
Ref: constant;rs-colors;cie-1931-white-point-a48191
Ref: constant;rs-colors;cie-1931-white-point-b48191
Ref: constant;rs-colors;cie-1931-white-point-c48191
Ref: constant;rs-colors;cie-1931-white-point-d5048191
Ref: constant;rs-colors;cie-1931-white-point-d5548191
Ref: constant;rs-colors;cie-1931-white-point-d6548191
Ref: constant;rs-colors;cie-1931-white-point-d7548191
Ref: constant;rs-colors;cie-1931-white-point-e48191
Ref: constant;rs-colors;cie-1931-white-point-f148191
Ref: constant;rs-colors;cie-1931-white-point-f248191
Ref: constant;rs-colors;cie-1931-white-point-f348191
Ref: constant;rs-colors;cie-1931-white-point-f448191
Ref: constant;rs-colors;cie-1931-white-point-f548191
Ref: constant;rs-colors;cie-1931-white-point-f648191
Ref: constant;rs-colors;cie-1931-white-point-f748191
Ref: constant;rs-colors;cie-1931-white-point-f848191
Ref: constant;rs-colors;cie-1931-white-point-f948191
Ref: constant;rs-colors;cie-1931-white-point-f1048191
Ref: constant;rs-colors;cie-1931-white-point-f1148191
Ref: constant;rs-colors;cie-1931-white-point-f1248191
Ref: constant;rs-colors;cie-1964-white-point-a49059
Ref: constant;rs-colors;cie-1964-white-point-b49059
Ref: constant;rs-colors;cie-1964-white-point-c49059
Ref: constant;rs-colors;cie-1964-white-point-d5049059
Ref: constant;rs-colors;cie-1964-white-point-d5549059
Ref: constant;rs-colors;cie-1964-white-point-d6549059
Ref: constant;rs-colors;cie-1964-white-point-d7549059
Ref: constant;rs-colors;cie-1964-white-point-e49059
Ref: constant;rs-colors;cie-1964-white-point-f149059
Ref: constant;rs-colors;cie-1964-white-point-f249059
Ref: constant;rs-colors;cie-1964-white-point-f349059
Ref: constant;rs-colors;cie-1964-white-point-f449059
Ref: constant;rs-colors;cie-1964-white-point-f549059
Ref: constant;rs-colors;cie-1964-white-point-f649059
Ref: constant;rs-colors;cie-1964-white-point-f749059
Ref: constant;rs-colors;cie-1964-white-point-f849059
Ref: constant;rs-colors;cie-1964-white-point-f949059
Ref: constant;rs-colors;cie-1964-white-point-f1049059
Ref: constant;rs-colors;cie-1964-white-point-f1149059
Ref: constant;rs-colors;cie-1964-white-point-f1249059
Node: RGB Color Spaces49929
Node: sRGB Color Space50182
Ref: class;rs-colors;srgb-color50356
Ref: function;rs-colors;make-srgb-color50523
Ref: function;rs-colors;make-srgb-color-from-number51545
Ref: generic-function;rs-colors;srgb-color-coordinates52200
Node: Adobe RGB Color Space52444
Ref: class;rs-colors;adobe-rgb-color52638
Ref: function;rs-colors;make-adobe-rgb-color52820
Ref: function;rs-colors;make-adobe-rgb-color-from-number53872
Ref: generic-function;rs-colors;adobe-rgb-color-coordinates54547
Node: wide-gamut RGB Color Space54801
Ref: class;rs-colors;wide-gamut-rgb-color54980
Ref: function;rs-colors;make-wide-gamut-rgb-color55177
Ref: function;rs-colors;make-wide-gamut-rgb-color-from-number56259
Ref: generic-function;rs-colors;wide-gamut-rgb-color-coordinates56954
Node: Color Properties57218
Ref: generic-function;rs-colors;color-coordinates57384
Ref: generic-function;rs-colors;white-point57551
Node: Color Conversions57824
Ref: generic-function;common-lisp;change-class57993
Ref: function;rs-colors;coerce-color58540
Ref: generic-function;rs-colors;copy-color59009
Node: Color Differences59209
Ref: function;rs-colors;cie7659378
Ref: function;rs-colors;cie9459670
Node: Input and Output60574
Node: Xcms Formats60797
Ref: function;rs-colors;print-color-xcms-ciergb61554
Ref: function;rs-colors;print-color-xcms-ciexyz61554
Ref: function;rs-colors;print-color-xcms-ciexyy61554
Ref: function;rs-colors;print-color-xcms-cieluv61554
Ref: function;rs-colors;print-color-xcms-cielab61554
Ref: function;rs-colors;print-color-xcms-cielch61554
Ref: function;rs-colors;print-color-xcms-rgbi61554
Ref: function;rs-colors;print-color-xcms-rgb61554
Ref: function;rs-colors;color-formatter-xcms-ciergb63126
Ref: function;rs-colors;color-formatter-xcms-ciexyz63126
Ref: function;rs-colors;color-formatter-xcms-ciexyy63126
Ref: function;rs-colors;color-formatter-xcms-cieluv63126
Ref: function;rs-colors;color-formatter-xcms-cielab63126
Ref: function;rs-colors;color-formatter-xcms-cielch63126
Ref: function;rs-colors;color-formatter-xcms-rgbi63126
Ref: function;rs-colors;color-formatter-xcms-rgb63126
Ref: function;rs-colors;read-color-xcms-ciergb63834
Ref: function;rs-colors;read-color-xcms-ciexyz63834
Ref: function;rs-colors;read-color-xcms-ciexyy63834
Ref: function;rs-colors;read-color-xcms-cieluv63834
Ref: function;rs-colors;read-color-xcms-cielab63834
Ref: function;rs-colors;read-color-xcms-cielch63834
Ref: function;rs-colors;read-color-xcms-rgbi63834
Ref: function;rs-colors;read-color-xcms-rgb63834
Ref: function;rs-colors;read-color-xcms63834
Node: HTML Format65193
Ref: function;rs-colors;print-color-html65478
Ref: constant;rs-colors;color-formatter-html66041
Ref: function;rs-colors;read-color-html66417
Node: CSS3 Formats67260
Ref: function;rs-colors;print-color-css3-rgb67944
Ref: function;rs-colors;print-color-css3-hsl67944
Ref: constant;rs-colors;color-formatter-css3-rgb68917
Ref: constant;rs-colors;color-formatter-css3-hsl68917
Ref: function;rs-colors;read-color-css3-rgb69355
Ref: function;rs-colors;read-color-css3-hsl69355
Ref: function;rs-colors;read-color-css370414
Node: Miscellaneous70883
Ref: generic-function;rs-colors;normalize-color71016
Ref: generic-function;rs-colors;absolute-color71161
Node: Symbol Index71305
Node: Concept Index88772

End Tag Table


Local Variables:
coding: utf-8
End:
