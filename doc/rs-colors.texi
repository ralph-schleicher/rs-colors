\input texinfo.tex

@c %**start of header
@setfilename rs-colors.info
@settitle rs-colors

@set EDITION 1 (draft)
@set UPDATED 2019-03-06

@include package.texi

@syncodeindex vr fn
@syncodeindex tp fn
@syncodeindex ky cp
@syncodeindex pg cp

@ifinfo
@paragraphindent 0
@end ifinfo

@iftex
@finalout
@paragraphindent 1
@afourpaper
@end iftex

@setchapternewpage odd
@allowcodebreaks false

@include rs-texinfo.texi

@macro interval {RANGE}
interval@tie{}@w{@math{\RANGE\}}
@end macro

@macro range {FROM, TO}
range from@tie{}@w{@math{\FROM\}} to@tie{}@w{@math{\TO\}}
@end macro
@c %**end of header

@copying
This is edition @value{EDITION}, last updated @value{UPDATED}, of
@cite{@sc{rs-colors} -- A Color Data Type for Common Lisp}, for
@sc{rs-colors} version @value{VERSION}.

@quotation
Copyright @copyright{} 2014 Ralph Schleicher

Permission is granted to make and distribute verbatim copies of this
manual, provided the copyright notice and this permission notice are
preserved on all copies.
@end quotation

Please report any errors in this manual to @email{@value{ADDRESS}}.
@end copying

@dircategory Libraries
@direntry
* rs-colors: (rs-colors).       A color data type for Common Lisp.
@end direntry

@ifnothtml
@titlepage
@title @sc{rs-colors}
@subtitle A Color Data Type for Common Lisp

@author Ralph Schleicher

@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c Table of contents.
@contents
@end ifnothtml

@ifnottex
@node Top, Introduction, (dir), (dir)
@top @sc{rs-colors}

@insertcopying
@end ifnottex

@menu
* Introduction::
* Installation::
* User's Guide::
* Reference Manual::
* Symbol Index::
@end menu


@chapheading References

@table @asis
@anchor {ref;HTML}
@item [HTML]
@w{@uref{http://www.w3.org/TR/1999/REC-html401-19991224}}

@anchor {ref;sRGB}
@item [sRGB]
@w{@uref{http://www.w3.org/Graphics/Color/sRGB.html}}@*
@w{@uref{http://www.color.org/chardata/rgb/srgb.xalter}}

@anchor {ref;Adobe RGB}
@item [Adobe RGB]
Adobe RGB (1998) Color Image Encoding, Version 2005-05@*
@w{@uref{http://www.color.org/chardata/rgb/adobergb.xalter}}
@end table


@node Introduction, Installation, Top, Top
@chapter Introduction

A color is either associated with a color model or a color space.  Two
color models are in widespread use with computers:

@itemize
@item
The additive RGB color model with the primary colors red, green, and
blue.

@item
The subtractive CMY color model with the primary colors cyan, magenta,
and yellow.
@end itemize

The RGB color model is the usual color model for computer displays.  If
the color intensity of all primary colors is zero, that means ``off'',
the display appears ``black''.  Otherwise, if the color intensity of all
primary colors is one, that means ``on'', the display appears ``white''.

The CMY color model is the usual color model for paper printers.  If the
color intensity of all primary colors is zero, that means ``off'', the
paper appears ``white''.  Otherwise, if the color intensity of all
primary colors is one, that means ``on'', the paper appears ``black''.

Theoretically, a RGB tuple @w{@math{(R, G, B)}} and a CMY tuple
@w{@math{(C, M, Y)}} are related to each other via the simple equations

@ifinfo
@display
C = 1 - R
M = 1 - G
Y = 1 - B
@end display
@end ifinfo
@iftex
@tex
$$\eqalign{%
C &= 1 - R\cr
M &= 1 - G\cr
Y &= 1 - B\cr
}$$
@end tex

@noindent
and

@ifinfo
@display
R = 1 - C
G = 1 - M
B = 1 - Y
@end display
@end ifinfo
@iftex
@tex
$$\eqalign{%
R &= 1 - C\cr
G &= 1 - M\cr
B &= 1 - Y\cr
}$$
@end tex
@end iftex

The CMYK color model is an extension of the CMY color model to save ink.
Theoretically, a CMY tuple @w{@math{(C, M, Y)}} and a CMYK quadruple
@w{@math{(c, m, y, k)}} can be related to each other via the equations

@ifinfo
@display
k = min(C, M, Y)
c = (C - k) / (1 - k)
m = (M - k) / (1 - k)
y = (Y - k) / (1 - k)
@end display
@end ifinfo
@iftex
@tex
$$\eqalign{%
k &= \min(C, M, Y)\cr
c &= {C - k\over 1 - k}\cr
m &= {M - k\over 1 - k}\cr
y &= {Y - k\over 1 - k}\cr
}$$
@end tex
@end iftex

@noindent
and

@ifinfo
@display
C = min(1, c (1 - k) + k)
M = min(1, m (1 - k) + k)
Y = min(1, y (1 - k) + k)
@end display
@end ifinfo
@iftex
@tex
$$\eqalign{%
C &= \min(1, c\cdot(1 - k) + k)\cr
M &= \min(1, m\cdot(1 - k) + k)\cr
Y &= \min(1, y\cdot(1 - k) + k)\cr
}$$
@end tex
@end iftex


@node Installation, User's Guide, Introduction, Top
@chapter Installation

These installation instructions assume that you have a working
@uref{https://www.quicklisp.org, Quicklisp} installation.

To install @sc{rs-colors}, download the source code from
@uref{https://github.com/ralph-schleicher/rs-colors.git, GitHub}.
I recommend cloning the @sc{rs-colors} Git repository into the
@w{@file{local-projects}} folder of your Quicklisp installation.
You can do so by evaluating the following form.

@lisp
@group
(let ((repo "https://github.com/ralph-schleicher/rs-colors.git")
      (out (merge-pathnames (make-pathname :directory '(:relative
                                                        "local-projects"
                                                        "rs-colors"))
                            ql:*quicklisp-home*)))
  (uiop:run-program (list "git" "clone" "-q" repo (namestring out))))
@end group
@end lisp

@noindent
After that, you can load @sc{rs-colors} as usual.

@lisp
@group
(ql:quickload :rs-colors)
(use-package :rs-colors)
@end group
@end lisp

@noindent
That's it.


@node User's Guide, Reference Manual, Installation, Top
@chapter User's Guide

@menu
* The Color Data Type::
* Creating Color Objects::
* Color Coordinates::
* White Point::
* Color Conversion::
* Color Dictionaries::
@end menu


@node The Color Data Type, Creating Color Objects, User's Guide, User's Guide
@section The Color Data Type

First of all, there is not @emph{one} color data type.  Instead, every
color is an instance of a particular color class.  All color classes are
sub-classes of the abstract @classref{rs-colors, color-object} class.
The built-in color classes are listed in the following tables.

@heading Color Classes for Color Models

@table @asis
@item @classref{rs-colors, generic-rgb-color}
Mathematical description of the RGB color model.

@item @classref{rs-colors, generic-hsv-color}
Mathematical description of the HSV color space.  The HSV color space is
a different representation of the RGB color model.

@item @classref{rs-colors, generic-hsl-color}
Mathematical description of the HSL color space.  The HSL color space is
a different representation of the RGB color model.

@item @classref{rs-colors, generic-cmy-color}
Mathematical description of the CMY color model.

@item @classref{rs-colors, generic-cmyk-color}
Mathematical description of the CMYK color model.
@end table

@heading Color Classes for Absolute Color Spaces

@table @asis
@item @classref{rs-colors, cie-rgb-color}
The CIE RGB color space.

@item @classref{rs-colors, cie-xyz-color}
The CIE XYZ color space.

@item @classref{rs-colors, cie-xyy-color}
The CIE xyY color space.

@item @classref{rs-colors, cie-luv-color}
The CIE L*u*v* color space.

@item @classref{rs-colors, cie-lab-color}
The CIE L*a*b* color space.

@item @classref{rs-colors, cie-lch-color}
The CIE L*C*h color space.
@end table

@heading Color Classes for Device Dependent Color Spaces

@table @asis
@item @classref{rs-colors, srgb-color}
The sRGB color space.

@item @classref{rs-colors, adobe-rgb-color}
The Adobe RGB color space.
@end table


@node Creating Color Objects, Color Coordinates, The Color Data Type, User's Guide
@section Creating Color Objects

Colors are instantiated by calling a constructor function.  Constructor
arguments are usually the color coordinates in the respective color
space.  To create, for example, a color in the sRGB color space, say

@lisp
@group
(make-srgb-color 252/255 175/255 62/255)
 @result{} #<SRGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp

Many color coordinates have to be expressed as intensity values, that is
values in the range from zero to one inclusive.  That's the reason why
the sRGB color coordinates in the above example are specified as
rational numbers.

Some constructors accept a @code{:byte-size} keyword argument.  This is
useful if the scale factor is equal for all color coordinates.  With
that we can rewrite the above example as

@lisp
@group
(make-srgb-color 252 175 62 :byte-size 8)
 @result{} #<SRGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp

As you can see, the resulting color coordinates are equal.  Another
common case is to encode the color coordinates in a single integral
number.  Again, the @code{:byte-size} keyword argument specifies how
many bits are used to encode a single color coordinate.  Thus,

@lisp
@group
(make-srgb-color-from-number #XFCAF3E :byte-size 8)
 @result{} #<SRGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp

@noindent
results in the same color as before.

@noindent
The built-in constructors are listed in the following table.

@table @asis
@item @funref{rs-colors, make-generic-rgb-color}
@itemx @funref{rs-colors, make-generic-rgb-color-from-number}
Create a generic RGB color object.

@item @funref{rs-colors, make-generic-hsv-color}
Create a generic HSV color object.

@item @funref{rs-colors, make-generic-hsl-color}
Create a generic HSL color object.

@item @funref{rs-colors, make-generic-cmy-color}
@itemx @funref{rs-colors, make-generic-cmy-color-from-number}
Create a generic CMY color object.

@item @funref{rs-colors, make-generic-cmyk-color}
@itemx @funref{rs-colors, make-generic-cmyk-color-from-number}
Create a generic CMYK color object.
@end table

@table @asis
@item @funref{rs-colors, make-cie-rgb-color}
Create a CIE RGB color object.

@item @funref{rs-colors, make-cie-xyz-color}
Create a CIE XYZ color object.

@item @funref{rs-colors, make-cie-xyy-color}
Create a CIE xyY color object.

@item @funref{rs-colors, make-cie-luv-color}
Create a CIE L*u*v* color object.

@item @funref{rs-colors, make-cie-lab-color}
Create a CIE L*a*b* color object.

@item @funref{rs-colors, make-cie-lch-color}
Create a CIE L*C*h color object.
@end table

@table @asis
@item @funref{rs-colors, make-srgb-color}
@itemx @funref{rs-colors, make-srgb-color-from-number}
Create a sRGB color object.

@item @funref{rs-colors, make-adobe-rgb-color}
@itemx @funref{rs-colors, make-adobe-rgb-color-from-number}
Create an Adobe RGB color object.
@end table


@node Color Coordinates, White Point, Creating Color Objects, User's Guide
@section Color Coordinates

Use the @genericref{rs-colors, color-coordinates} function to get the
color coordinates of a color.

@lisp
@group
(let ((color (make-srgb-color 252 175 62 :byte-size 8)))
  ;; @r{We know that @var{color} is an RGB color.}
  (multiple-value-bind (r g b)
      (color-coordinates color)
    (list r g b)))
 @result{} (84/85 35/51 62/255)
@end group
@end lisp

A more practical way to get the color coordinates of a color is
described in @ref{Color Conversion}.


@node White Point, Color Conversion, Color Coordinates, User's Guide
@section White Point

A device dependent color space usually has a @dfn{white point}.  If so,
the @genericref{rs-colors, white-point} function returns a color object
of this white point.


@node Color Conversion, Color Dictionaries, White Point, User's Guide
@section Color Conversion

@float Figure,figure:rs-colors-conversion
@image{rs-colors-conversion,4in,}
@end float

@ref{figure:rs-colors-conversion} depicts the implemented color
conversions.  The nice thing about @sc{rs-colors} is that all these
color conversions can be performed with the @code{change-class}
function.

@lisp
@group
(let ((color (make-srgb-color 252 175 62 :byte-size 8)))
  (values (change-class color 'generic-cmyk-color) color))
 @result{} #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
 @result{} #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
@end group
@end lisp

If you wish to keep the original color object unchanged, use the
@code{coerce-color} function.

@lisp
@group
(let ((color (make-srgb-color 252 175 62 :byte-size 8)))
  (values (coerce-color color 'generic-cmyk-color) color))
 @result{} #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
 @result{} #<SRGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp

The @code{coerce-color} function only creates a copy of the color if the
color object is not already of the correct type.

If you only need the color coordinates, you can call one of the
following functions to get them.

@table @asis
@item @genericref{rs-colors, generic-rgb-color-coordinates}
@item @genericref{rs-colors, generic-hsv-color-coordinates}
@item @genericref{rs-colors, generic-hsl-color-coordinates}
@item @genericref{rs-colors, generic-cmy-color-coordinates}
@item @genericref{rs-colors, generic-cmyk-color-coordinates}
@end table

@table @asis
@item @genericref{rs-colors, cie-rgb-color-coordinates}
@item @genericref{rs-colors, cie-xyz-color-coordinates}
@item @genericref{rs-colors, cie-xyy-color-coordinates}
@item @genericref{rs-colors, cie-luv-color-coordinates}
@item @genericref{rs-colors, cie-lab-color-coordinates}
@item @genericref{rs-colors, cie-lch-color-coordinates}
@end table

@table @asis
@item @genericref{rs-colors, srgb-color-coordinates}
@item @genericref{rs-colors, adobe-rgb-color-coordinates}
@end table


@node Color Dictionaries,  , Color Conversion, User's Guide
@section Color Dictionaries

The @sc{rs-colors} software distribution provides several packages with
predefined named colors.  The recommended way to use these packages is
to load it, for example, with QuickLisp.  Then you should refer to the
named colors via the package prefix to avoid name clashes.

@lisp
@group
;; @r{Load a color dictionary.}
(ql:quickload :rs-colors-html)
@end group

@group
;; @r{Use a named color.}
(format nil color-formatter-css3-rgb html-color:green)
 @result{} "rgb(0, 128, 0)"
@end group
@end lisp

@noindent
Below is a list of all package prefixes together with their meaning.

@table @asis
@item @code{rs-colors-x11}, @code{x11-color}
X11 color names,
@samp{@w{(ql:quickload :rs-colors-x11)}}.@*
See @uref{https://en.wikipedia.org/wiki/X11_color_names}.

@item @code{rs-colors-html}, @code{html-color}
HTML basic colors,
@samp{@w{(ql:quickload :rs-colors-html)}}.@*
See @uref{https://www.w3.org/TR/css3-color/#html4}.

@item @code{rs-colors-svg}, @code{svg-color}
SVG color names,
@samp{@w{(ql:quickload :rs-colors-svg)}}.@*
See @uref{https://www.w3.org/TR/css3-color/#svg-color}.

@item @code{rs-colors-ral}, @code{ral-color}
RAL Classic color names,
@samp{@w{(ql:quickload :rs-colors-ral)}}.@*
See @uref{https://www.ral-farben.de}.

@item @code{rs-colors-ral-design}, @code{ral-design-color}
RAL Design color names,
@samp{@w{(ql:quickload :rs-colors-ral-design)}}.@*
See @uref{https://www.ral-farben.de}.

@item @code{rs-colors-tango}, @code{tango-color}
Tango desktop project colors,
@samp{@w{(ql:quickload :rs-colors-tango)}}.@*
See @uref{http://tango.freedesktop.org/Tango_Icon_Theme_Guidelines}.

@item @code{rs-colors-material-io}, @code{material-io-color}
Material design color palette,
@samp{@w{(ql:quickload :rs-colors-material-io)}}.@*
See @uref{https://material.io/guidelines/style/color.html}.
@end table


@node Reference Manual, Symbol Index, User's Guide, Top
@chapter Reference Manual

@menu
* Color Predicates::
* Abstract Color Classes::
* Generic Color Spaces (Color Models)::
* CIE Color Spaces::
* RGB Color Spaces::
* Color Properties::
* Color Conversions::
* Input and Output::
* Miscellaneous::
@end menu


@node Color Predicates, Abstract Color Classes, Reference Manual, Reference Manual
@section Color Predicates

Use the @code{colorp} function to check whether or not an object is a
color.  This covers all color classes documented in this manual.

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;colorp}
@deffn {Function} {colorp} @w{object}
Return true if @var{object} is a color object.
@end deffn


@node Abstract Color Classes, Generic Color Spaces (Color Models), Color Predicates, Reference Manual
@section Abstract Color Classes

The color classes documented in this section are merely used as
superclasses.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;color-object}
@deftp {Class} {color-object}
Base class for a color.

@classprecedencelist
@classref{rs-colors, color-object},
@code{standard-object},
@code{t}.
@end deftp

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;rgb-color-object}
@deftp {Class} {rgb-color-object}
Color class for a RGB color space.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed
@interval{[0, 1]}.

@classprecedencelist
@classref{rs-colors, rgb-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;hsv-color-object}
@deftp {Class} {hsv-color-object}
Color class for a HSV/HSB color space.

Color coordinates are hue, saturation, and value (brightness).  Hue is a
real number in the half-closed @interval{[0, 360)}.
Saturation and value are real numbers in the closed
@interval{[0, 1]}.

@classprecedencelist
@classref{rs-colors, hsv-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;hsl-color-object}
@deftp {Class} {hsl-color-object}
Color class for a HSL color space.

Color coordinates are hue, saturation, and lightness.  Hue is a real
number in the half-closed @interval{[0, 360)}.  Saturation
and lightness are real numbers in the closed
@interval{[0, 1]}.

@classprecedencelist
@classref{rs-colors, hsl-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cmy-color-object}
@deftp {Class} {cmy-color-object}
Color class for a CMY color space.

Color coordinates are the normalized intensities of the cyan, magenta,
and yellow primary.  Values are real numbers in the closed
@interval{[0, 1]}.

@classprecedencelist
@classref{rs-colors, cmy-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cmyk-color-object}
@deftp {Class} {cmyk-color-object}
Color class for a CMYK color space.

Color coordinates are the normalized intensities of the cyan, magenta,
yellow, and black (key) primary.  Values are real numbers in the closed
@interval{[0, 1]}.

@classprecedencelist
@classref{rs-colors, cmyk-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;generic-color-object}
@deftp {Class} {generic-color-object}
Color class for the mathematical model of a color space.

@classprecedencelist
@classref{rs-colors, generic-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp


@node Generic Color Spaces (Color Models), CIE Color Spaces, Abstract Color Classes, Reference Manual
@section Generic Color Spaces (Color Models)

A generic color space implements a color model.  There are two major
color models: the additive RGB color model and the subtractive CMY color
model.

@menu
* Generic RGB Color Space::
* Generic HSV Color Space::
* Generic HSL Color Space::
* Generic CMY Color Space::
* Generic CMYK Color Space::
@end menu


@node Generic RGB Color Space, Generic HSV Color Space, Generic Color Spaces (Color Models), Generic Color Spaces (Color Models)
@subsection Generic RGB Color Space

The generic RGB color space is a mathematical description of the RGB
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed @interval{[0, 1]}.
There is no white point.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;generic-rgb-color}
@deftp {Class} {generic-rgb-color}
Color class for the generic RGB color space.

@classprecedencelist
@classref{rs-colors, generic-rgb-color},
@classref{rs-colors, rgb-color-object},
@classref{rs-colors, generic-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-rgb-color}
@deffn {Function} {make-generic-rgb-color} @w{red} @w{green} @w{blue} @k{&key} @w{byte-size}
Create a new color in the generic RGB color space.

@itemize
@item
First argument @var{red} is the normalized intensity of the red primary.

@item
Second argument @var{green} is the normalized intensity of the green primary.

@item
Third argument @var{blue} is the normalized intensity of the blue primary.
@end itemize

Arguments @var{red}, @var{green}, and @var{blue} have to be real numbers
in the closed @interval{[0, 1]}.

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  If specified, arguments @var{red}, @var{green}, and
@var{blue} have to be integral numbers in the @range{0, 2^n - 1} where
@math{n} is the number of bits.  If so, arguments @var{red},
@var{green}, and @var{blue} are scaled accordingly.

@noindent
Example:

@lisp
@group
(make-generic-rgb-color 252/255 175/255 62/255)
 @result{} #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>

(make-generic-rgb-color 252 175 62 :byte-size 8)
 @result{} #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-rgb-color-from-number}
@deffn {Function} {make-generic-rgb-color-from-number} @w{value} @k{&key} @w{byte-size}
Create a new color in the generic RGB color space.

@itemize
@item
Argument @var{value} is the numerical value of the encoded RGB color
coordinates.
@end itemize

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  Default is eight bit (one byte).  Argument @var{value} has
to be an integral number in the @range{0, 2^{3n} - 1} where @math{n} is
the number of bits per primary.  The most significant bits denote the
intensity of the red primary.

@noindent
Example:

@lisp
@group
(make-generic-rgb-color-from-number #XFCAF3E)
 @result{} #<GENERIC-RGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;generic-rgb-color-coordinates}
@deffn {Generic Function} {generic-rgb-color-coordinates} @w{color}
Return the generic RGB color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the normalized intensities of the red, green, and blue
primary.
@end deffn


@node Generic HSV Color Space, Generic HSL Color Space, Generic RGB Color Space, Generic Color Spaces (Color Models)
@subsection Generic HSV Color Space

The HSV color space is a different representation of the RGB color
model.  The HSV color space is also called HSB color space.  The generic
HSV color space is not associated with a particular device.

Color coordinates are hue, saturation, and value (brightness).  Hue is a
real number in the half-closed @interval{[0, 360)}.  Saturation and
value are real numbers in the closed @interval{[0, 1]}.  There is no
white point.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;generic-hsv-color}
@deftp {Class} {generic-hsv-color}
Color class for the generic HSV color space.

@classprecedencelist
@classref{rs-colors, generic-hsv-color},
@classref{rs-colors, hsv-color-object},
@classref{rs-colors, generic-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-hsv-color}
@deffn {Function} {make-generic-hsv-color} @w{hue} @w{saturation} @w{value}
Create a new color in the generic HSV color space.

@itemize
@item
First argument @var{hue} is the angle of the RGB color wheel in degree.

@item
Second argument @var{saturation} is the saturation.

@item
Third argument @var{value} is the brightness.
@end itemize

Argument @var{hue} has to be a real number.  It's value is reduced to
the half-closed @interval{[0, 360)}.  Arguments @var{saturation} and
@var{value} have to be real numbers in the closed @interval{[0, 1]}.
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;generic-hsv-color-coordinates}
@deffn {Generic Function} {generic-hsv-color-coordinates} @w{color}
Return the generic HSV color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the hue, saturation, and value (brightness).
@end deffn


@node Generic HSL Color Space, Generic CMY Color Space, Generic HSV Color Space, Generic Color Spaces (Color Models)
@subsection Generic HSL Color Space

The HSL color space is a different representation of the RGB color
model.  The generic HSL color space is not associated with a particular
device.

Color coordinates are hue, saturation, and lightness.  Hue is a real
number in the half-closed @interval{[0, 360)}.  Saturation and lightness
are real numbers in the closed @interval{[0, 1]}.  There is no white
point.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;generic-hsl-color}
@deftp {Class} {generic-hsl-color}
Color class for the generic HSL color space.

@classprecedencelist
@classref{rs-colors, generic-hsl-color},
@classref{rs-colors, hsl-color-object},
@classref{rs-colors, generic-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-hsl-color}
@deffn {Function} {make-generic-hsl-color} @w{hue} @w{saturation} @w{lightness}
Create a new color in the generic HSL color space.

@itemize
@item
First argument @var{hue} is the angle of the RGB color wheel in degree.

@item
Second argument @var{saturation} is the saturation.

@item
Third argument @var{lightness} is the lightness.
@end itemize

Argument @var{hue} has to be a real number.  It's value is reduced to
the half-closed @interval{[0, 360)}.  Arguments @var{saturation} and
@var{lightness} have to be real numbers in the closed @interval{[0, 1]}.
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;generic-hsl-color-coordinates}
@deffn {Generic Function} {generic-hsl-color-coordinates} @w{color}
Return the generic HSL color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the hue, saturation, and lightness.
@end deffn


@node Generic CMY Color Space, Generic CMYK Color Space, Generic HSL Color Space, Generic Color Spaces (Color Models)
@subsection Generic CMY Color Space

The generic CMY color space is a mathematical description of the CMY
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
and yellow primary.  Values are real numbers in the closed
@interval{[0, 1]}.  There is no white point.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;generic-cmy-color}
@deftp {Class} {generic-cmy-color}
Color class for the generic CMY color space.

@classprecedencelist
@classref{rs-colors, generic-cmy-color},
@classref{rs-colors, cmy-color-object},
@classref{rs-colors, generic-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-cmy-color}
@deffn {Function} {make-generic-cmy-color} @w{cyan} @w{magenta} @w{yellow} @k{&key} @w{byte-size}
Create a new color in the generic CMY color space.

@itemize
@item
First argument @var{cyan} is the normalized intensity of the cyan
primary.

@item
Second argument @var{magenta} is the normalized intensity of the magenta
primary.

@item
Third argument @var{yellow} is the normalized intensity of the yellow
primary.
@end itemize

Arguments @var{cyan}, @var{magenta}, and @var{yellow} have to be real
numbers in the closed @interval{[0, 1]}.

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  If specified, arguments @var{cyan}, @var{magenta}, and
@var{yellow} have to be integral numbers in the @range{0, 2^n - 1} where
@math{n} is the number of bits.  If so, arguments @var{cyan},
@var{magenta}, and @var{yellow} are scaled accordingly.

@noindent
Example:

@lisp
@group
(make-generic-cmy-color 3/255 80/255 193/255)
 @result{} #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>

(make-generic-cmy-color 3 80 193 :byte-size 8)
 @result{} #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-cmy-color-from-number}
@deffn {Function} {make-generic-cmy-color-from-number} @w{value} @k{&key} @w{byte-size}
Create a new color in the generic CMY color space.

@itemize
@item
Argument @var{value} is the numerical value of the encoded CMY color
coordinates.
@end itemize

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  Default is eight bit (one byte).  Argument @var{value} has
to be an integral number in the @range{0, 2^{3n} - 1} where @math{n} is
the number of bits per primary.  The most significant bits denote the
intensity of the cyan primary.

@noindent
Example:

@lisp
@group
(make-generic-cmy-color-from-number #X0350C1)
 @result{} #<GENERIC-CMY-COLOR (1/85 16/51 193/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;generic-cmy-color-coordinates}
@deffn {Generic Function} {generic-cmy-color-coordinates} @w{color}
Return the generic CMY color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the normalized intensities of the cyan, magenta, and yellow
primary.
@end deffn


@node Generic CMYK Color Space,  , Generic CMY Color Space, Generic Color Spaces (Color Models)
@subsection Generic CMYK Color Space

The generic CMYK color space is a mathematical description of the CMYK
color model.  It is not associated with a particular device.

Color coordinates are the normalized intensities of the cyan, magenta,
yellow, and black (key) primary.  Values are real numbers in the closed
@interval{[0, 1]}.  There is no white point.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;generic-cmyk-color}
@deftp {Class} {generic-cmyk-color}
Color class for the generic CMYK color space.

@classprecedencelist
@classref{rs-colors, generic-cmyk-color},
@classref{rs-colors, cmyk-color-object},
@classref{rs-colors, generic-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-cmyk-color}
@deffn {Function} {make-generic-cmyk-color} @w{cyan} @w{magenta} @w{yellow} @w{black} @k{&key} @w{byte-size}
Create a new color in the generic CMYK color space.

@itemize
@item
First argument @var{cyan} is the normalized intensity of the cyan
primary.

@item
Second argument @var{magenta} is the normalized intensity of the magenta
primary.

@item
Third argument @var{yellow} is the normalized intensity of the yellow
primary.

@item
Fourth argument @var{black} is the normalized intensity of the black
primary.
@end itemize

Arguments @var{cyan}, @var{magenta}, @var{yellow}, and @var{black} have
to be real numbers in the closed @interval{[0, 1]}.  If @var{black} is
zero, @var{cyan}, @var{magenta}, and @var{yellow} are converted from CMY
color coordinates to CMYK color coordinates.

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  If specified, arguments @var{cyan}, @var{magenta},
@var{yellow}, and @var{black} have to be integral numbers in the
@range{0, 2^n - 1} where @math{n} is the number of bits.  If so,
arguments @var{cyan}, @var{magenta}, @var{yellow}, and @var{black} are
scaled accordingly.

@noindent
Example:

@lisp
@group
(make-generic-cmyk-color 3/255 80/255 193/255 0)
 @result{} #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>

(make-generic-cmyk-color 3 80 193 :byte-size 8)
 @result{} #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-generic-cmyk-color-from-number}
@deffn {Function} {make-generic-cmyk-color-from-number} @w{value} @k{&key} @w{byte-size}
Create a new color in the generic CMYK color space.

@itemize
@item
Argument @var{value} is the numerical value of the encoded CMYK color
coordinates.
@end itemize

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  Default is eight bit (one byte).  Argument @var{value} has
to be an integral number in the @range{0, 2^{4n} - 1} where @math{n} is
the number of bits per primary.  The most significant bits denote the
intensity of the cyan primary.

@noindent
Example:

@lisp
@group
(make-generic-cmyk-color-from-number #X0350C100)
 @result{} #<GENERIC-CMYK-COLOR (0 11/36 95/126 1/85)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;generic-cmyk-color-coordinates}
@deffn {Generic Function} {generic-cmyk-color-coordinates} @w{color}
Return the generic CMYK color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the normalized intensities of the cyan, magenta, yellow, and
black primary.
@end deffn


@node CIE Color Spaces, RGB Color Spaces, Generic Color Spaces (Color Models), Reference Manual
@section CIE Color Spaces

All CIE color spaces are absolute color spaces, that means they are
device independent.

@menu
* CIE RGB Color Space::
* CIE XYZ Color Space::
* CIE xyY Color Space::
* CIE L*u*v* Color Space::
* CIE L*a*b* Color Space::
* CIE L*C*h Color Space::
@end menu


@node CIE RGB Color Space, CIE XYZ Color Space, CIE Color Spaces, CIE Color Spaces
@subsection CIE RGB Color Space

The CIE RGB color space is the origin of all CIE color spaces.

Color coordinates are the normalized intensities of the red, green, and
blue primary.  Values are real numbers in the closed @interval{[0, 1]}.
The white point of the CIE RGB color space is the CIE standard
illuminant@tie{}E@footnote{You can easily check this if you convert
CIE RGB white into the CIE xyY color space:

@lisp
@group
(change-class (make-cie-rgb-color 1 1 1) 'cie-xyy-color)
 @result{} #<CIE-XYY-COLOR (1/3 1/3 1)>
@end group
@end lisp
}.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cie-rgb-color}
@deftp {Class} {cie-rgb-color}
Color class for the CIE RGB color space.

@classprecedencelist
@classref{rs-colors, cie-rgb-color},
@classref{rs-colors, rgb-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-cie-rgb-color}
@deffn {Function} {make-cie-rgb-color} @w{red} @w{green} @w{blue}
Create a new color in the CIE RGB color space.

@itemize
@item
First argument @var{red} is the normalized intensity of the red primary.

@item
Second argument @var{green} is the normalized intensity of the green
primary.

@item
Third argument @var{blue} is the normalized intensity of the blue
primary.
@end itemize

Arguments @var{red}, @var{green}, and @var{blue} have to be real numbers
in the closed @interval{[0, 1]}.
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;cie-rgb-color-coordinates}
@deffn {Generic Function} {cie-rgb-color-coordinates} @w{color}
Return the CIE RGB color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the normalized intensities of the red, green, and blue
primary.
@end deffn


@node CIE XYZ Color Space, CIE xyY Color Space, CIE RGB Color Space, CIE Color Spaces
@subsection CIE XYZ Color Space

The CIE XYZ color space is a linear transformation of the CIE RGB color
space.  The CIE XYZ color space covers all colors an average person can
experience.  Many other color spaces are defined against the CIE XYZ
color space.

Color coordinates are the @math{X}, @math{Y}, and @math{Z} tristimulus
values.  The CIE XYZ color space has no explicit white point.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cie-xyz-color}
@deftp {Class} {cie-xyz-color}
Color class for the CIE XYZ color space.

@classprecedencelist
@classref{rs-colors, cie-xyz-color},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-cie-xyz-color}
@deffn {Function} {make-cie-xyz-color} @w{x} @w{y} @w{z}
Create a new color in the CIE XYZ color space.

@itemize
@item
First argument @var{x} is the @math{X} tristimulus value.

@item
Second argument @var{y} is the @math{Y} tristimulus value.

@item
Third argument @var{z} is the @math{Z} tristimulus value.
@end itemize

Arguments @var{x}, @var{y}, and @var{z} have to be non-negative real
numbers.
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;cie-xyz-color-coordinates}
@deffn {Generic Function} {cie-xyz-color-coordinates} @w{color}
Return the CIE XYZ color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the @math{X}, @math{Y}, and @math{Z} tristimulus values.
@end deffn

@noindent
Objects of the @classref{rs-colors, cie-xyz-color} class can be
instantiated with absolute and normalized color coordinates.  However,
if you want to convert colors from CIE XYZ color space to CIE RGB color
space (or any other RGB color space), the CIE XYZ color coordinates have
to be normalized color coordinates.  See the
@genericref{rs-colors, normalize-color} and
@genericref{rs-colors, absolute-color}, for how to convert from absolute
color coordinates to normalized color coordinates and vice versa.


@node CIE xyY Color Space, CIE L*u*v* Color Space, CIE XYZ Color Space, CIE Color Spaces
@subsection CIE xyY Color Space

The CIE xyY color space uses the @math{x} and @math{y} chromaticity
coordinates of the CIE XYZ color space.  That is,

@ifinfo
@display
x = X / (X + Y + Z)
y = Y / (X + Y + Z)
z = Z / (X + Y + Z)
@end display
@end ifinfo
@iftex
@tex
$$\eqalign{%
x &= {X\over X + Y + Z}\cr
y &= {Y\over X + Y + Z}\cr
z &= {Z\over X + Y + Z}\cr
}$$
@end tex
@end iftex

@noindent
Simple arithmetic results in the following relations:

@ifinfo
@display
Y/y = X + Y + Z
  1 = x + y + z
@end display
@end ifinfo
@iftex
@tex
$$\eqalign{%
{Y\over y} &= X + Y + Z\cr
1 &= x + y + z\cr
}$$
@end tex
@end iftex

@noindent
Therefore, the inverse transformation is

@ifinfo
@display
X = x Y/y
Y = y Y/y = Y
Z = z Y/y = (1 - x - y) Y/y
@end display
@end ifinfo
@iftex
@tex
$$\eqalign{%
X &= x\cdot{Y\over y}\cr
Y &= y\cdot{Y\over y} = Y\cr
Z &= z\cdot{Y\over y} = (1 - x - y)\cdot{Y\over y}\cr
}$$
@end tex
@end iftex

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cie-xyy-color}
@deftp {Class} {cie-xyy-color}
Color class for the CIE xyY color space.

@classprecedencelist
@classref{rs-colors, cie-xyy-color},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-cie-xyy-color}
@deffn {Function} {make-cie-xyy-color} @w{x*} @w{y*} @w{y}
Create a new color in the CIE xyY color space.

@itemize
@item
Arguments @var{x*} and @var{y*} are the @math{x} and @math{y}
chromaticity coordinates of the CIE XYZ color space.

@item
Third argument @var{y} is the luminance, that is the @math{Y}
tristimulus value of the CIE XYZ color space.
@end itemize
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;cie-xyy-color-coordinates}
@deffn {Generic Function} {cie-xyy-color-coordinates} @w{color}
Return the CIE xyY color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the @math{x} and @math{y} chromaticity coordinates and the
luminance.
@end deffn


@node CIE L*u*v* Color Space, CIE L*a*b* Color Space, CIE xyY Color Space, CIE Color Spaces
@subsection CIE L*u*v* Color Space

The CIE L*u*v* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*u*v* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness @var{L*} is in the @range{0, 100}.  However, values
greater than@tie{}@math{100} are accepted, too.  The two chromaticity
coordinates @var{u*} and @var{v*} are usually in the @range{-100, +100}.
CIE L*u*v* color coordinates are always relative to a white point.  This
is either the white point of the color space you are converting from or
CIE standard illuminant D50.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cie-luv-color}
@deftp {Class} {cie-luv-color}
Color class for the CIE L*u*v* color space.

@classprecedencelist
@classref{rs-colors, cie-luv-color},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-cie-luv-color}
@deffn {Function} {make-cie-luv-color} @w{L*} @w{u*} @w{v*} @k{&optional} @w{white-point}
Create a new color in the CIE L*u*v* color space.

@itemize
@item
First argument @var{L*} is the lightness.

@item
Second argument @var{u*} is the first chromaticity coordinate.

@item
Third argument @var{v*} is the second chromaticity coordinate.
@end itemize
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;cie-luv-color-coordinates}
@deffn {Generic Function} {cie-luv-color-coordinates} @w{color}
Return the CIE L*u*v* color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the lightness and the two chromaticity coordinates.
@end deffn


@node CIE L*a*b* Color Space, CIE L*C*h Color Space, CIE L*u*v* Color Space, CIE Color Spaces
@subsection CIE L*a*b* Color Space

The CIE L*a*b* color space is a non-linear transformation of the CIE XYZ
color space.  The CIE L*a*b* color space is more perceptually uniform
than the CIE XYZ color space.

Color coordinates are lightness and two chromaticity coordinates.
Lightness @var{L*} is in the @range{0, 100}.  However, values
greater than@tie{}@math{100} are accepted, too.  The two chromaticity
coordinates @var{a*} and @var{b*} are usually in the @range{-250, +250}
and from@tie{}@math{-100} to@tie{}@math{+100} respectively.  CIE L*a*b* color
coordinates are always relative to a white point.  This is either the
white point of the color space you are converting from or CIE standard
illuminant D50.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cie-lab-color}
@deftp {Class} {cie-lab-color}
Color class for the CIE L*a*b* color space.

@classprecedencelist
@classref{rs-colors, cie-lab-color},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-cie-lab-color}
@deffn {Function} {make-cie-lab-color} @w{L*} @w{a*} @w{b*} @k{&optional} @w{white-point}
Create a new color in the CIE L*a*b* color space.

@itemize
@item
First argument @var{L*} is the lightness.

@item
Second argument @var{a*} is the first chromaticity coordinate.

@item
Third argument @var{b*} is the second chromaticity coordinate.
@end itemize
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;cie-lab-color-coordinates}
@deffn {Generic Function} {cie-lab-color-coordinates} @w{color}
Return the CIE L*a*b* color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the lightness and the two chromaticity coordinates.
@end deffn


@node CIE L*C*h Color Space,  , CIE L*a*b* Color Space, CIE Color Spaces
@subsection CIE L*C*h Color Space

The CIE L*C*h color space is the transformation of the CIE L*a*b* color
space from a Cartesian coordinate system into a cylindrical coordinate
system.

Color coordinates are lightness, chroma, and hue.  Lightness @var{L*} is
equal to the lightness of the CIE L*a*b* color space.  Chroma @var{C*}
and hue @var{h} are the polar coordinates, i.e. radius and angle, of a
color in the (@var{a*},@tie{}@var{b*}) plane.

Hue is measured in degree angle; @math{h = 0^\circ} is the positive
@var{a*}-axis (red), @math{h = 90^\circ} is the positive @var{b*}-axis
(yellow), @math{h = 180^\circ} is the negative @var{a*}-axis (green),
and @math{h = 270^\circ} is the negative @var{b*}-axis (blue).

CIE L*C*h color coordinates are always relative to a white point.  This is
either the white point of the color space you are converting from or CIE
standard illuminant D50.

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;cie-lch-color}
@deftp {Class} {cie-lch-color}
Color class for the CIE L*C*h color space.

@classprecedencelist
@classref{rs-colors, cie-lch-color},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-cie-lch-color}
@deffn {Function} {make-cie-lch-color} @w{L*} @w{C*} @w{h} @k{&optional} @w{white-point}
Create a new color in the CIE L*C*h color space.

@itemize
@item
First argument @var{L*} is the lightness.

@item
Second argument @var{C*} is the chroma.

@item
Third argument @var{h} is the hue.
@end itemize

Arguments @var{L*} and @var{C*} have to be non-negative real numbers.
Argument @var{h} has to be a real number.  It's value is reduced to the
half-closed @interval{[0, 360)}.
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;cie-lch-color-coordinates}
@deffn {Generic Function} {cie-lch-color-coordinates} @w{color}
Return the CIE L*C*h color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the lightness, chroma, and hue.
@end deffn


@node RGB Color Spaces, Color Properties, CIE Color Spaces, Reference Manual
@section RGB Color Spaces

@menu
* sRGB Color Space::
* Adobe RGB Color Space::
@end menu

@node sRGB Color Space, Adobe RGB Color Space, RGB Color Spaces, RGB Color Spaces
@subsection sRGB Color Space

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;srgb-color}
@deftp {Class} {srgb-color}
Color class for the sRGB color space.

@classprecedencelist
@classref{rs-colors, srgb-color},
@classref{rs-colors, rgb-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-srgb-color}
@deffn {Function} {make-srgb-color} @w{red} @w{green} @w{blue} @k{&key} @w{byte-size}
Create a new color in the sRGB color space.

@itemize
@item
First argument @var{red} is the normalized intensity of the red primary.

@item
Second argument @var{green} is the normalized intensity of the green primary.

@item
Third argument @var{blue} is the normalized intensity of the blue primary.
@end itemize

Arguments @var{red}, @var{green}, and @var{blue} have to be normalized intensity values
in the closed @interval{[0, 1]}.

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  If specified, arguments @var{red}, @var{green}, and
@var{blue} have to be integral numbers in the @range{0, 2^n - 1} where
@math{n} is the number of bits.  If so, arguments @var{red},
@var{green}, and @var{blue} are scaled accordingly.

@noindent
Example:

@lisp
@group
(make-srgb-color 252/255 175/255 62/255)
 @result{} #<SRGB-COLOR (84/85 35/51 62/255)>

(make-srgb-color 252 175 62 :byte-size 8)
 @result{} #<SRGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-srgb-color-from-number}
@deffn {Function} {make-srgb-color-from-number} @w{value} @k{&key} @w{byte-size}
Create a new color in the sRGB color space.

@itemize
@item
Argument @var{value} is the numerical value of the encoded RGB color
coordinates.
@end itemize

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  Default is eight bit (one byte).  Argument @var{value} has
to be an integral number in the @range{0, 2^{3n} - 1} where @math{n} is
the number of bits per primary.  The most significant bits denote the
intensity of the red primary.

@noindent
Example:

@lisp
@group
(make-srgb-color-from-number #XFCAF3E)
 @result{} #<SRGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;srgb-color-coordinates}
@deffn {Generic Function} {srgb-color-coordinates} @w{color}
Return the sRGB color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the normalized intensities of the red, green, and blue
primary.
@end deffn


@node Adobe RGB Color Space,  , sRGB Color Space, RGB Color Spaces
@subsection Adobe RGB Color Space

@c ---------------------------------------------------------------------
@anchor{class;rs-colors;adobe-rgb-color}
@deftp {Class} {adobe-rgb-color}
Color class for the Adobe RGB color space.

@classprecedencelist
@classref{rs-colors, adobe-rgb-color},
@classref{rs-colors, rgb-color-object},
@classref{rs-colors, color-object},
@dots{}
@end deftp

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-adobe-rgb-color}
@deffn {Function} {make-adobe-rgb-color} @w{red} @w{green} @w{blue} @k{&key} @w{byte-size}
Create a new color in the Adobe RGB color space.

@itemize
@item
First argument @var{red} is the normalized intensity of the red primary.

@item
Second argument @var{green} is the normalized intensity of the green primary.

@item
Third argument @var{blue} is the normalized intensity of the blue primary.
@end itemize

Arguments @var{red}, @var{green}, and @var{blue} have to be normalized
intensity values in the closed @interval{[0, 1]}.

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  If specified, arguments @var{red}, @var{green}, and
@var{blue} have to be integral numbers in the @range{0, 2^n - 1} where
@math{n} is the number of bits.  If so, arguments @var{red},
@var{green}, and @var{blue} are scaled accordingly.

@noindent
Example:

@lisp
@group
(make-adobe-rgb-color 252/255 175/255 62/255)
 @result{} #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>

(make-adobe-rgb-color 252 175 62 :byte-size 8)
 @result{} #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;make-adobe-rgb-color-from-number}
@deffn {Function} {make-adobe-rgb-color-from-number} @w{value} @k{&key} @w{byte-size}
Create a new color in the Adobe RGB color space.

@itemize
@item
Argument @var{value} is the numerical value of the encoded RGB color
coordinates.
@end itemize

Keyword argument @var{byte-size} is the number of bits used to represent
a primary.  Default is eight bit (one byte).  Argument @var{value} has
to be an integral number in the @range{0, 2^{3n} - 1} where @math{n} is
the number of bits per primary.  The most significant bits denote the
intensity of the red primary.

@noindent
Example:

@lisp
@group
(make-adobe-rgb-color-from-number #XFCAF3E)
 @result{} #<ADOBE-RGB-COLOR (84/85 35/51 62/255)>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;adobe-rgb-color-coordinates}
@deffn {Generic Function} {adobe-rgb-color-coordinates} @w{color}
Return the Adobe RGB color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Values are the normalized intensities of the red, green, and blue
primary.
@end deffn


@node Color Properties, Color Conversions, RGB Color Spaces, Reference Manual
@section Color Properties

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;color-coordinates}
@deffn {Generic Function} {color-coordinates} @w{color}
Return the color space coordinates of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;white-point}
@deffn {Generic Function} {white-point} @w{color}
Return the white point of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Value is the color object of the color's white point, or nil if the
white point is not defined or if multiple white points exist.
@end deffn


@node Color Conversions, Input and Output, Color Properties, Reference Manual
@section Color Conversions

@c ---------------------------------------------------------------------
@anchor{generic-function;common-lisp;change-class}
@deffn {Generic Function} {change-class} @w{color} @w{color-type}
Change the class of the color object.

@itemize
@item
First argument @var{color} is a color object.

@item
Second argument @var{color-type} is a color data type.
@end itemize

The @code{change-class} function destructively modifies @var{color} by
converting it's color coordinates into the color space denoted by
@var{color-type}.

@noindent
Example:

@lisp
@group
(let ((red (make-srgb-color 1 0 0)))
  (change-class red 'cie-xyy-color)
  red)
 @result{} #<CIE-XYY-COLOR (0.64d0 0.33d0 @r{@dots{}})>
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;coerce-color}
@deffn {Function} {coerce-color} @w{color} @w{color-type}
Coerce the color object into the specified color type.

@itemize
@item
First argument @var{color} is a color object.

@item
Second argument @var{color-type} is a color data type.
@end itemize

If argument @var{color} is already a color of the requested color data
type, return @var{color} as is (no conversion).  Otherwise, return a new
color with the color coordinates of @var{color} converted into the color
space denoted by @var{color-type}.
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;copy-color}
@deffn {Generic Function} {copy-color} @w{color}
Return a shallow copy of the color.

@itemize
@item
Argument @var{color} is a color object.
@end itemize

Value is a color object with the same color coordinates as @var{color}.
@end deffn


@node Input and Output, Miscellaneous, Color Conversions, Reference Manual
@section Input and Output

@menu
* Xcms Formats::
* HTML Format::
* CSS3 Formats::
@end menu


@node Xcms Formats, HTML Format, Input and Output, Input and Output
@subsection Xcms Formats

The syntax of a Xcms (X Color Management System) color is

@example
@var{prefix}:@var{first}/@var{second}/@var{third}
@end example

The @var{prefix} part specifies the color space or format and
@var{first}, @var{second}, and @var{third} are the color coordinates.

@multitable {mmmmmmmmmm} {mmmmmm} {mm}
@headitem Color Space @tab Prefix @tab R5
@item CIE RGB       @tab @code{CIERGB} @tab
@item CIE XYZ       @tab @code{CIEXYZ} @tab @bullet{}
@item CIE xyY       @tab @code{CIExyY} @tab @bullet{}
@item CIE L*u*v*    @tab @code{CIELuv} @tab @bullet{}
@item CIE L*a*b*    @tab @code{CIELab} @tab @bullet{}
@item CIE L*C*h     @tab @code{CIELCh} @tab
@item Tektronix HVC @tab @code{TekHVC} @tab @bullet{}
@item generic RGB   @tab @code{RGBi}   @tab @bullet{}
@item generic RGB   @tab @code{RGB}    @tab @bullet{}
@end multitable

@noindent
The @var{prefix} part is case insensitive.

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;print-color-xcms-cie-rgb}
@anchor{function;rs-colors;print-color-xcms-cie-xyz}
@anchor{function;rs-colors;print-color-xcms-cie-xyy}
@anchor{function;rs-colors;print-color-xcms-cie-luv}
@anchor{function;rs-colors;print-color-xcms-cie-lab}
@anchor{function;rs-colors;print-color-xcms-cie-lch}
@anchor{function;rs-colors;print-color-xcms-rgbi}
@anchor{function;rs-colors;print-color-xcms-rgb}
@deffn  {Function} {print-color-xcms-cie-rgb} color @k{&optional} stream
@deffnx {Function} {print-color-xcms-cie-xyz} color @k{&optional} stream
@deffnx {Function} {print-color-xcms-cie-xyy} color @k{&optional} stream
@deffnx {Function} {print-color-xcms-cie-luv} color @k{&optional} stream
@deffnx {Function} {print-color-xcms-cie-lab} color @k{&optional} stream
@deffnx {Function} {print-color-xcms-cie-lch} color @k{&optional} stream
@deffnx {Function} {print-color-xcms-rgbi} color @k{&optional} stream
@deffnx {Function} {print-color-xcms-rgb} color @k{&optional} stream
Print a color in Xcms notation.

@itemize
@item
First argument @var{color} is a color object.

@item
Optional second argument @var{stream} is an output stream.
Default is to print to @code{*standard-output*}.
@end itemize

Value is the color object.

The RGBi and RGB formats are device dependent.  Thus, you can only print
colors in these formats if the color conversion path to the generic RGB
color space is unambiguous.

The RGB format prints the color coordinates as hexadecimal numbers.
If all RGB color intensities are multiples of @math{1/255}, it uses
two digits.  Otherwise, it uses four digits with a precision of
@math{1/65535}.

@noindent
Example:

@lisp
@group
(let ((color (make-srgb-color 78 154 6 :byte-size 8)))
  (with-output-to-string (stream)
    (print-color-xcms-cie-xyz color stream)))
 @result{} "CIEXYZ:0.14729778/0.24743336/0.04172078"
@end group

@group
(let ((color (make-srgb-color-from-number #X4E9A06)))
  (with-output-to-string (stream)
    (print-color-xcms-rgb color stream)))
 @result{} "RGB:4e/9a/06"
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;color-formatter-xcms-cie-rgb}
@anchor{function;rs-colors;color-formatter-xcms-cie-xyz}
@anchor{function;rs-colors;color-formatter-xcms-cie-xyy}
@anchor{function;rs-colors;color-formatter-xcms-cie-luv}
@anchor{function;rs-colors;color-formatter-xcms-cie-lab}
@anchor{function;rs-colors;color-formatter-xcms-cie-lch}
@anchor{function;rs-colors;color-formatter-xcms-rgbi}
@anchor{function;rs-colors;color-formatter-xcms-rgb}
@defvr  {Constant} {color-formatter-xcms-cie-rgb}
@defvrx {Constant} {color-formatter-xcms-cie-xyz}
@defvrx {Constant} {color-formatter-xcms-cie-xyy}
@defvrx {Constant} {color-formatter-xcms-cie-luv}
@defvrx {Constant} {color-formatter-xcms-cie-lab}
@defvrx {Constant} {color-formatter-xcms-cie-lch}
@defvrx {Constant} {color-formatter-xcms-rgbi}
@defvrx {Constant} {color-formatter-xcms-rgb}
A format function for printing a color in Xcms notation.

Value is a function which has a behavior equivalent to a function
returned by the @code{formatter} macro.

@noindent
Example:

@lisp
@group
(let ((color (make-srgb-color 78 154 6 :byte-size 8)))
  (format nil color-formatter-xcms-cie-xyz color))
 @result{} "CIEXYZ:0.14729778/0.24743336/0.04172078"
@end group
@end lisp
@end defvr

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;read-color-xcms-cie-rgb}
@anchor{function;rs-colors;read-color-xcms-cie-xyz}
@anchor{function;rs-colors;read-color-xcms-cie-xyy}
@anchor{function;rs-colors;read-color-xcms-cie-luv}
@anchor{function;rs-colors;read-color-xcms-cie-lab}
@anchor{function;rs-colors;read-color-xcms-cie-lch}
@anchor{function;rs-colors;read-color-xcms-rgbi}
@anchor{function;rs-colors;read-color-xcms-rgb}
@deffn  {Function} {read-color-xcms-cie-rgb} @k{&optional} @w{stream}
@deffnx {Function} {read-color-xcms-cie-xyz} @k{&optional} @w{stream}
@deffnx {Function} {read-color-xcms-cie-xyy} @k{&optional} @w{stream}
@deffnx {Function} {read-color-xcms-cie-luv} @k{&optional} @w{stream}
@deffnx {Function} {read-color-xcms-cie-lab} @k{&optional} @w{stream}
@deffnx {Function} {read-color-xcms-cie-lch} @k{&optional} @w{stream}
@deffnx {Function} {read-color-xcms-rgbi} @k{&optional} @w{stream}
@deffnx {Function} {read-color-xcms-rgb} @k{&optional} @w{stream}
Read a color in Xcms format.

@itemize
@item
Optional argument @var{stream} is an input stream.
Default is to read from @code{*standard-input*}.
@end itemize

Value is a color object in the respective color space.
The RGB format prints the color coordinates as hexadecimal numbers.
If all RGB color intensities are multiples of @math{1/255}, it uses
two digits.  Otherwise, it uses four digits with a precision of
@math{1/65535}.

@noindent
Example:

@lisp
@group
(with-input-from-string (stream "RGB:4e/9a/06 junk")
  (change-class (read-color-xcms-rgb stream) 'srgb-color))
 @result{} #<SRGB-COLOR (26/85 154/255 2/85)>
@end group
@end lisp
@end deffn


@node HTML Format, CSS3 Formats, Xcms Formats, Input and Output
@subsection HTML Format

A HTML color value is either a hexadecimal number prefixed by a hash
mark or a keyword.  This section only covers numerical color values.

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;print-color-html}
@deffn {Function} {print-color-html} color @k{&optional} stream
Print a numerical HTML color value, that is a hexadecimal number
prefixed by a hash mark.

@itemize
@item
First argument @var{color} is a color object.

@item
Optional second argument @var{stream} is an output stream.  Default is
to print to @code{*standard-output*}.
@end itemize

Value is the color object.

@noindent
Example:

@lisp
@group
(let ((color (make-srgb-color-from-number #X4E9A06)))
  (with-output-to-string (stream)
    (print-color-html color stream)))
 @result{} "#4E9A06"
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{constant;rs-colors;color-formatter-html}
@defvr {Constant} {color-formatter-html}
A format function for printing a numerical HTML color value.

Value is a function which has a behavior equivalent to a function
returned by the @code{formatter} macro.

@noindent
Example:

@lisp
@group
(let ((color (make-srgb-color-from-number #X4E9A06)))
  (format nil color-formatter-html color))
 @result{} "#4E9A06"
@end group
@end lisp
@end defvr

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;read-color-html}
@deffn {Function} {read-color-html} @k{&optional} @w{stream}
Read a numerical HTML color value, that is a hexadecimal number prefixed
by a hash mark.

Reading stops at the first non-hexadecimal digit character.  The number
of hexadecimal digits has to be a multiple of three.

@itemize
@item
Optional argument @var{stream} is an input stream.  Default is to read
from @code{*standard-input*}.
@end itemize

Value is a color object in the sRGB color space.

@noindent
Example:

@lisp
@group
(with-input-from-string (stream "#4E9A06 junk")
  (read-color-html stream))
 @result{} #<SRGB-COLOR (26/85 154/255 2/85)>
@end group
@end lisp
@end deffn


@node CSS3 Formats,  , HTML Format, Input and Output
@subsection CSS3 Formats

A CSS3 (cascading style sheets, level 3) color is either a HTML color
value or a color value in functional notation.  The later has the form

@example
rgb(@var{red}, @var{green}, @var{blue})
@end example

@noindent
where @var{red}, @var{green}, and @var{blue} are either integers in the
@range{0, 255} or percentage values in the @range{0@dmn{%}, 100@dmn{%}}.
CSS3 also supports a functional notation for RGB colors represented in
the HSL color space.  The format is

@example
hsl(@var{hue}, @var{saturation}, @var{lightness})
@end example

@noindent
where @var{hue} is the angle in degree and @var{saturation}
and @var{lightness} are percentage values in the
@range{0@dmn{%}, 100@dmn{%}}.

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;print-color-css3-rgb}
@deffn {Function} {print-color-css3-rgb} color @k{&optional} stream
Print a color in CSS3 RGB functional notation.

@itemize
@item
First argument @var{color} is a color object.

@item
Optional second argument @var{stream} is an output stream.  Default is
to print to @code{*standard-output*}.
@end itemize

Value is the color object.

If all sRGB color intensities are multiples of @math{1/255}, the
@var{red}, @var{green}, and @var{blue} color intensities are printed
as integers.  Otherwise, they are printed as percentage values.

@noindent
Example:

@lisp
@group
(let ((color (make-srgb-color-from-number #X4E9A06)))
  (with-output-to-string (stream)
    (print-color-css3-rgb color stream)))
 @result{} "rgb(78, 154, 6)"
@end group

@group
(let ((color (make-srgb-color 0.3D0 0.6D0 0.1D0)))
  (with-output-to-string (stream)
    (print-color-css3-rgb color stream)))
 @result{} "rgb(30.0%, 60.0%, 10.0%)"
@end group
@end lisp
@end deffn

@c ---------------------------------------------------------------------
@anchor{constant;rs-colors;color-formatter-css3-rgb}
@defvr {Constant} {color-formatter-css3-rgb}
A format function for printing a color in CSS3 RGB functional notation.

Value is a function which has a behavior equivalent to a function
returned by the @code{formatter} macro.

@noindent
Example:

@lisp
@group
(let ((color (make-srgb-color-from-number #X4E9A06)))
  (format nil color-formatter-css3-rgb color))
 @result{} "rgb(78, 154, 6)"
@end group
@end lisp
@end defvr

@c ---------------------------------------------------------------------
@anchor{function;rs-colors;read-color-css3-rgb}
@deffn {Function} {read-color-css3-rgb} @k{&optional} @w{stream}
Read a color in CSS3 RGB functional notation.

@itemize
@item
Optional argument @var{stream} is an input stream.  Default is to read
from @code{*standard-input*}.
@end itemize

Reading stops after the closing parenthesis.

Value is a color object in the sRGB color space.

@noindent
Example:

@lisp
@group
(with-input-from-string (stream "rgb(78, 154, 6) junk")
  (read-color-css3-rgb stream))
 @result{} #<SRGB-COLOR (26/85 154/255 2/85)>
@end group

@group
(with-input-from-string (stream "rgb(30%, 60%, 10%) junk")
  (read-color-css3-rgb stream))
 @result{} #<SRGB-COLOR (0.3d0 0.6d0 0.1d0)>
@end group
@end lisp
@end deffn


@node Miscellaneous,  , Input and Output, Reference Manual
@section Miscellaneous

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;normalize-color}
@deffn {Generic Function} {normalize-color} @w{color} @k{&key} @w{black} @w{white}
Convert from absolute color coordinates to normalized color coordinates.
@end deffn

@c ---------------------------------------------------------------------
@anchor{generic-function;rs-colors;absolute-color}
@deffn {Generic Function} {absolute-color} @w{color} @k{&key} @w{black} @w{white}
Convert from normalized color coordinates to absolute color coordinates.
@end deffn


@node Symbol Index,  , Reference Manual, Top
@unnumbered Symbol Index

@printindex fn

@bye


@c LocalWords: texinfo tex texi pt filll dir

@c local variables:
@c mode: outline-minor
@c outline-regexp: "@\\(chapt\\|unnum\\|appen\\|section\\|subsection\\)"
@c time-stamp-time-zone: "UTC"
@c time-stamp-format: "%:y-%02m-%02d"
@c time-stamp-start: "^@set UPDATED[    ]+"
@c time-stamp-end: "$"
@c end:
